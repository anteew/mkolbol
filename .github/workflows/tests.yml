name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Unit/Integration (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20, 24]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Restore Laminar trends history
        uses: actions/cache@v4
        with:
          path: reports/history.jsonl
          key: laminar-history-node${{ matrix.node }}-${{ github.ref }}
          restore-keys: |
            laminar-history-node${{ matrix.node }}-

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Threads lane (dual reporters)
        env:
          LAMINAR_SUITE: threads
        run: |
          mkdir -p reports
          npx vitest run \
            --pool=threads \
            --exclude='**/{ptyServerWrapper,multiModalOutput,endpointsList,processMode}.spec.ts' \
            --reporter=default \
            --reporter=./node_modules/@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js \
            > reports/threads_raw.log 2>&1

      - name: Forks lane (process-mode gated)
        env:
          LAMINAR_SUITE: forks
        run: |
          mkdir -p reports
          npx vitest run \
            --pool=forks \
            --poolOptions.forks.singleFork=true \
            tests/wrappers/ptyServerWrapper.spec.ts \
            tests/integration/multiModalOutput.spec.ts \
            tests/integration/endpointsList.spec.ts \
            tests/integration/workerMode.spec.ts \
            --reporter=default \
            --reporter=./node_modules/@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js \
            > reports/forks_raw.log 2>&1

      # Enforced process-mode adapters run (required)
      - name: Process-mode (Unix adapters)
        env:
          LAMINAR_SUITE: process-unix
        run: |
          mkdir -p reports
          MK_PROCESS_EXPERIMENTAL=1 npx vitest run \
            --pool=forks \
            --poolOptions.forks.singleFork=true \
            tests/integration/processUnix.spec.ts \
            --reporter=default \
            --reporter=./node_modules/@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js \
            > reports/process_raw.log 2>&1

      - name: Append to Laminar trends history
        if: ${{ always() }}
        continue-on-error: true
        run: npm run lam:append-history || true

      - name: Laminar summary/trends (best‑effort)
        if: ${{ always() }}
        continue-on-error: true
        run: |
          mkdir -p reports
          npm run lam -- summary > reports/LAMINAR_SUMMARY.txt || true
          npm run lam -- trends --top 10 > reports/LAMINAR_TRENDS.txt || true

      - name: Generate Laminar repro hints
        if: ${{ always() }}
        continue-on-error: true
        run: npm run lam:repro || true

      - name: Post Laminar summary to PR (best-effort)
        if: ${{ always() }}
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          NODE_VERSION: ${{ matrix.node }}
        run: node scripts/post-laminar-pr-comment.js || true

      - name: Upload artifacts (reports)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: laminar-reports-${{ matrix.node }}
          path: reports
          if-no-files-found: warn

  # Consumer acceptance test: install from tarball
  consumer-test:
    name: Consumer Acceptance Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: npm

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run consumer acceptance test
        run: npm run test:consumer

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consumer-test-logs
          path: |
            *.tgz
            /tmp/mkolbol-consumer-test-*/
          if-no-files-found: warn

  # Acceptance smoke test: run mkctl with FilesystemSink config (best-effort)
  acceptance-smoke:
    name: Acceptance Smoke Test (FilesystemSink)
    runs-on: ubuntu-latest
    needs: test
    if: ${{ always() }}
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: npm

      - name: Install
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run acceptance smoke test
        env:
          MK_LOCAL_NODE: '1'
        run: |
          # Run mkctl with http-logs-local-file.yml for 5 seconds
          timeout 10 node dist/scripts/mkctl.js run \
            --file examples/configs/http-logs-local-file.yml \
            --duration 5 \
            > /tmp/smoke-test.log 2>&1 || true

          # Capture test results
          TEST_RESULT_FILE="reports/acceptance-smoke.jsonl"
          mkdir -p reports

          # Check if topology ran successfully
          if grep -q "Topology running" /tmp/smoke-test.log; then
            TOPOLOGY_PASS="true"
          else
            TOPOLOGY_PASS="false"
          fi

          # Check if FilesystemSink JSONL was created (reports/http-logs.jsonl)
          if [ -f reports/http-logs.jsonl ]; then
            FILESINK_PASS="true"
            LOG_LINES=$(wc -l < reports/http-logs.jsonl)
            echo "✅ FilesystemSink smoke test PASSED: JSONL file created with $LOG_LINES lines"
            head -n 5 reports/http-logs.jsonl || true
          else
            FILESINK_PASS="false"
            echo "⚠️  FilesystemSink smoke test: reports/http-logs.jsonl not found"
          fi

          # Check if router endpoints were recorded
          if [ -f reports/router-endpoints.json ]; then
            ENDPOINTS_PASS="true"
            ENDPOINT_COUNT=$(jq 'length' reports/router-endpoints.json)
            echo "✅ Router endpoints recorded: $ENDPOINT_COUNT endpoints"
          else
            ENDPOINTS_PASS="false"
            echo "⚠️  Router endpoints not found"
          fi

          # Record results as JSONL for aggregation
          echo "{\"type\":\"acceptance\",\"topology\":$TOPOLOGY_PASS,\"filesink\":$FILESINK_PASS,\"endpoints\":$ENDPOINTS_PASS,\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" >> "$TEST_RESULT_FILE"

      - name: Upload smoke test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-smoke-logs
          path: |
            /tmp/smoke-test.log
            logs/
          if-no-files-found: warn
