name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release with Tarball
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Pack
        run: npm pack

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Get tarball filename
        id: tarball
        run: |
          TARBALL=$(ls mkolbol-*.tgz)
          echo "FILENAME=$TARBALL" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const tag = context.ref.replace('refs/tags/', '');
            const version = tag.replace('v', '');

            let releaseNotes = `## mkolbol ${version}\n\n`;
            releaseNotes += `Stream-based microkernel for AI agent systems\n\n`;
            releaseNotes += `### Installation\n\n`;
            releaseNotes += '```bash\n';
            releaseNotes += `# From tarball\n`;
            releaseNotes += `npm install https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${tag}/mkolbol-${version}.tgz\n`;
            releaseNotes += '```\n\n';
            releaseNotes += `### Changes\n\n`;
            releaseNotes += `See commit history for details.`;

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `v${version}`,
              body: releaseNotes,
              draft: false,
              prerelease: version.includes('-') || version.includes('alpha') || version.includes('beta') || version.includes('rc')
            });

            core.setOutput('upload_url', release.data.upload_url);
            core.setOutput('release_id', release.data.id);
            core.notice(`âœ… Created GitHub release v${version}`);

      - name: Upload tarball to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.tarball.outputs.FILENAME }}
          asset_name: ${{ steps.tarball.outputs.FILENAME }}
          asset_content_type: application/gzip
