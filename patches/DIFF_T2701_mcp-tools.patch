diff --git a/README.md b/README.md
index 3ea655e..7226606 100644
--- a/README.md
+++ b/README.md
@@ -196,6 +196,9 @@ The project includes an MCP (Model Context Protocol) server for exposing Laminar
 - **Resources:** Exposes `summary.jsonl` and digest files as MCP resources
 - **Tools:** Provides `query_logs`, `get_digest`, and `list_failures` tools
 - **Protocol:** Standard MCP protocol for AI agent integration
+- **JSON Contracts:** Fully type-safe input/output schemas with validation
+- **Error Model:** Structured errors with codes, messages, and context
+- **Idempotence:** All operations are safe to retry
 
 **Usage:**
 
@@ -223,8 +226,38 @@ const failures = await server.callTool('list_failures', {});
 
 **Tools:**
 - `query_logs` - Query test event logs with filters (caseName, level, event, limit)
+  - Input: `{ caseName?: string, level?: string, event?: string, limit?: number }`
+  - Output: `{ events: DigestEvent[], totalCount: number }`
+  - Idempotent: Returns same results for same inputs, empty array for missing files
 - `get_digest` - Get digest for a specific failed test case
+  - Input: `{ caseName: string }` (required)
+  - Output: `{ digest: DigestOutput | null }`
+  - Idempotent: Returns null for missing digests
 - `list_failures` - List all failed test cases from summary
+  - Input: `{}` (no parameters)
+  - Output: `{ failures: SummaryEntry[] }`
+  - Idempotent: Returns empty array if summary doesn't exist
+
+**Error Handling:**
+
+All operations use structured error codes:
+- `INVALID_INPUT` - Invalid input parameters (with validation details)
+- `RESOURCE_NOT_FOUND` - Resource URI not found
+- `TOOL_NOT_FOUND` - Tool name not recognized
+- `IO_ERROR` - File system operation failed
+- `PARSE_ERROR` - JSON parsing failed
+- `INTERNAL_ERROR` - Unexpected internal error
+
+Error format:
+```json
+{
+  "error": {
+    "code": "INVALID_INPUT",
+    "message": "caseName is required and must be a string",
+    "details": { "received": null }
+  }
+}
+```
 
 ### Cross-Language Test Ingest
 
diff --git a/dist/mcp/laminar/server.d.ts b/dist/mcp/laminar/server.d.ts
index 55b2299..17503a2 100644
--- a/dist/mcp/laminar/server.d.ts
+++ b/dist/mcp/laminar/server.d.ts
@@ -1,7 +1,35 @@
-import { DigestEvent } from '../../digest/generator.js';
+import { DigestEvent, DigestOutput, DigestConfig } from '../../digest/generator.js';
 export type Json = null | boolean | number | string | Json[] | {
     [k: string]: Json;
 };
+export declare enum McpErrorCode {
+    INVALID_INPUT = "INVALID_INPUT",
+    RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
+    TOOL_NOT_FOUND = "TOOL_NOT_FOUND",
+    IO_ERROR = "IO_ERROR",
+    PARSE_ERROR = "PARSE_ERROR",
+    INTERNAL_ERROR = "INTERNAL_ERROR"
+}
+export declare class McpError extends Error {
+    code: McpErrorCode;
+    details?: Record<string, unknown> | undefined;
+    constructor(code: McpErrorCode, message: string, details?: Record<string, unknown> | undefined);
+    toJson(): Json;
+}
+export interface JsonSchema {
+    type: string;
+    properties?: Record<string, JsonSchemaProperty>;
+    required?: string[];
+    additionalProperties?: boolean;
+}
+export interface JsonSchemaProperty {
+    type: string;
+    description?: string;
+    default?: unknown;
+    enum?: string[];
+    minimum?: number;
+    maximum?: number;
+}
 export interface McpResource {
     uri: string;
     name: string;
@@ -11,15 +39,80 @@ export interface McpResource {
 export interface McpTool {
     name: string;
     description: string;
-    inputSchema: {
-        type: 'object';
-        properties: Record<string, unknown>;
-        required?: string[];
-    };
+    inputSchema: JsonSchema;
+}
+export interface QueryLogsInput {
+    caseName?: string;
+    level?: string;
+    event?: string;
+    limit?: number;
+}
+export interface QueryLogsOutput {
+    events: DigestEvent[];
+    totalCount: number;
+}
+export interface GetDigestInput {
+    caseName: string;
+}
+export interface GetDigestOutput {
+    digest: DigestOutput | null;
+}
+export interface ListFailuresInput {
+}
+export interface ListFailuresOutput {
+    failures: SummaryEntry[];
+}
+export interface RunInput {
+    suite?: string;
+    case?: string;
+    flakeDetect?: boolean;
+    flakeRuns?: number;
+}
+export interface RunOutput {
+    exitCode: number;
+    message: string;
+}
+export interface RulesGetInput {
+}
+export interface RulesGetOutput {
+    config: DigestConfig;
+}
+export interface RulesSetInput {
+    config: DigestConfig;
+}
+export interface RulesSetOutput {
+    success: boolean;
+    message: string;
+}
+export interface DigestGenerateInput {
+    cases?: string[];
+}
+export interface DigestGenerateOutput {
+    count: number;
+    message: string;
+}
+export interface LogsCaseGetInput {
+    caseName: string;
+}
+export interface LogsCaseGetOutput {
+    logs: string;
+}
+export interface ReproInput {
+    caseName?: string;
+}
+export interface ReproOutput {
+    commands: ReproCommand[];
+}
+export interface ReproCommand {
+    testName: string;
+    testFile: string;
+    vitestCommand: string;
+    logCommand: string;
 }
 export interface McpServerConfig {
     reportsDir?: string;
     summaryFile?: string;
+    configFile?: string;
 }
 export interface SummaryEntry {
     status: 'pass' | 'fail' | 'skip';
@@ -27,25 +120,27 @@ export interface SummaryEntry {
     location: string;
     artifactURI: string;
     error?: string;
-}
-export interface QueryLogsParams {
-    caseName?: string;
-    level?: string;
-    event?: string;
-    limit?: number;
-}
-export interface QueryLogsResult {
-    events: DigestEvent[];
-    totalCount: number;
+    testName?: string;
 }
 export declare class LaminarMcpServer {
     private reportsDir;
     private summaryFile;
+    private configFile;
     constructor(config?: McpServerConfig);
+    private validateQueryLogsInput;
+    private validateGetDigestInput;
+    private validateListFailuresInput;
     listResources(): McpResource[];
     listTools(): McpTool[];
     readResource(uri: string): Promise<string | null>;
     callTool(name: string, args: Json): Promise<Json>;
+    private run;
+    private rulesGet;
+    private rulesSet;
+    private digestGenerate;
+    private logsCaseGet;
+    private repro;
+    private extractTestName;
     private readSummary;
     private readDigest;
     private findDigestPath;
diff --git a/dist/mcp/laminar/server.d.ts.map b/dist/mcp/laminar/server.d.ts.map
index 04bf1d2..abfe7b6 100644
--- a/dist/mcp/laminar/server.d.ts.map
+++ b/dist/mcp/laminar/server.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"server.d.ts","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAgB,MAAM,2BAA2B,CAAC;AAEtE,MAAM,MAAM,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,EAAE,GAAG;IAAE,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAA;CAAE,CAAC;AAErF,MAAM,WAAW,WAAW;IAC1B,GAAG,EAAE,MAAM,CAAC;IACZ,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAED,MAAM,WAAW,OAAO;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ,CAAC;QACf,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;KACrB,CAAC;CACH;AAED,MAAM,WAAW,eAAe;IAC9B,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,WAAW,CAAC,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,WAAW,YAAY;IAC3B,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACjC,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,WAAW,eAAe;IAC9B,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,WAAW,EAAE,CAAC;IACtB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,qBAAa,gBAAgB;IAC3B,OAAO,CAAC,UAAU,CAAS;IAC3B,OAAO,CAAC,WAAW,CAAS;gBAEhB,MAAM,GAAE,eAAoB;IAKxC,aAAa,IAAI,WAAW,EAAE;IA0B9B,SAAS,IAAI,OAAO,EAAE;IAqDhB,YAAY,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAcjD,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAavD,OAAO,CAAC,WAAW;IAOnB,OAAO,CAAC,UAAU;IAQlB,OAAO,CAAC,cAAc;IAgBtB,OAAO,CAAC,eAAe;YAuBT,SAAS;IAoCvB,OAAO,CAAC,WAAW;YAiCL,SAAS;YAUT,YAAY;IAuBpB,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC;CAQ7B;AAED,wBAAsB,mBAAmB,CAAC,MAAM,CAAC,EAAE,eAAe,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAI7F"}
\ No newline at end of file
+{"version":3,"file":"server.d.ts","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/mcp/laminar/server.js b/dist/mcp/laminar/server.js
index e57ac9e..881599c 100644
--- a/dist/mcp/laminar/server.js
+++ b/dist/mcp/laminar/server.js
@@ -1,11 +1,96 @@
 import * as fs from 'node:fs';
 import * as path from 'node:path';
+import { spawnSync } from 'node:child_process';
+import { generateAllDigests, generateDigestsForCases } from '../../digest/generator.js';
+export var McpErrorCode;
+(function (McpErrorCode) {
+    McpErrorCode["INVALID_INPUT"] = "INVALID_INPUT";
+    McpErrorCode["RESOURCE_NOT_FOUND"] = "RESOURCE_NOT_FOUND";
+    McpErrorCode["TOOL_NOT_FOUND"] = "TOOL_NOT_FOUND";
+    McpErrorCode["IO_ERROR"] = "IO_ERROR";
+    McpErrorCode["PARSE_ERROR"] = "PARSE_ERROR";
+    McpErrorCode["INTERNAL_ERROR"] = "INTERNAL_ERROR";
+})(McpErrorCode || (McpErrorCode = {}));
+export class McpError extends Error {
+    code;
+    details;
+    constructor(code, message, details) {
+        super(message);
+        this.code = code;
+        this.details = details;
+        this.name = 'McpError';
+    }
+    toJson() {
+        return {
+            error: {
+                code: this.code,
+                message: this.message,
+                details: (this.details || null),
+            },
+        };
+    }
+}
 export class LaminarMcpServer {
     reportsDir;
     summaryFile;
+    configFile;
     constructor(config = {}) {
         this.reportsDir = config.reportsDir || 'reports';
         this.summaryFile = config.summaryFile || path.join(this.reportsDir, 'summary.jsonl');
+        this.configFile = config.configFile || 'laminar.config.json';
+    }
+    // ============================================================================
+    // Input Validation
+    // ============================================================================
+    validateQueryLogsInput(input) {
+        if (typeof input !== 'object' || input === null) {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'Input must be an object', { received: typeof input });
+        }
+        const params = input;
+        if (params.caseName !== undefined && typeof params.caseName !== 'string') {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'caseName must be a string', { received: typeof params.caseName });
+        }
+        if (params.level !== undefined && typeof params.level !== 'string') {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'level must be a string', { received: typeof params.level });
+        }
+        if (params.event !== undefined && typeof params.event !== 'string') {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'event must be a string', { received: typeof params.event });
+        }
+        if (params.limit !== undefined) {
+            if (typeof params.limit !== 'number') {
+                throw new McpError(McpErrorCode.INVALID_INPUT, 'limit must be a number', { received: typeof params.limit });
+            }
+            if (params.limit < 1 || params.limit > 1000) {
+                throw new McpError(McpErrorCode.INVALID_INPUT, 'limit must be between 1 and 1000', { received: params.limit });
+            }
+        }
+        return {
+            caseName: params.caseName,
+            level: params.level,
+            event: params.event,
+            limit: params.limit,
+        };
+    }
+    validateGetDigestInput(input) {
+        if (typeof input !== 'object' || input === null) {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'Input must be an object', { received: typeof input });
+        }
+        const params = input;
+        if (!params.caseName || typeof params.caseName !== 'string') {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'caseName is required and must be a string', { received: params.caseName });
+        }
+        if (params.caseName.trim() === '') {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'caseName cannot be empty', { received: params.caseName });
+        }
+        return {
+            caseName: params.caseName,
+        };
+    }
+    validateListFailuresInput(input) {
+        if (typeof input !== 'object' || input === null) {
+            throw new McpError(McpErrorCode.INVALID_INPUT, 'Input must be an object', { received: typeof input });
+        }
+        return {};
     }
     listResources() {
         const resources = [];
@@ -31,6 +116,121 @@ export class LaminarMcpServer {
     }
     listTools() {
         return [
+            {
+                name: 'run',
+                description: 'Execute tests with options for suite, case, and flake detection',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        suite: {
+                            type: 'string',
+                            description: 'Test suite/file to run (optional)',
+                        },
+                        case: {
+                            type: 'string',
+                            description: 'Specific test case name to run (optional)',
+                        },
+                        flakeDetect: {
+                            type: 'boolean',
+                            description: 'Enable flake detection mode (default: false)',
+                            default: false,
+                        },
+                        flakeRuns: {
+                            type: 'number',
+                            description: 'Number of runs for flake detection (default: 5)',
+                            default: 5,
+                        },
+                    },
+                },
+            },
+            {
+                name: 'rules.get',
+                description: 'Get current digest rules from laminar.config.json',
+                inputSchema: {
+                    type: 'object',
+                    properties: {},
+                },
+            },
+            {
+                name: 'rules.set',
+                description: 'Update digest rules in laminar.config.json',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        config: {
+                            type: 'object',
+                            description: 'Digest configuration object',
+                        },
+                    },
+                    required: ['config'],
+                },
+            },
+            {
+                name: 'digest.generate',
+                description: 'Generate digests for specific cases or all failing cases',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        cases: {
+                            type: 'array',
+                            description: 'Array of case names to generate digests for (optional, all failures if omitted)',
+                        },
+                    },
+                },
+            },
+            {
+                name: 'logs.case.get',
+                description: 'Retrieve per-case JSONL logs',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        caseName: {
+                            type: 'string',
+                            description: 'Name of the test case',
+                        },
+                    },
+                    required: ['caseName'],
+                },
+            },
+            {
+                name: 'query',
+                description: 'Query logs with filters (alias for query_logs)',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        caseName: {
+                            type: 'string',
+                            description: 'Filter by test case name',
+                        },
+                        level: {
+                            type: 'string',
+                            description: 'Filter by log level (error, warn, info, debug)',
+                        },
+                        event: {
+                            type: 'string',
+                            description: 'Filter by event type',
+                        },
+                        limit: {
+                            type: 'number',
+                            description: 'Maximum number of events to return',
+                            default: 100,
+                        },
+                    },
+                },
+            },
+            {
+                name: 'repro',
+                description: 'Get reproduction commands for failures',
+                inputSchema: {
+                    type: 'object',
+                    properties: {
+                        caseName: {
+                            type: 'string',
+                            description: 'Specific case name to get repro command for (optional)',
+                        },
+                    },
+                },
+            },
             {
                 name: 'query_logs',
                 description: 'Query test event logs with filters',
@@ -93,16 +293,155 @@ export class LaminarMcpServer {
         return null;
     }
     async callTool(name, args) {
-        switch (name) {
-            case 'query_logs':
-                return this.queryLogs(args);
-            case 'get_digest':
-                return this.getDigest(args.caseName);
-            case 'list_failures':
-                return this.listFailures();
-            default:
-                throw new Error(`Unknown tool: ${name}`);
+        try {
+            switch (name) {
+                case 'run':
+                    return (await this.run(args));
+                case 'rules.get':
+                    return (await this.rulesGet(args));
+                case 'rules.set':
+                    return (await this.rulesSet(args));
+                case 'digest.generate':
+                    return (await this.digestGenerate(args));
+                case 'logs.case.get':
+                    return (await this.logsCaseGet(args));
+                case 'query':
+                case 'query_logs': {
+                    const input = this.validateQueryLogsInput(args);
+                    const result = await this.queryLogs(input);
+                    return result;
+                }
+                case 'repro':
+                    return (await this.repro(args));
+                case 'get_digest': {
+                    const input = this.validateGetDigestInput(args);
+                    const result = await this.getDigest(input.caseName);
+                    return { digest: result };
+                }
+                case 'list_failures': {
+                    this.validateListFailuresInput(args);
+                    const result = await this.listFailures();
+                    return { failures: result };
+                }
+                default:
+                    throw new McpError(McpErrorCode.TOOL_NOT_FOUND, `Unknown tool: ${name}`, { tool: name });
+            }
+        }
+        catch (error) {
+            if (error instanceof McpError) {
+                throw error;
+            }
+            throw new McpError(McpErrorCode.INTERNAL_ERROR, `Tool execution failed: ${error instanceof Error ? error.message : String(error)}`, { tool: name });
+        }
+    }
+    async run(params) {
+        const { suite, case: caseName, flakeDetect = false, flakeRuns = 5 } = params;
+        const args = ['run', 'lam', '--'];
+        if (flakeDetect) {
+            args.push('run', '--lane', 'ci', '--flake-detect', flakeRuns.toString());
+        }
+        else {
+            args.push('run', '--lane', 'auto');
+            if (suite) {
+                args.push('--filter', suite);
+            }
+            else if (caseName) {
+                args.push('--filter', caseName);
+            }
+        }
+        const result = spawnSync('npm', args, {
+            stdio: 'pipe',
+            encoding: 'utf-8',
+        });
+        return {
+            exitCode: result.status || 0,
+            message: result.status === 0 ? 'Tests completed successfully' : 'Tests failed',
+        };
+    }
+    async rulesGet(params) {
+        if (fs.existsSync(this.configFile)) {
+            const content = fs.readFileSync(this.configFile, 'utf-8');
+            const config = JSON.parse(content);
+            return { config };
+        }
+        return { config: {} };
+    }
+    async rulesSet(params) {
+        try {
+            const content = JSON.stringify(params.config, null, 2);
+            fs.writeFileSync(this.configFile, content);
+            return {
+                success: true,
+                message: `Updated ${this.configFile}`,
+            };
         }
+        catch (error) {
+            return {
+                success: false,
+                message: error instanceof Error ? error.message : 'Failed to update config',
+            };
+        }
+    }
+    async digestGenerate(params) {
+        try {
+            let count;
+            if (params.cases && params.cases.length > 0) {
+                count = await generateDigestsForCases(params.cases, this.configFile);
+            }
+            else {
+                count = await generateAllDigests(this.configFile);
+            }
+            return {
+                count,
+                message: count === 0 ? 'No failing test cases found' : `Generated ${count} digest(s)`,
+            };
+        }
+        catch (error) {
+            return {
+                count: 0,
+                message: error instanceof Error ? error.message : 'Failed to generate digests',
+            };
+        }
+    }
+    async logsCaseGet(params) {
+        const logPath = this.findLogPath(params.caseName);
+        if (!logPath || !fs.existsSync(logPath)) {
+            return { logs: '' };
+        }
+        const logs = fs.readFileSync(logPath, 'utf-8');
+        return { logs };
+    }
+    async repro(params) {
+        if (!fs.existsSync(this.summaryFile)) {
+            return { commands: [] };
+        }
+        const content = fs.readFileSync(this.summaryFile, 'utf-8');
+        const lines = content.trim().split('\n').filter(Boolean);
+        const entries = lines.map(line => JSON.parse(line));
+        let failures = entries.filter(entry => entry.status === 'fail');
+        if (params.caseName) {
+            failures = failures.filter(f => {
+                const caseName = f.artifactURI ? path.basename(f.artifactURI, '.jsonl') : '';
+                return caseName === params.caseName;
+            });
+        }
+        const commands = failures.map(failure => {
+            const testFile = failure.location.split(':')[0];
+            const testName = this.extractTestName(failure.artifactURI);
+            const artifactPath = failure.artifactURI;
+            return {
+                testName,
+                testFile,
+                vitestCommand: `vitest run --reporter=verbose --pool=threads "${testFile}" -t "${testName}"`,
+                logCommand: `npm run logq -- ${artifactPath}`,
+            };
+        });
+        return { commands };
+    }
+    extractTestName(artifactURI) {
+        const parts = artifactURI.split('/');
+        const filename = parts[parts.length - 1];
+        return filename.replace('.jsonl', '').replace(/_/g, ' ');
     }
     readSummary() {
         if (!fs.existsSync(this.summaryFile)) {
@@ -244,6 +583,7 @@ export class LaminarMcpServer {
         console.log('Laminar MCP Server started');
         console.log(`Reports directory: ${this.reportsDir}`);
         console.log(`Summary file: ${this.summaryFile}`);
+        console.log(`Config file: ${this.configFile}`);
         console.log('');
         console.log('Available resources:', this.listResources().length);
         console.log('Available tools:', this.listTools().length);
diff --git a/dist/mcp/laminar/server.js.map b/dist/mcp/laminar/server.js.map
index a832188..a30130d 100644
--- a/dist/mcp/laminar/server.js.map
+++ b/dist/mcp/laminar/server.js.map
@@ -1 +1 @@
-{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/patches/DIFF_T2701_mcp-tools.patch b/patches/DIFF_T2701_mcp-tools.patch
new file mode 100644
index 0000000..74b909a
--- /dev/null
+++ b/patches/DIFF_T2701_mcp-tools.patch
@@ -0,0 +1,1046 @@
+diff --git a/README.md b/README.md
+index 3ea655e..7226606 100644
+--- a/README.md
++++ b/README.md
+@@ -196,6 +196,9 @@ The project includes an MCP (Model Context Protocol) server for exposing Laminar
+ - **Resources:** Exposes `summary.jsonl` and digest files as MCP resources
+ - **Tools:** Provides `query_logs`, `get_digest`, and `list_failures` tools
+ - **Protocol:** Standard MCP protocol for AI agent integration
++- **JSON Contracts:** Fully type-safe input/output schemas with validation
++- **Error Model:** Structured errors with codes, messages, and context
++- **Idempotence:** All operations are safe to retry
+ 
+ **Usage:**
+ 
+@@ -223,8 +226,38 @@ const failures = await server.callTool('list_failures', {});
+ 
+ **Tools:**
+ - `query_logs` - Query test event logs with filters (caseName, level, event, limit)
++  - Input: `{ caseName?: string, level?: string, event?: string, limit?: number }`
++  - Output: `{ events: DigestEvent[], totalCount: number }`
++  - Idempotent: Returns same results for same inputs, empty array for missing files
+ - `get_digest` - Get digest for a specific failed test case
++  - Input: `{ caseName: string }` (required)
++  - Output: `{ digest: DigestOutput | null }`
++  - Idempotent: Returns null for missing digests
+ - `list_failures` - List all failed test cases from summary
++  - Input: `{}` (no parameters)
++  - Output: `{ failures: SummaryEntry[] }`
++  - Idempotent: Returns empty array if summary doesn't exist
++
++**Error Handling:**
++
++All operations use structured error codes:
++- `INVALID_INPUT` - Invalid input parameters (with validation details)
++- `RESOURCE_NOT_FOUND` - Resource URI not found
++- `TOOL_NOT_FOUND` - Tool name not recognized
++- `IO_ERROR` - File system operation failed
++- `PARSE_ERROR` - JSON parsing failed
++- `INTERNAL_ERROR` - Unexpected internal error
++
++Error format:
++```json
++{
++  "error": {
++    "code": "INVALID_INPUT",
++    "message": "caseName is required and must be a string",
++    "details": { "received": null }
++  }
++}
++```
+ 
+ ### Cross-Language Test Ingest
+ 
+diff --git a/dist/mcp/laminar/server.d.ts b/dist/mcp/laminar/server.d.ts
+index 55b2299..a04a051 100644
+--- a/dist/mcp/laminar/server.d.ts
++++ b/dist/mcp/laminar/server.d.ts
+@@ -1,7 +1,35 @@
+-import { DigestEvent } from '../../digest/generator.js';
++import { DigestEvent, DigestOutput, DigestConfig } from '../../digest/generator.js';
+ export type Json = null | boolean | number | string | Json[] | {
+     [k: string]: Json;
+ };
++export declare enum McpErrorCode {
++    INVALID_INPUT = "INVALID_INPUT",
++    RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
++    TOOL_NOT_FOUND = "TOOL_NOT_FOUND",
++    IO_ERROR = "IO_ERROR",
++    PARSE_ERROR = "PARSE_ERROR",
++    INTERNAL_ERROR = "INTERNAL_ERROR"
++}
++export declare class McpError extends Error {
++    code: McpErrorCode;
++    details?: Record<string, unknown> | undefined;
++    constructor(code: McpErrorCode, message: string, details?: Record<string, unknown> | undefined);
++    toJson(): Json;
++}
++export interface JsonSchema {
++    type: string;
++    properties?: Record<string, JsonSchemaProperty>;
++    required?: string[];
++    additionalProperties?: boolean;
++}
++export interface JsonSchemaProperty {
++    type: string;
++    description?: string;
++    default?: unknown;
++    enum?: string[];
++    minimum?: number;
++    maximum?: number;
++}
+ export interface McpResource {
+     uri: string;
+     name: string;
+@@ -11,15 +39,80 @@ export interface McpResource {
+ export interface McpTool {
+     name: string;
+     description: string;
+-    inputSchema: {
+-        type: 'object';
+-        properties: Record<string, unknown>;
+-        required?: string[];
+-    };
++    inputSchema: JsonSchema;
++}
++export interface QueryLogsInput {
++    caseName?: string;
++    level?: string;
++    event?: string;
++    limit?: number;
++}
++export interface QueryLogsOutput {
++    events: DigestEvent[];
++    totalCount: number;
++}
++export interface GetDigestInput {
++    caseName: string;
++}
++export interface GetDigestOutput {
++    digest: DigestOutput | null;
++}
++export interface ListFailuresInput {
++}
++export interface ListFailuresOutput {
++    failures: SummaryEntry[];
++}
++export interface RunInput {
++    suite?: string;
++    case?: string;
++    flakeDetect?: boolean;
++    flakeRuns?: number;
++}
++export interface RunOutput {
++    exitCode: number;
++    message: string;
++}
++export interface RulesGetInput {
++}
++export interface RulesGetOutput {
++    config: DigestConfig;
++}
++export interface RulesSetInput {
++    config: DigestConfig;
++}
++export interface RulesSetOutput {
++    success: boolean;
++    message: string;
++}
++export interface DigestGenerateInput {
++    cases?: string[];
++}
++export interface DigestGenerateOutput {
++    count: number;
++    message: string;
++}
++export interface LogsCaseGetInput {
++    caseName: string;
++}
++export interface LogsCaseGetOutput {
++    logs: string;
++}
++export interface ReproInput {
++    caseName?: string;
++}
++export interface ReproOutput {
++    commands: ReproCommand[];
++}
++export interface ReproCommand {
++    testName: string;
++    testFile: string;
++    vitestCommand: string;
++    logCommand: string;
+ }
+ export interface McpServerConfig {
+     reportsDir?: string;
+     summaryFile?: string;
++    configFile?: string;
+ }
+ export interface SummaryEntry {
+     status: 'pass' | 'fail' | 'skip';
+@@ -27,25 +120,24 @@ export interface SummaryEntry {
+     location: string;
+     artifactURI: string;
+     error?: string;
+-}
+-export interface QueryLogsParams {
+-    caseName?: string;
+-    level?: string;
+-    event?: string;
+-    limit?: number;
+-}
+-export interface QueryLogsResult {
+-    events: DigestEvent[];
+-    totalCount: number;
++    testName?: string;
+ }
+ export declare class LaminarMcpServer {
+     private reportsDir;
+     private summaryFile;
++    private configFile;
+     constructor(config?: McpServerConfig);
+     listResources(): McpResource[];
+     listTools(): McpTool[];
+     readResource(uri: string): Promise<string | null>;
+     callTool(name: string, args: Json): Promise<Json>;
++    private run;
++    private rulesGet;
++    private rulesSet;
++    private digestGenerate;
++    private logsCaseGet;
++    private repro;
++    private extractTestName;
+     private readSummary;
+     private readDigest;
+     private findDigestPath;
+diff --git a/dist/mcp/laminar/server.d.ts.map b/dist/mcp/laminar/server.d.ts.map
+index 04bf1d2..eb8f936 100644
+--- a/dist/mcp/laminar/server.d.ts.map
++++ b/dist/mcp/laminar/server.d.ts.map
+@@ -1 +1 @@
+-{"version":3,"file":"server.d.ts","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAgB,MAAM,2BAA2B,CAAC;AAEtE,MAAM,MAAM,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM,GAAG,IAAI,EAAE,GAAG;IAAE,CAAC,CAAC,EAAE,MAAM,GAAG,IAAI,CAAA;CAAE,CAAC;AAErF,MAAM,WAAW,WAAW;IAC1B,GAAG,EAAE,MAAM,CAAC;IACZ,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,CAAC,EAAE,MAAM,CAAC;IACrB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAED,MAAM,WAAW,OAAO;IACtB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ,CAAC;QACf,UAAU,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACpC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC;KACrB,CAAC;CACH;AAED,MAAM,WAAW,eAAe;IAC9B,UAAU,CAAC,EAAE,MAAM,CAAC;IACpB,WAAW,CAAC,EAAE,MAAM,CAAC;CACtB;AAED,MAAM,WAAW,YAAY;IAC3B,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACjC,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,WAAW,eAAe;IAC9B,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED,MAAM,WAAW,eAAe;IAC9B,MAAM,EAAE,WAAW,EAAE,CAAC;IACtB,UAAU,EAAE,MAAM,CAAC;CACpB;AAED,qBAAa,gBAAgB;IAC3B,OAAO,CAAC,UAAU,CAAS;IAC3B,OAAO,CAAC,WAAW,CAAS;gBAEhB,MAAM,GAAE,eAAoB;IAKxC,aAAa,IAAI,WAAW,EAAE;IA0B9B,SAAS,IAAI,OAAO,EAAE;IAqDhB,YAAY,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;IAcjD,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAavD,OAAO,CAAC,WAAW;IAOnB,OAAO,CAAC,UAAU;IAQlB,OAAO,CAAC,cAAc;IAgBtB,OAAO,CAAC,eAAe;YAuBT,SAAS;IAoCvB,OAAO,CAAC,WAAW;YAiCL,SAAS;YAUT,YAAY;IAuBpB,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC;CAQ7B;AAED,wBAAsB,mBAAmB,CAAC,MAAM,CAAC,EAAE,eAAe,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAI7F"}
+\ No newline at end of file
++{"version":3,"file":"server.d.ts","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
+\ No newline at end of file
+diff --git a/dist/mcp/laminar/server.js b/dist/mcp/laminar/server.js
+index e57ac9e..2daceba 100644
+--- a/dist/mcp/laminar/server.js
++++ b/dist/mcp/laminar/server.js
+@@ -1,11 +1,43 @@
+ import * as fs from 'node:fs';
+ import * as path from 'node:path';
++import { spawnSync } from 'node:child_process';
++import { generateAllDigests, generateDigestsForCases } from '../../digest/generator.js';
++export var McpErrorCode;
++(function (McpErrorCode) {
++    McpErrorCode["INVALID_INPUT"] = "INVALID_INPUT";
++    McpErrorCode["RESOURCE_NOT_FOUND"] = "RESOURCE_NOT_FOUND";
++    McpErrorCode["TOOL_NOT_FOUND"] = "TOOL_NOT_FOUND";
++    McpErrorCode["IO_ERROR"] = "IO_ERROR";
++    McpErrorCode["PARSE_ERROR"] = "PARSE_ERROR";
++    McpErrorCode["INTERNAL_ERROR"] = "INTERNAL_ERROR";
++})(McpErrorCode || (McpErrorCode = {}));
++export class McpError extends Error {
++    code;
++    details;
++    constructor(code, message, details) {
++        super(message);
++        this.code = code;
++        this.details = details;
++        this.name = 'McpError';
++    }
++    toJson() {
++        return {
++            error: {
++                code: this.code,
++                message: this.message,
++                details: (this.details || null),
++            },
++        };
++    }
++}
+ export class LaminarMcpServer {
+     reportsDir;
+     summaryFile;
++    configFile;
+     constructor(config = {}) {
+         this.reportsDir = config.reportsDir || 'reports';
+         this.summaryFile = config.summaryFile || path.join(this.reportsDir, 'summary.jsonl');
++        this.configFile = config.configFile || 'laminar.config.json';
+     }
+     listResources() {
+         const resources = [];
+@@ -31,6 +63,121 @@ export class LaminarMcpServer {
+     }
+     listTools() {
+         return [
++            {
++                name: 'run',
++                description: 'Execute tests with options for suite, case, and flake detection',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        suite: {
++                            type: 'string',
++                            description: 'Test suite/file to run (optional)',
++                        },
++                        case: {
++                            type: 'string',
++                            description: 'Specific test case name to run (optional)',
++                        },
++                        flakeDetect: {
++                            type: 'boolean',
++                            description: 'Enable flake detection mode (default: false)',
++                            default: false,
++                        },
++                        flakeRuns: {
++                            type: 'number',
++                            description: 'Number of runs for flake detection (default: 5)',
++                            default: 5,
++                        },
++                    },
++                },
++            },
++            {
++                name: 'rules.get',
++                description: 'Get current digest rules from laminar.config.json',
++                inputSchema: {
++                    type: 'object',
++                    properties: {},
++                },
++            },
++            {
++                name: 'rules.set',
++                description: 'Update digest rules in laminar.config.json',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        config: {
++                            type: 'object',
++                            description: 'Digest configuration object',
++                        },
++                    },
++                    required: ['config'],
++                },
++            },
++            {
++                name: 'digest.generate',
++                description: 'Generate digests for specific cases or all failing cases',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        cases: {
++                            type: 'array',
++                            description: 'Array of case names to generate digests for (optional, all failures if omitted)',
++                        },
++                    },
++                },
++            },
++            {
++                name: 'logs.case.get',
++                description: 'Retrieve per-case JSONL logs',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        caseName: {
++                            type: 'string',
++                            description: 'Name of the test case',
++                        },
++                    },
++                    required: ['caseName'],
++                },
++            },
++            {
++                name: 'query',
++                description: 'Query logs with filters (alias for query_logs)',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        caseName: {
++                            type: 'string',
++                            description: 'Filter by test case name',
++                        },
++                        level: {
++                            type: 'string',
++                            description: 'Filter by log level (error, warn, info, debug)',
++                        },
++                        event: {
++                            type: 'string',
++                            description: 'Filter by event type',
++                        },
++                        limit: {
++                            type: 'number',
++                            description: 'Maximum number of events to return',
++                            default: 100,
++                        },
++                    },
++                },
++            },
++            {
++                name: 'repro',
++                description: 'Get reproduction commands for failures',
++                inputSchema: {
++                    type: 'object',
++                    properties: {
++                        caseName: {
++                            type: 'string',
++                            description: 'Specific case name to get repro command for (optional)',
++                        },
++                    },
++                },
++            },
+             {
+                 name: 'query_logs',
+                 description: 'Query test event logs with filters',
+@@ -94,8 +241,21 @@ export class LaminarMcpServer {
+     }
+     async callTool(name, args) {
+         switch (name) {
++            case 'run':
++                return this.run(args);
++            case 'rules.get':
++                return this.rulesGet(args);
++            case 'rules.set':
++                return this.rulesSet(args);
++            case 'digest.generate':
++                return this.digestGenerate(args);
++            case 'logs.case.get':
++                return this.logsCaseGet(args);
++            case 'query':
+             case 'query_logs':
+                 return this.queryLogs(args);
++            case 'repro':
++                return this.repro(args);
+             case 'get_digest':
+                 return this.getDigest(args.caseName);
+             case 'list_failures':
+@@ -104,6 +264,115 @@ export class LaminarMcpServer {
+                 throw new Error(`Unknown tool: ${name}`);
+         }
+     }
++    async run(params) {
++        const { suite, case: caseName, flakeDetect = false, flakeRuns = 5 } = params;
++        const args = ['run', 'lam', '--'];
++        if (flakeDetect) {
++            args.push('run', '--lane', 'ci', '--flake-detect', flakeRuns.toString());
++        }
++        else {
++            args.push('run', '--lane', 'auto');
++            if (suite) {
++                args.push('--filter', suite);
++            }
++            else if (caseName) {
++                args.push('--filter', caseName);
++            }
++        }
++        const result = spawnSync('npm', args, {
++            stdio: 'pipe',
++            encoding: 'utf-8',
++        });
++        return {
++            exitCode: result.status || 0,
++            message: result.status === 0 ? 'Tests completed successfully' : 'Tests failed',
++        };
++    }
++    async rulesGet(params) {
++        if (fs.existsSync(this.configFile)) {
++            const content = fs.readFileSync(this.configFile, 'utf-8');
++            const config = JSON.parse(content);
++            return { config };
++        }
++        return { config: {} };
++    }
++    async rulesSet(params) {
++        try {
++            const content = JSON.stringify(params.config, null, 2);
++            fs.writeFileSync(this.configFile, content);
++            return {
++                success: true,
++                message: `Updated ${this.configFile}`,
++            };
++        }
++        catch (error) {
++            return {
++                success: false,
++                message: error instanceof Error ? error.message : 'Failed to update config',
++            };
++        }
++    }
++    async digestGenerate(params) {
++        try {
++            let count;
++            if (params.cases && params.cases.length > 0) {
++                count = await generateDigestsForCases(params.cases, this.configFile);
++            }
++            else {
++                count = await generateAllDigests(this.configFile);
++            }
++            return {
++                count,
++                message: count === 0 ? 'No failing test cases found' : `Generated ${count} digest(s)`,
++            };
++        }
++        catch (error) {
++            return {
++                count: 0,
++                message: error instanceof Error ? error.message : 'Failed to generate digests',
++            };
++        }
++    }
++    async logsCaseGet(params) {
++        const logPath = this.findLogPath(params.caseName);
++        if (!logPath || !fs.existsSync(logPath)) {
++            return { logs: '' };
++        }
++        const logs = fs.readFileSync(logPath, 'utf-8');
++        return { logs };
++    }
++    async repro(params) {
++        if (!fs.existsSync(this.summaryFile)) {
++            return { commands: [] };
++        }
++        const content = fs.readFileSync(this.summaryFile, 'utf-8');
++        const lines = content.trim().split('\n').filter(Boolean);
++        const entries = lines.map(line => JSON.parse(line));
++        let failures = entries.filter(entry => entry.status === 'fail');
++        if (params.caseName) {
++            failures = failures.filter(f => {
++                const caseName = f.artifactURI ? path.basename(f.artifactURI, '.jsonl') : '';
++                return caseName === params.caseName;
++            });
++        }
++        const commands = failures.map(failure => {
++            const testFile = failure.location.split(':')[0];
++            const testName = this.extractTestName(failure.artifactURI);
++            const artifactPath = failure.artifactURI;
++            return {
++                testName,
++                testFile,
++                vitestCommand: `vitest run --reporter=verbose --pool=threads "${testFile}" -t "${testName}"`,
++                logCommand: `npm run logq -- ${artifactPath}`,
++            };
++        });
++        return { commands };
++    }
++    extractTestName(artifactURI) {
++        const parts = artifactURI.split('/');
++        const filename = parts[parts.length - 1];
++        return filename.replace('.jsonl', '').replace(/_/g, ' ');
++    }
+     readSummary() {
+         if (!fs.existsSync(this.summaryFile)) {
+             return null;
+@@ -244,6 +513,7 @@ export class LaminarMcpServer {
+         console.log('Laminar MCP Server started');
+         console.log(`Reports directory: ${this.reportsDir}`);
+         console.log(`Summary file: ${this.summaryFile}`);
++        console.log(`Config file: ${this.configFile}`);
+         console.log('');
+         console.log('Available resources:', this.listResources().length);
+         console.log('Available tools:', this.listTools().length);
+diff --git a/dist/mcp/laminar/server.js.map b/dist/mcp/laminar/server.js.map
+index a832188..6349385 100644
+--- a/dist/mcp/laminar/server.js.map
++++ b/dist/mcp/laminar/server.js.map
+@@ -1 +1 @@
+-{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
+\ No newline at end of file
++{"version":3,"file":"server.js","sourceRoot":"","sources":["../../../src/mcp/laminar/server.ts"],"names":[],"mappings":"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"}
+\ No newline at end of file
+diff --git a/src/mcp/laminar/server.ts b/src/mcp/laminar/server.ts
+index 2338216..5e2f6b8 100644
+--- a/src/mcp/laminar/server.ts
++++ b/src/mcp/laminar/server.ts
+@@ -1,9 +1,56 @@
+ import * as fs from 'node:fs';
+ import * as path from 'node:path';
+-import { DigestEvent, DigestOutput } from '../../digest/generator.js';
++import { spawnSync } from 'node:child_process';
++import { DigestEvent, DigestOutput, DigestConfig, DigestGenerator, generateAllDigests, generateDigestsForCases } from '../../digest/generator.js';
+ 
+ export type Json = null | boolean | number | string | Json[] | { [k: string]: Json };
+ 
++export enum McpErrorCode {
++  INVALID_INPUT = 'INVALID_INPUT',
++  RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',
++  TOOL_NOT_FOUND = 'TOOL_NOT_FOUND',
++  IO_ERROR = 'IO_ERROR',
++  PARSE_ERROR = 'PARSE_ERROR',
++  INTERNAL_ERROR = 'INTERNAL_ERROR',
++}
++
++export class McpError extends Error {
++  constructor(
++    public code: McpErrorCode,
++    message: string,
++    public details?: Record<string, unknown>
++  ) {
++    super(message);
++    this.name = 'McpError';
++  }
++
++  toJson(): Json {
++    return {
++      error: {
++        code: this.code as string,
++        message: this.message,
++        details: (this.details || null) as Json,
++      },
++    } as Json;
++  }
++}
++
++export interface JsonSchema {
++  type: string;
++  properties?: Record<string, JsonSchemaProperty>;
++  required?: string[];
++  additionalProperties?: boolean;
++}
++
++export interface JsonSchemaProperty {
++  type: string;
++  description?: string;
++  default?: unknown;
++  enum?: string[];
++  minimum?: number;
++  maximum?: number;
++}
++
+ export interface McpResource {
+   uri: string;
+   name: string;
+@@ -14,16 +61,102 @@ export interface McpResource {
+ export interface McpTool {
+   name: string;
+   description: string;
+-  inputSchema: {
+-    type: 'object';
+-    properties: Record<string, unknown>;
+-    required?: string[];
+-  };
++  inputSchema: JsonSchema;
++}
++
++export interface QueryLogsInput {
++  caseName?: string;
++  level?: string;
++  event?: string;
++  limit?: number;
++}
++
++export interface QueryLogsOutput {
++  events: DigestEvent[];
++  totalCount: number;
++}
++
++export interface GetDigestInput {
++  caseName: string;
++}
++
++export interface GetDigestOutput {
++  digest: DigestOutput | null;
++}
++
++export interface ListFailuresInput {
++  // No input parameters
++}
++
++export interface ListFailuresOutput {
++  failures: SummaryEntry[];
++}
++
++export interface RunInput {
++  suite?: string;
++  case?: string;
++  flakeDetect?: boolean;
++  flakeRuns?: number;
++}
++
++export interface RunOutput {
++  exitCode: number;
++  message: string;
++}
++
++export interface RulesGetInput {
++  // No input parameters
++}
++
++export interface RulesGetOutput {
++  config: DigestConfig;
++}
++
++export interface RulesSetInput {
++  config: DigestConfig;
++}
++
++export interface RulesSetOutput {
++  success: boolean;
++  message: string;
++}
++
++export interface DigestGenerateInput {
++  cases?: string[];
++}
++
++export interface DigestGenerateOutput {
++  count: number;
++  message: string;
++}
++
++export interface LogsCaseGetInput {
++  caseName: string;
++}
++
++export interface LogsCaseGetOutput {
++  logs: string;
++}
++
++export interface ReproInput {
++  caseName?: string;
++}
++
++export interface ReproOutput {
++  commands: ReproCommand[];
++}
++
++export interface ReproCommand {
++  testName: string;
++  testFile: string;
++  vitestCommand: string;
++  logCommand: string;
+ }
+ 
+ export interface McpServerConfig {
+   reportsDir?: string;
+   summaryFile?: string;
++  configFile?: string;
+ }
+ 
+ export interface SummaryEntry {
+@@ -32,27 +165,18 @@ export interface SummaryEntry {
+   location: string;
+   artifactURI: string;
+   error?: string;
+-}
+-
+-export interface QueryLogsParams {
+-  caseName?: string;
+-  level?: string;
+-  event?: string;
+-  limit?: number;
+-}
+-
+-export interface QueryLogsResult {
+-  events: DigestEvent[];
+-  totalCount: number;
++  testName?: string;
+ }
+ 
+ export class LaminarMcpServer {
+   private reportsDir: string;
+   private summaryFile: string;
++  private configFile: string;
+ 
+   constructor(config: McpServerConfig = {}) {
+     this.reportsDir = config.reportsDir || 'reports';
+     this.summaryFile = config.summaryFile || path.join(this.reportsDir, 'summary.jsonl');
++    this.configFile = config.configFile || 'laminar.config.json';
+   }
+ 
+   listResources(): McpResource[] {
+@@ -83,6 +207,121 @@ export class LaminarMcpServer {
+ 
+   listTools(): McpTool[] {
+     return [
++      {
++        name: 'run',
++        description: 'Execute tests with options for suite, case, and flake detection',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            suite: {
++              type: 'string',
++              description: 'Test suite/file to run (optional)',
++            },
++            case: {
++              type: 'string',
++              description: 'Specific test case name to run (optional)',
++            },
++            flakeDetect: {
++              type: 'boolean',
++              description: 'Enable flake detection mode (default: false)',
++              default: false,
++            },
++            flakeRuns: {
++              type: 'number',
++              description: 'Number of runs for flake detection (default: 5)',
++              default: 5,
++            },
++          },
++        },
++      },
++      {
++        name: 'rules.get',
++        description: 'Get current digest rules from laminar.config.json',
++        inputSchema: {
++          type: 'object',
++          properties: {},
++        },
++      },
++      {
++        name: 'rules.set',
++        description: 'Update digest rules in laminar.config.json',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            config: {
++              type: 'object',
++              description: 'Digest configuration object',
++            },
++          },
++          required: ['config'],
++        },
++      },
++      {
++        name: 'digest.generate',
++        description: 'Generate digests for specific cases or all failing cases',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            cases: {
++              type: 'array',
++              description: 'Array of case names to generate digests for (optional, all failures if omitted)',
++            },
++          },
++        },
++      },
++      {
++        name: 'logs.case.get',
++        description: 'Retrieve per-case JSONL logs',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            caseName: {
++              type: 'string',
++              description: 'Name of the test case',
++            },
++          },
++          required: ['caseName'],
++        },
++      },
++      {
++        name: 'query',
++        description: 'Query logs with filters (alias for query_logs)',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            caseName: {
++              type: 'string',
++              description: 'Filter by test case name',
++            },
++            level: {
++              type: 'string',
++              description: 'Filter by log level (error, warn, info, debug)',
++            },
++            event: {
++              type: 'string',
++              description: 'Filter by event type',
++            },
++            limit: {
++              type: 'number',
++              description: 'Maximum number of events to return',
++              default: 100,
++            },
++          },
++        },
++      },
++      {
++        name: 'repro',
++        description: 'Get reproduction commands for failures',
++        inputSchema: {
++          type: 'object',
++          properties: {
++            caseName: {
++              type: 'string',
++              description: 'Specific case name to get repro command for (optional)',
++            },
++          },
++        },
++      },
+       {
+         name: 'query_logs',
+         description: 'Query test event logs with filters',
+@@ -150,8 +389,21 @@ export class LaminarMcpServer {
+ 
+   async callTool(name: string, args: Json): Promise<Json> {
+     switch (name) {
++      case 'run':
++        return this.run(args as RunInput) as unknown as Json;
++      case 'rules.get':
++        return this.rulesGet(args as RulesGetInput) as unknown as Json;
++      case 'rules.set':
++        return this.rulesSet(args as unknown as RulesSetInput) as unknown as Json;
++      case 'digest.generate':
++        return this.digestGenerate(args as unknown as DigestGenerateInput) as unknown as Json;
++      case 'logs.case.get':
++        return this.logsCaseGet(args as unknown as LogsCaseGetInput) as unknown as Json;
++      case 'query':
+       case 'query_logs':
+-        return this.queryLogs(args as QueryLogsParams) as unknown as Json;
++        return this.queryLogs(args as QueryLogsInput) as unknown as Json;
++      case 'repro':
++        return this.repro(args as ReproInput) as unknown as Json;
+       case 'get_digest':
+         return this.getDigest((args as { caseName: string }).caseName) as unknown as Json;
+       case 'list_failures':
+@@ -161,6 +413,133 @@ export class LaminarMcpServer {
+     }
+   }
+ 
++  private async run(params: RunInput): Promise<RunOutput> {
++    const { suite, case: caseName, flakeDetect = false, flakeRuns = 5 } = params;
++
++    const args = ['run', 'lam', '--'];
++    
++    if (flakeDetect) {
++      args.push('run', '--lane', 'ci', '--flake-detect', flakeRuns.toString());
++    } else {
++      args.push('run', '--lane', 'auto');
++      
++      if (suite) {
++        args.push('--filter', suite);
++      } else if (caseName) {
++        args.push('--filter', caseName);
++      }
++    }
++
++    const result = spawnSync('npm', args, {
++      stdio: 'pipe',
++      encoding: 'utf-8',
++    });
++
++    return {
++      exitCode: result.status || 0,
++      message: result.status === 0 ? 'Tests completed successfully' : 'Tests failed',
++    };
++  }
++
++  private async rulesGet(params: RulesGetInput): Promise<RulesGetOutput> {
++    if (fs.existsSync(this.configFile)) {
++      const content = fs.readFileSync(this.configFile, 'utf-8');
++      const config = JSON.parse(content) as DigestConfig;
++      return { config };
++    }
++    
++    return { config: {} };
++  }
++
++  private async rulesSet(params: RulesSetInput): Promise<RulesSetOutput> {
++    try {
++      const content = JSON.stringify(params.config, null, 2);
++      fs.writeFileSync(this.configFile, content);
++      return {
++        success: true,
++        message: `Updated ${this.configFile}`,
++      };
++    } catch (error) {
++      return {
++        success: false,
++        message: error instanceof Error ? error.message : 'Failed to update config',
++      };
++    }
++  }
++
++  private async digestGenerate(params: DigestGenerateInput): Promise<DigestGenerateOutput> {
++    try {
++      let count: number;
++      
++      if (params.cases && params.cases.length > 0) {
++        count = await generateDigestsForCases(params.cases as string[], this.configFile);
++      } else {
++        count = await generateAllDigests(this.configFile);
++      }
++      
++      return {
++        count,
++        message: count === 0 ? 'No failing test cases found' : `Generated ${count} digest(s)`,
++      };
++    } catch (error) {
++      return {
++        count: 0,
++        message: error instanceof Error ? error.message : 'Failed to generate digests',
++      };
++    }
++  }
++
++  private async logsCaseGet(params: LogsCaseGetInput): Promise<LogsCaseGetOutput> {
++    const logPath = this.findLogPath(params.caseName);
++    
++    if (!logPath || !fs.existsSync(logPath)) {
++      return { logs: '' };
++    }
++    
++    const logs = fs.readFileSync(logPath, 'utf-8');
++    return { logs };
++  }
++
++  private async repro(params: ReproInput): Promise<ReproOutput> {
++    if (!fs.existsSync(this.summaryFile)) {
++      return { commands: [] };
++    }
++
++    const content = fs.readFileSync(this.summaryFile, 'utf-8');
++    const lines = content.trim().split('\n').filter(Boolean);
++    const entries: SummaryEntry[] = lines.map(line => JSON.parse(line));
++
++    let failures = entries.filter(entry => entry.status === 'fail');
++    
++    if (params.caseName) {
++      failures = failures.filter(f => {
++        const caseName = f.artifactURI ? path.basename(f.artifactURI, '.jsonl') : '';
++        return caseName === params.caseName;
++      });
++    }
++
++    const commands: ReproCommand[] = failures.map(failure => {
++      const testFile = failure.location.split(':')[0];
++      const testName = this.extractTestName(failure.artifactURI);
++      const artifactPath = failure.artifactURI;
++
++      return {
++        testName,
++        testFile,
++        vitestCommand: `vitest run --reporter=verbose --pool=threads "${testFile}" -t "${testName}"`,
++        logCommand: `npm run logq -- ${artifactPath}`,
++      };
++    });
++
++    return { commands };
++  }
++
++  private extractTestName(artifactURI: string): string {
++    const parts = artifactURI.split('/');
++    const filename = parts[parts.length - 1];
++    return filename.replace('.jsonl', '').replace(/_/g, ' ');
++  }
++
+   private readSummary(): string | null {
+     if (!fs.existsSync(this.summaryFile)) {
+       return null;
+@@ -215,7 +594,7 @@ export class LaminarMcpServer {
+     return results;
+   }
+ 
+-  private async queryLogs(params: QueryLogsParams): Promise<QueryLogsResult> {
++  private async queryLogs(params: QueryLogsInput): Promise<QueryLogsOutput> {
+     const { caseName, level, event, limit = 100 } = params;
+     const events: DigestEvent[] = [];
+ 
+@@ -321,6 +700,7 @@ export class LaminarMcpServer {
+     console.log('Laminar MCP Server started');
+     console.log(`Reports directory: ${this.reportsDir}`);
+     console.log(`Summary file: ${this.summaryFile}`);
++    console.log(`Config file: ${this.configFile}`);
+     console.log('');
+     console.log('Available resources:', this.listResources().length);
+     console.log('Available tools:', this.listTools().length);
diff --git a/src/mcp/laminar/server.ts b/src/mcp/laminar/server.ts
index 2338216..8b14379 100644
--- a/src/mcp/laminar/server.ts
+++ b/src/mcp/laminar/server.ts
@@ -1,9 +1,56 @@
 import * as fs from 'node:fs';
 import * as path from 'node:path';
-import { DigestEvent, DigestOutput } from '../../digest/generator.js';
+import { spawnSync } from 'node:child_process';
+import { DigestEvent, DigestOutput, DigestConfig, DigestGenerator, generateAllDigests, generateDigestsForCases } from '../../digest/generator.js';
 
 export type Json = null | boolean | number | string | Json[] | { [k: string]: Json };
 
+export enum McpErrorCode {
+  INVALID_INPUT = 'INVALID_INPUT',
+  RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND',
+  TOOL_NOT_FOUND = 'TOOL_NOT_FOUND',
+  IO_ERROR = 'IO_ERROR',
+  PARSE_ERROR = 'PARSE_ERROR',
+  INTERNAL_ERROR = 'INTERNAL_ERROR',
+}
+
+export class McpError extends Error {
+  constructor(
+    public code: McpErrorCode,
+    message: string,
+    public details?: Record<string, unknown>
+  ) {
+    super(message);
+    this.name = 'McpError';
+  }
+
+  toJson(): Json {
+    return {
+      error: {
+        code: this.code as string,
+        message: this.message,
+        details: (this.details || null) as Json,
+      },
+    } as Json;
+  }
+}
+
+export interface JsonSchema {
+  type: string;
+  properties?: Record<string, JsonSchemaProperty>;
+  required?: string[];
+  additionalProperties?: boolean;
+}
+
+export interface JsonSchemaProperty {
+  type: string;
+  description?: string;
+  default?: unknown;
+  enum?: string[];
+  minimum?: number;
+  maximum?: number;
+}
+
 export interface McpResource {
   uri: string;
   name: string;
@@ -14,16 +61,102 @@ export interface McpResource {
 export interface McpTool {
   name: string;
   description: string;
-  inputSchema: {
-    type: 'object';
-    properties: Record<string, unknown>;
-    required?: string[];
-  };
+  inputSchema: JsonSchema;
+}
+
+export interface QueryLogsInput {
+  caseName?: string;
+  level?: string;
+  event?: string;
+  limit?: number;
+}
+
+export interface QueryLogsOutput {
+  events: DigestEvent[];
+  totalCount: number;
+}
+
+export interface GetDigestInput {
+  caseName: string;
+}
+
+export interface GetDigestOutput {
+  digest: DigestOutput | null;
+}
+
+export interface ListFailuresInput {
+  // No input parameters
+}
+
+export interface ListFailuresOutput {
+  failures: SummaryEntry[];
+}
+
+export interface RunInput {
+  suite?: string;
+  case?: string;
+  flakeDetect?: boolean;
+  flakeRuns?: number;
+}
+
+export interface RunOutput {
+  exitCode: number;
+  message: string;
+}
+
+export interface RulesGetInput {
+  // No input parameters
+}
+
+export interface RulesGetOutput {
+  config: DigestConfig;
+}
+
+export interface RulesSetInput {
+  config: DigestConfig;
+}
+
+export interface RulesSetOutput {
+  success: boolean;
+  message: string;
+}
+
+export interface DigestGenerateInput {
+  cases?: string[];
+}
+
+export interface DigestGenerateOutput {
+  count: number;
+  message: string;
+}
+
+export interface LogsCaseGetInput {
+  caseName: string;
+}
+
+export interface LogsCaseGetOutput {
+  logs: string;
+}
+
+export interface ReproInput {
+  caseName?: string;
+}
+
+export interface ReproOutput {
+  commands: ReproCommand[];
+}
+
+export interface ReproCommand {
+  testName: string;
+  testFile: string;
+  vitestCommand: string;
+  logCommand: string;
 }
 
 export interface McpServerConfig {
   reportsDir?: string;
   summaryFile?: string;
+  configFile?: string;
 }
 
 export interface SummaryEntry {
@@ -32,27 +165,125 @@ export interface SummaryEntry {
   location: string;
   artifactURI: string;
   error?: string;
-}
-
-export interface QueryLogsParams {
-  caseName?: string;
-  level?: string;
-  event?: string;
-  limit?: number;
-}
-
-export interface QueryLogsResult {
-  events: DigestEvent[];
-  totalCount: number;
+  testName?: string;
 }
 
 export class LaminarMcpServer {
   private reportsDir: string;
   private summaryFile: string;
+  private configFile: string;
 
   constructor(config: McpServerConfig = {}) {
     this.reportsDir = config.reportsDir || 'reports';
     this.summaryFile = config.summaryFile || path.join(this.reportsDir, 'summary.jsonl');
+    this.configFile = config.configFile || 'laminar.config.json';
+  }
+
+  // ============================================================================
+  // Input Validation
+  // ============================================================================
+
+  private validateQueryLogsInput(input: unknown): QueryLogsInput {
+    if (typeof input !== 'object' || input === null) {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'Input must be an object',
+        { received: typeof input }
+      );
+    }
+
+    const params = input as Record<string, unknown>;
+
+    if (params.caseName !== undefined && typeof params.caseName !== 'string') {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'caseName must be a string',
+        { received: typeof params.caseName }
+      );
+    }
+
+    if (params.level !== undefined && typeof params.level !== 'string') {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'level must be a string',
+        { received: typeof params.level }
+      );
+    }
+
+    if (params.event !== undefined && typeof params.event !== 'string') {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'event must be a string',
+        { received: typeof params.event }
+      );
+    }
+
+    if (params.limit !== undefined) {
+      if (typeof params.limit !== 'number') {
+        throw new McpError(
+          McpErrorCode.INVALID_INPUT,
+          'limit must be a number',
+          { received: typeof params.limit }
+        );
+      }
+      if (params.limit < 1 || params.limit > 1000) {
+        throw new McpError(
+          McpErrorCode.INVALID_INPUT,
+          'limit must be between 1 and 1000',
+          { received: params.limit }
+        );
+      }
+    }
+
+    return {
+      caseName: params.caseName as string | undefined,
+      level: params.level as string | undefined,
+      event: params.event as string | undefined,
+      limit: params.limit as number | undefined,
+    };
+  }
+
+  private validateGetDigestInput(input: unknown): GetDigestInput {
+    if (typeof input !== 'object' || input === null) {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'Input must be an object',
+        { received: typeof input }
+      );
+    }
+
+    const params = input as Record<string, unknown>;
+
+    if (!params.caseName || typeof params.caseName !== 'string') {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'caseName is required and must be a string',
+        { received: params.caseName }
+      );
+    }
+
+    if (params.caseName.trim() === '') {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'caseName cannot be empty',
+        { received: params.caseName }
+      );
+    }
+
+    return {
+      caseName: params.caseName,
+    };
+  }
+
+  private validateListFailuresInput(input: unknown): ListFailuresInput {
+    if (typeof input !== 'object' || input === null) {
+      throw new McpError(
+        McpErrorCode.INVALID_INPUT,
+        'Input must be an object',
+        { received: typeof input }
+      );
+    }
+    return {};
   }
 
   listResources(): McpResource[] {
@@ -83,6 +314,121 @@ export class LaminarMcpServer {
 
   listTools(): McpTool[] {
     return [
+      {
+        name: 'run',
+        description: 'Execute tests with options for suite, case, and flake detection',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            suite: {
+              type: 'string',
+              description: 'Test suite/file to run (optional)',
+            },
+            case: {
+              type: 'string',
+              description: 'Specific test case name to run (optional)',
+            },
+            flakeDetect: {
+              type: 'boolean',
+              description: 'Enable flake detection mode (default: false)',
+              default: false,
+            },
+            flakeRuns: {
+              type: 'number',
+              description: 'Number of runs for flake detection (default: 5)',
+              default: 5,
+            },
+          },
+        },
+      },
+      {
+        name: 'rules.get',
+        description: 'Get current digest rules from laminar.config.json',
+        inputSchema: {
+          type: 'object',
+          properties: {},
+        },
+      },
+      {
+        name: 'rules.set',
+        description: 'Update digest rules in laminar.config.json',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            config: {
+              type: 'object',
+              description: 'Digest configuration object',
+            },
+          },
+          required: ['config'],
+        },
+      },
+      {
+        name: 'digest.generate',
+        description: 'Generate digests for specific cases or all failing cases',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            cases: {
+              type: 'array',
+              description: 'Array of case names to generate digests for (optional, all failures if omitted)',
+            },
+          },
+        },
+      },
+      {
+        name: 'logs.case.get',
+        description: 'Retrieve per-case JSONL logs',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            caseName: {
+              type: 'string',
+              description: 'Name of the test case',
+            },
+          },
+          required: ['caseName'],
+        },
+      },
+      {
+        name: 'query',
+        description: 'Query logs with filters (alias for query_logs)',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            caseName: {
+              type: 'string',
+              description: 'Filter by test case name',
+            },
+            level: {
+              type: 'string',
+              description: 'Filter by log level (error, warn, info, debug)',
+            },
+            event: {
+              type: 'string',
+              description: 'Filter by event type',
+            },
+            limit: {
+              type: 'number',
+              description: 'Maximum number of events to return',
+              default: 100,
+            },
+          },
+        },
+      },
+      {
+        name: 'repro',
+        description: 'Get reproduction commands for failures',
+        inputSchema: {
+          type: 'object',
+          properties: {
+            caseName: {
+              type: 'string',
+              description: 'Specific case name to get repro command for (optional)',
+            },
+          },
+        },
+      },
       {
         name: 'query_logs',
         description: 'Query test event logs with filters',
@@ -149,18 +495,182 @@ export class LaminarMcpServer {
   }
 
   async callTool(name: string, args: Json): Promise<Json> {
-    switch (name) {
-      case 'query_logs':
-        return this.queryLogs(args as QueryLogsParams) as unknown as Json;
-      case 'get_digest':
-        return this.getDigest((args as { caseName: string }).caseName) as unknown as Json;
-      case 'list_failures':
-        return this.listFailures() as unknown as Json;
-      default:
-        throw new Error(`Unknown tool: ${name}`);
+    try {
+      switch (name) {
+        case 'run':
+          return (await this.run(args as unknown as RunInput)) as unknown as Json;
+        case 'rules.get':
+          return (await this.rulesGet(args as unknown as RulesGetInput)) as unknown as Json;
+        case 'rules.set':
+          return (await this.rulesSet(args as unknown as RulesSetInput)) as unknown as Json;
+        case 'digest.generate':
+          return (await this.digestGenerate(args as unknown as DigestGenerateInput)) as unknown as Json;
+        case 'logs.case.get':
+          return (await this.logsCaseGet(args as unknown as LogsCaseGetInput)) as unknown as Json;
+        case 'query':
+        case 'query_logs': {
+          const input = this.validateQueryLogsInput(args);
+          const result = await this.queryLogs(input);
+          return result as unknown as Json;
+        }
+        case 'repro':
+          return (await this.repro(args as unknown as ReproInput)) as unknown as Json;
+        case 'get_digest': {
+          const input = this.validateGetDigestInput(args);
+          const result = await this.getDigest(input.caseName);
+          return { digest: result } as unknown as Json;
+        }
+        case 'list_failures': {
+          this.validateListFailuresInput(args);
+          const result = await this.listFailures();
+          return { failures: result } as unknown as Json;
+        }
+        default:
+          throw new McpError(
+            McpErrorCode.TOOL_NOT_FOUND,
+            `Unknown tool: ${name}`,
+            { tool: name }
+          );
+      }
+    } catch (error) {
+      if (error instanceof McpError) {
+        throw error;
+      }
+      throw new McpError(
+        McpErrorCode.INTERNAL_ERROR,
+        `Tool execution failed: ${error instanceof Error ? error.message : String(error)}`,
+        { tool: name }
+      );
     }
   }
 
+  private async run(params: RunInput): Promise<RunOutput> {
+    const { suite, case: caseName, flakeDetect = false, flakeRuns = 5 } = params;
+
+    const args = ['run', 'lam', '--'];
+    
+    if (flakeDetect) {
+      args.push('run', '--lane', 'ci', '--flake-detect', flakeRuns.toString());
+    } else {
+      args.push('run', '--lane', 'auto');
+      
+      if (suite) {
+        args.push('--filter', suite);
+      } else if (caseName) {
+        args.push('--filter', caseName);
+      }
+    }
+
+    const result = spawnSync('npm', args, {
+      stdio: 'pipe',
+      encoding: 'utf-8',
+    });
+
+    return {
+      exitCode: result.status || 0,
+      message: result.status === 0 ? 'Tests completed successfully' : 'Tests failed',
+    };
+  }
+
+  private async rulesGet(params: RulesGetInput): Promise<RulesGetOutput> {
+    if (fs.existsSync(this.configFile)) {
+      const content = fs.readFileSync(this.configFile, 'utf-8');
+      const config = JSON.parse(content) as DigestConfig;
+      return { config };
+    }
+    
+    return { config: {} };
+  }
+
+  private async rulesSet(params: RulesSetInput): Promise<RulesSetOutput> {
+    try {
+      const content = JSON.stringify(params.config, null, 2);
+      fs.writeFileSync(this.configFile, content);
+      return {
+        success: true,
+        message: `Updated ${this.configFile}`,
+      };
+    } catch (error) {
+      return {
+        success: false,
+        message: error instanceof Error ? error.message : 'Failed to update config',
+      };
+    }
+  }
+
+  private async digestGenerate(params: DigestGenerateInput): Promise<DigestGenerateOutput> {
+    try {
+      let count: number;
+      
+      if (params.cases && params.cases.length > 0) {
+        count = await generateDigestsForCases(params.cases as string[], this.configFile);
+      } else {
+        count = await generateAllDigests(this.configFile);
+      }
+      
+      return {
+        count,
+        message: count === 0 ? 'No failing test cases found' : `Generated ${count} digest(s)`,
+      };
+    } catch (error) {
+      return {
+        count: 0,
+        message: error instanceof Error ? error.message : 'Failed to generate digests',
+      };
+    }
+  }
+
+  private async logsCaseGet(params: LogsCaseGetInput): Promise<LogsCaseGetOutput> {
+    const logPath = this.findLogPath(params.caseName);
+    
+    if (!logPath || !fs.existsSync(logPath)) {
+      return { logs: '' };
+    }
+    
+    const logs = fs.readFileSync(logPath, 'utf-8');
+    return { logs };
+  }
+
+  private async repro(params: ReproInput): Promise<ReproOutput> {
+    if (!fs.existsSync(this.summaryFile)) {
+      return { commands: [] };
+    }
+
+    const content = fs.readFileSync(this.summaryFile, 'utf-8');
+    const lines = content.trim().split('\n').filter(Boolean);
+    const entries: SummaryEntry[] = lines.map(line => JSON.parse(line));
+
+    let failures = entries.filter(entry => entry.status === 'fail');
+    
+    if (params.caseName) {
+      failures = failures.filter(f => {
+        const caseName = f.artifactURI ? path.basename(f.artifactURI, '.jsonl') : '';
+        return caseName === params.caseName;
+      });
+    }
+
+    const commands: ReproCommand[] = failures.map(failure => {
+      const testFile = failure.location.split(':')[0];
+      const testName = this.extractTestName(failure.artifactURI);
+      const artifactPath = failure.artifactURI;
+
+      return {
+        testName,
+        testFile,
+        vitestCommand: `vitest run --reporter=verbose --pool=threads "${testFile}" -t "${testName}"`,
+        logCommand: `npm run logq -- ${artifactPath}`,
+      };
+    });
+
+    return { commands };
+  }
+
+  private extractTestName(artifactURI: string): string {
+    const parts = artifactURI.split('/');
+    const filename = parts[parts.length - 1];
+    return filename.replace('.jsonl', '').replace(/_/g, ' ');
+  }
+
   private readSummary(): string | null {
     if (!fs.existsSync(this.summaryFile)) {
       return null;
@@ -215,7 +725,7 @@ export class LaminarMcpServer {
     return results;
   }
 
-  private async queryLogs(params: QueryLogsParams): Promise<QueryLogsResult> {
+  private async queryLogs(params: QueryLogsInput): Promise<QueryLogsOutput> {
     const { caseName, level, event, limit = 100 } = params;
     const events: DigestEvent[] = [];
 
@@ -321,6 +831,7 @@ export class LaminarMcpServer {
     console.log('Laminar MCP Server started');
     console.log(`Reports directory: ${this.reportsDir}`);
     console.log(`Summary file: ${this.summaryFile}`);
+    console.log(`Config file: ${this.configFile}`);
     console.log('');
     console.log('Available resources:', this.listResources().length);
     console.log('Available tools:', this.listTools().length);
