diff --git a/src/executor/Executor.ts b/src/executor/Executor.ts
index 4bedb8a..9053d03 100644
--- a/src/executor/Executor.ts
+++ b/src/executor/Executor.ts
@@ -10,6 +10,7 @@ import { fileURLToPath } from 'node:url';
 import { dirname, join } from 'node:path';
 import type { TestLogger } from '../logging/logger.js';
 import { createLogger } from '../logging/logger.js';
+import { debug } from '../debug/api.js';
 
 const __filename = fileURLToPath(import.meta.url);
 const __dirname = dirname(__filename);
@@ -51,6 +52,8 @@ export class Executor {
       throw new Error('No configuration loaded. Call load() first.');
     }
 
+    debug.emit('executor', 'start', { nodeCount: this.config.nodes.length });
+
     for (const nodeConfig of this.config.nodes) {
       await this.instantiateNode(nodeConfig);
     }
@@ -87,6 +90,8 @@ export class Executor {
   }
 
   async down(): Promise<void> {
+    debug.emit('executor', 'stop', { nodeCount: this.modules.size });
+
     for (const instance of this.modules.values()) {
       if (instance.worker) {
         instance.worker.postMessage({ type: 'shutdown' });
@@ -201,6 +206,8 @@ export class Executor {
     const harnessPath = join(__dirname, 'workerHarness.js');
     const modulePath = this.getModulePath(nodeConfig.module);
 
+    debug.emit('executor', 'worker.spawn', { nodeId: nodeConfig.id, module: nodeConfig.module });
+
     const worker = new Worker(harnessPath, {
       workerData: {
         nodeId: nodeConfig.id,
@@ -243,6 +250,7 @@ export class Executor {
       const handler = (msg: any) => {
         if (msg && msg.type === 'worker.ready') {
           console.log(`[Executor] Worker ready: ${nodeConfig.id}`);
+          debug.emit('executor', 'worker.ready', { nodeId: nodeConfig.id, module: nodeConfig.module });
           this.logger?.emit('worker.ready', {
             lvl: 'info',
             id: nodeConfig.id,
@@ -285,10 +293,12 @@ export class Executor {
 
     worker.on('error', (err) => {
       console.error(`[Executor] Worker error for ${nodeConfig.id}:`, err);
+      debug.emit('executor', 'worker.error', { nodeId: nodeConfig.id, error: err.message }, 'error');
     });
 
     worker.on('exit', (code) => {
       console.log(`[Executor] Worker ${nodeConfig.id} exited with code ${code}`);
+      debug.emit('executor', 'worker.exit', { nodeId: nodeConfig.id, exitCode: code });
       this.logger?.emit('worker.exit', {
         lvl: 'info',
         id: nodeConfig.id,
