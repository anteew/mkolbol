diff --git a/docs/testing/laminar.md b/docs/testing/laminar.md
index b5385cc..d3b8724 100644
--- a/docs/testing/laminar.md
+++ b/docs/testing/laminar.md
@@ -4,29 +4,28 @@ Laminar is a branded, structured testing system for flow‑based applications. I
 
 ## Quickstart (5 Minutes)
 
-### Installation
+### Installation & First Run
 
 ```bash
-# Install via npm
+# 1. Install
 npm install mkolbol
 
-# Or use npx (no installation)
-npx mkolbol lam init
-```
-
-### First Test Run
-
-```bash
-# 1. Initialize config
+# 2. Initialize Laminar config
 npx lam init
 
-# 2. Run your tests
+# 3. Run your tests
 npx lam run --lane auto
 
-# 3. View summary
+# 4. View test results
 npx lam summary
 ```
 
+**Using npx (no installation):**
+```bash
+npx mkolbol lam init
+npx mkolbol lam run --lane auto
+```
+
 ### Analyze Failures
 
 ```bash
@@ -44,18 +43,18 @@ npx lam repro
 
 | Command | Purpose |
 |---------|---------|
-| `lam init` | Scaffold laminar.config.json |
+| `lam init` | Create laminar.config.json with defaults |
 | `lam run` | Execute tests with structured logging |
 | `lam summary` | List all test results |
-| `lam digest` | Generate failure digests |
-| `lam show` | Inspect test artifacts |
-| `lam repro` | Get repro commands |
+| `lam digest` | Generate failure analysis digests |
+| `lam show` | Inspect test artifacts and events |
+| `lam repro` | Get repro commands for failures |
 
 **Quick Tips:**
-- All test artifacts go to `reports/` directory
-- Use `reports/summary.jsonl` for quick failure scan
-- Per-case logs in `reports/<suite>/<case>.jsonl`
-- Digests auto-generated on failure (see below for configuration)
+- All artifacts → `reports/` directory
+- Quick failure scan → `reports/summary.jsonl`
+- Per-case logs → `reports/<suite>/<case>.jsonl`
+- Digests auto-generated on failure (see configuration below)
 
 ## Why Laminar
 - Token‑cheap: short summaries, deep artifacts on disk
@@ -850,15 +849,396 @@ echo "✅ Quality gates passed"
 
 Ingest Go test JSON output (generated via `go test -json`):
 
-**Usage:**
+##### Installation & Setup
+
+Go has built-in support for JSON test output (no additional dependencies required):
+
+```bash
+# Verify Go is installed
+go version
+
+# Generate JSON test output
+go test -json ./...
+```
+
+##### Generate Go Test JSON
+
+```bash
+# Run all tests with JSON output
+go test -json ./... > go-test.json
+
+# Run specific package
+go test -json ./pkg/mypackage > go-test.json
+
+# With verbose output
+go test -json -v ./...
+
+# With coverage
+go test -json -cover ./... > go-test.json
+```
+
+##### Ingest into Laminar
+
 ```bash
 # From file
 lam ingest --go --from-file go-test.json
 
-# From command
+# From command (one-liner)
 lam ingest --go --cmd "go test -json ./..."
+
+# Alternative: Direct script
+tsx scripts/ingest-go.ts --from-file go-test.json
 ```
 
+##### Go → Laminar Event Mapping
+
+The adapter converts Go's JSON test events into Laminar's structured JSONL events:
+
+| Go Action | Laminar Event | Phase | Level | Notes |
+|-----------|---------------|-------|-------|-------|
+| `run` (test start) | `case.begin` | setup | info | Test identifier from Package + Test |
+| `output` | `test.output` | execution | info | Captured stdout/stderr during test |
+| `pass` | `case.end` | teardown | info | Test passed successfully |
+| `fail` | `test.error` + `case.end` | execution/teardown | error | Test failure with output |
+| `skip` | `test.skip` + `case.end` | execution/teardown | info | Test skipped with reason |
+| `bench` | `test.benchmark` | execution | info | Benchmark result (if applicable) |
+
+##### Status Mapping
+
+Go test outcomes are normalized to Laminar status values:
+
+| Go Outcome | Laminar Status | Description |
+|------------|----------------|-------------|
+| `pass` | `pass` | Test passed successfully |
+| `fail` | `fail` | Test failed assertion or panic |
+| `skip` | `skip` | Test skipped via `t.Skip()` |
+
+##### Extracted Data
+
+The adapter extracts and preserves test metadata:
+
+**Test Metadata:**
+- `Package` — Go package name (e.g., `github.com/user/project/pkg`)
+- `Test` — Test function name (e.g., `TestBasicAuth`)
+- Combined as case ID: `<package>.<test>`
+
+**Duration:**
+- `Elapsed` — Test execution time in seconds (converted to milliseconds)
+
+**Output:**
+- All `output` events are captured with their content
+- Both stdout and stderr are preserved
+- Test failure messages extracted from output
+
+**Location:**
+- Package path used as location reference
+- Line numbers not directly available in Go JSON format
+
+##### Generated Event Lifecycle
+
+Every Go test produces a predictable sequence of Laminar events:
+
+**1. Test Begin**
+```json
+{
+  "ts": 1678886400000,
+  "lvl": "info",
+  "case": "github.com/user/project.TestExample",
+  "phase": "setup",
+  "evt": "case.begin",
+  "payload": {
+    "package": "github.com/user/project",
+    "test": "TestExample"
+  }
+}
+```
+
+**2. Test Output (captured during execution)**
+```json
+{
+  "ts": 1678886400050,
+  "lvl": "info",
+  "case": "github.com/user/project.TestExample",
+  "phase": "execution",
+  "evt": "test.output",
+  "payload": {
+    "output": "=== RUN   TestExample\n"
+  }
+}
+```
+
+**3. Test Error (if failed)**
+```json
+{
+  "ts": 1678886400100,
+  "lvl": "error",
+  "case": "github.com/user/project.TestExample",
+  "phase": "execution",
+  "evt": "test.error",
+  "payload": {
+    "message": "Expected 5, got 3",
+    "output": "    example_test.go:42: Expected 5, got 3\n"
+  }
+}
+```
+
+**4. Test Skip (if skipped)**
+```json
+{
+  "ts": 1678886400120,
+  "lvl": "info",
+  "case": "github.com/user/project.TestSkipped",
+  "phase": "execution",
+  "evt": "test.skip",
+  "payload": {
+    "message": "Skipping slow test"
+  }
+}
+```
+
+**5. Test End**
+```json
+{
+  "ts": 1678886400150,
+  "lvl": "info",
+  "case": "github.com/user/project.TestExample",
+  "phase": "teardown",
+  "evt": "case.end",
+  "payload": {
+    "duration": 150,
+    "status": "passed"
+  }
+}
+```
+
+##### Output Structure
+
+Ingested Go tests follow the standard Laminar artifact layout:
+
+```
+reports/
+├── summary.jsonl                                    # One-line summaries (all tests)
+└── <package-name>/                                  # Per-package directories
+    ├── <test-name>.jsonl                           # Event stream for each test
+    └── ...
+```
+
+**Example `summary.jsonl` entry:**
+```json
+{
+  "status": "pass",
+  "duration": 150,
+  "location": "github.com/user/project",
+  "artifactURI": "reports/github.com.user.project/TestExample.jsonl",
+  "testName": "github.com/user/project.TestExample"
+}
+```
+
+##### Complete Workflow Examples
+
+**Example 1: Basic Go Project**
+```bash
+# Run Go tests with JSON output
+go test -json ./... > go-test.json
+
+# Ingest into Laminar
+lam ingest --go --from-file go-test.json
+
+# View summary
+lam summary
+
+# Generate digests for failures
+lam digest
+```
+
+**Example 2: Specific Package Testing**
+```bash
+# Test a specific package
+go test -json ./internal/auth > auth-tests.json
+
+# Ingest
+lam ingest --go --from-file auth-tests.json
+
+# View failures only
+lam summary | grep fail
+```
+
+**Example 3: With Coverage**
+```bash
+# Run tests with coverage
+go test -json -cover ./... > go-test-coverage.json
+
+# Ingest
+lam ingest --go --from-file go-test-coverage.json
+
+# Analyze results
+lam trends --top 5
+```
+
+**Example 4: CI Integration (GitHub Actions)**
+```yaml
+name: Go Tests with Laminar
+
+on: [push, pull_request]
+
+jobs:
+  test:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v3
+      
+      - name: Set up Go
+        uses: actions/setup-go@v4
+        with:
+          go-version: '1.21'
+      
+      - name: Run Go tests
+        run: go test -json ./... > go-test.json
+        continue-on-error: true
+      
+      - name: Install Laminar
+        run: npm install -g mkolbol
+      
+      - name: Ingest Go test results
+        run: lam ingest --go --from-file go-test.json
+      
+      - name: Generate failure digests
+        if: failure()
+        run: lam digest
+      
+      - name: Upload test artifacts
+        uses: actions/upload-artifact@v3
+        with:
+          name: test-reports
+          path: reports/
+```
+
+**Example 5: Live Ingest (No Intermediate File)**
+```bash
+# Direct ingest from command
+lam ingest --go --cmd "go test -json ./..."
+
+# With specific tags
+lam ingest --go --cmd "go test -json -tags=integration ./..."
+
+# With timeout
+lam ingest --go --cmd "go test -json -timeout 30s ./..."
+```
+
+**Example 6: Multi-Module Go Project**
+```bash
+#!/bin/bash
+# test-all-modules.sh - Test multiple Go modules
+
+MODULES=("module1" "module2" "module3")
+
+for module in "${MODULES[@]}"; do
+  echo "Testing $module..."
+  cd "$module"
+  go test -json ./... > "../go-test-$module.json"
+  cd ..
+  
+  # Ingest each module
+  lam ingest --go --from-file "go-test-$module.json"
+done
+
+# Generate consolidated digest
+lam digest
+
+# Summary
+lam summary
+```
+
+##### CI Integration Patterns
+
+**Pattern 1: Fail-Fast with Analysis**
+```bash
+# Run tests (don't fail immediately)
+go test -json ./... > go-test.json || true
+
+# Ingest results
+lam ingest --go --from-file go-test.json
+
+# Generate digests
+lam digest
+
+# Check for failures
+if grep -q '"status":"fail"' reports/summary.jsonl; then
+  echo "Tests failed - see reports/"
+  exit 1
+fi
+```
+
+**Pattern 2: Parallel Package Testing**
+```bash
+# Get all packages
+PACKAGES=$(go list ./...)
+
+# Test each package in parallel
+for pkg in $PACKAGES; do
+  (
+    echo "Testing $pkg..."
+    go test -json "$pkg" > "go-test-$(basename $pkg).json"
+    lam ingest --go --from-file "go-test-$(basename $pkg).json"
+  ) &
+done
+
+# Wait for all to complete
+wait
+
+# Generate combined analysis
+lam summary
+lam trends
+```
+
+**Pattern 3: Historical Comparison**
+```bash
+# Run tests
+go test -json ./... > go-test.json
+lam ingest --go --from-file go-test.json
+
+# Compare with baseline
+CURRENT_FAILS=$(jq -s '[.[] | select(.status == "fail")] | length' reports/summary.jsonl)
+BASELINE_FAILS=$(cat baseline-failures.txt)
+
+if [ "$CURRENT_FAILS" -gt "$BASELINE_FAILS" ]; then
+  echo "⚠️  New failures detected: $CURRENT_FAILS (baseline: $BASELINE_FAILS)"
+  exit 1
+fi
+```
+
+##### Troubleshooting
+
+**Issue: Missing test output**
+- Go's `-json` flag captures output differently than regular mode
+- Use `go test -json -v` for verbose output
+- Some output may be buffered; ensure tests flush output
+
+**Issue: Incomplete JSON**
+- If `go test` crashes, JSON may be malformed
+- Check the last line of the JSON file is complete
+- Use `jq empty < go-test.json` to validate JSON structure
+
+**Issue: Test names not unique**
+- Go allows same test name in different packages
+- Laminar uses `<package>.<test>` to ensure uniqueness
+- Subtests use the full name including parent (e.g., `TestMain/subtest`)
+
+**Issue: Timing discrepancies**
+- Go reports elapsed time in seconds (float)
+- Laminar converts to milliseconds (integer)
+- Minor precision loss (<1ms) is expected
+
+**Issue: Benchmark results**
+- `go test -bench` output is partially supported
+- Benchmark iterations are captured as output events
+- Use `-json` with `-bench` to capture benchmark data
+
+**Issue: Package-level failures**
+- If package fails to compile, no test events are emitted
+- Check for build errors before the first test event
+- Use `go build ./...` to verify compilation separately
+
 See `scripts/ingest-go.ts` for implementation details.
 
 ### lam trends — Failure Trend Analysis
