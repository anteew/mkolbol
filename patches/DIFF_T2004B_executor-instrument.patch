diff --git a/src/executor/Executor.ts b/src/executor/Executor.ts
index 04b0eaf..ce714cd 100644
--- a/src/executor/Executor.ts
+++ b/src/executor/Executor.ts
@@ -8,6 +8,7 @@ import type { ServerManifest, ExternalServerManifest } from '../types.js';
 import { Worker, MessageChannel } from 'node:worker_threads';
 import { fileURLToPath } from 'node:url';
 import { dirname, join } from 'node:path';
+import type { TestLogger } from '../logging/logger.js';
 
 const __filename = fileURLToPath(import.meta.url);
 const __dirname = dirname(__filename);
@@ -23,13 +24,16 @@ export class Executor {
   private config?: TopologyConfig;
   private modules = new Map<string, ModuleInstance>();
   private moduleRegistry: ModuleRegistry;
+  private logger?: TestLogger;
 
   constructor(
     private kernel: Kernel,
     private hostess: Hostess,
-    private stateManager: StateManager
+    private stateManager: StateManager,
+    logger?: TestLogger
   ) {
     this.moduleRegistry = new ModuleRegistry();
+    this.logger = logger;
   }
 
   load(config: TopologyConfig): void {
@@ -62,6 +66,11 @@ export class Executor {
 
     for (const conn of this.config.connections) {
       this.stateManager.connect(conn.from, conn.to);
+      this.logger?.emit('edge.connect', {
+        lvl: 'debug',
+        id: `${conn.from}->${conn.to}`,
+        payload: { from: conn.from, to: conn.to }
+      });
     }
 
     for (const instance of this.modules.values()) {
@@ -228,6 +237,12 @@ export class Executor {
       const handler = (msg: any) => {
         if (msg && msg.type === 'worker.ready') {
           console.log(`[Executor] Worker ready: ${nodeConfig.id}`);
+          this.logger?.emit('worker.ready', {
+            lvl: 'info',
+            id: nodeConfig.id,
+            path: modulePath,
+            payload: { module: nodeConfig.module }
+          });
           topic.off('data', handler);
           resolve();
         }
@@ -268,6 +283,12 @@ export class Executor {
 
     worker.on('exit', (code) => {
       console.log(`[Executor] Worker ${nodeConfig.id} exited with code ${code}`);
+      this.logger?.emit('worker.exit', {
+        lvl: 'info',
+        id: nodeConfig.id,
+        path: modulePath,
+        payload: { module: nodeConfig.module, exitCode: code }
+      });
     });
   }
 
