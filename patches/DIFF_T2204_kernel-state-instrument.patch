diff --git a/src/kernel/Kernel.ts b/src/kernel/Kernel.ts
index 19a04ab..12c53a9 100644
--- a/src/kernel/Kernel.ts
+++ b/src/kernel/Kernel.ts
@@ -1,6 +1,7 @@
 import type { Pipe, StreamOptions, Capabilities, CapabilityQuery } from '../types/stream';
 import type { PipeAdapter } from '../pipes/PipeAdapter';
 import { InProcPipe } from '../pipes/adapters/InProcPipe.js';
+import { debug } from '../debug/api.js';
 
 export class Kernel {
   private registry = new Map<string, { capabilities: Capabilities; pipe: Pipe }>();
@@ -11,20 +12,31 @@ export class Kernel {
   }
 
   createPipe(options?: StreamOptions): Pipe {
-    return this.adapter.createDuplex(options);
+    const pipe = this.adapter.createDuplex(options);
+    debug.emit('kernel', 'pipe.create', { pipeId: (pipe as any)._id });
+    return pipe;
   }
 
   connect(from: Pipe, to: Pipe): void {
+    debug.emit('kernel', 'pipe.connect', { fromId: (from as any)._id, toId: (to as any)._id });
     from.pipe(to);
   }
 
   split(source: Pipe, destinations: Pipe[]): void {
+    debug.emit('kernel', 'pipe.split', {
+      sourceId: (source as any)._id,
+      destIds: destinations.map((d) => (d as any)._id),
+    });
     for (const dest of destinations) {
       source.pipe(dest);
     }
   }
 
   merge(sources: Pipe[], destination: Pipe): void {
+    debug.emit('kernel', 'pipe.merge', {
+      sourceIds: sources.map((s) => (s as any)._id),
+      destId: (destination as any)._id,
+    });
     for (const source of sources) {
       source.pipe(destination);
     }
diff --git a/src/state/StateManager.ts b/src/state/StateManager.ts
index c391f64..f164825 100644
--- a/src/state/StateManager.ts
+++ b/src/state/StateManager.ts
@@ -10,6 +10,7 @@ import {
   TopologyEvent,
   ValidationResult,
 } from '../types/topology.js';
+import { debug } from '../debug/api.js';
 
 type ValidatorFn = (from: TerminalRef, tos: TerminalRef[], type: 'direct' | 'split' | 'merge') => ValidationResult;
 
@@ -28,6 +29,7 @@ export class StateManager {
   }
 
   private emit(e: TopologyEvent) {
+    debug.emit('state', `event.${e.type}`, e);
     for (const l of this.listeners) l(e);
   }
 
