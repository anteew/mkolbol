diff --git a/scripts/lam.ts b/scripts/lam.ts
index ac3968a..f540860 100644
--- a/scripts/lam.ts
+++ b/scripts/lam.ts
@@ -2,6 +2,8 @@
 import { spawnSync, execSync } from 'node:child_process';
 import * as fs from 'node:fs';
 import { ingestGoTest } from './ingest-go.js';
+import { DigestDiffEngine } from '../src/digest/diff.js';
+import { bundleRepro } from './repro-bundle.js';
 
 function sh(cmd: string, args: string[], env: Record<string, string> = {}) {
   const res = spawnSync(cmd, args, { stdio: 'inherit', env: { ...process.env, ...env } });
@@ -16,6 +18,8 @@ Usage:
   lam summary
   lam show --case <suite/case> [--around <pattern>] [--window <n>]
   lam digest [--cases <case1,case2,...>]
+  lam diff <digest1> <digest2> [--output <path>] [--format json|markdown]
+  lam repro --bundle [--case <case-name>]
   lam ingest --go [--from-file <path> | --cmd "<command>"]
   lam rules get
   lam rules set --file <path> | --inline '<json>'
@@ -27,6 +31,10 @@ Examples:
   lam show --case kernel.spec/connect_moves_data_1_1 --around assert.fail --window 50
   lam digest
   lam digest --cases kernel.spec/connect_moves_data_1_1,kernel.spec/another_case
+  lam diff reports/case1.digest.json reports/case2.digest.json
+  lam diff reports/case1.digest.json reports/case2.digest.json --output diff.md --format markdown
+  lam repro --bundle
+  lam repro --bundle --case kernel.spec/connect_moves_data_1_1
   lam ingest --go --from-file go-test-output.json
   lam ingest --go --cmd "go test -json ./..."
   lam rules get
@@ -215,6 +223,61 @@ async function main() {
       }
       break;
     }
+    case 'diff': {
+      const digest1 = rest[0];
+      const digest2 = rest[1];
+      
+      if (!digest1 || !digest2) {
+        console.error('lam diff <digest1> <digest2> [--output <path>] [--format json|markdown]');
+        process.exit(1);
+      }
+      
+      if (!fs.existsSync(digest1)) {
+        console.error(`Digest file not found: ${digest1}`);
+        process.exit(1);
+      }
+      
+      if (!fs.existsSync(digest2)) {
+        console.error(`Digest file not found: ${digest2}`);
+        process.exit(1);
+      }
+      
+      const outputPath = args.get('output') as string | undefined;
+      const format = (args.get('format') as string) || 'json';
+      
+      if (format !== 'json' && format !== 'markdown') {
+        console.error('Format must be "json" or "markdown"');
+        process.exit(1);
+      }
+      
+      const engine = new DigestDiffEngine();
+      const diff = engine.compareFiles(digest1, digest2);
+      
+      if (outputPath) {
+        engine.writeDiff(diff, outputPath, format);
+        console.log(`Diff written to: ${outputPath}`);
+      } else {
+        // Output to terminal
+        if (format === 'markdown') {
+          console.log(engine.formatAsMarkdown(diff));
+        } else {
+          console.log(engine.formatAsJson(diff, true));
+        }
+      }
+      break;
+    }
+    case 'repro': {
+      const bundle = args.get('bundle');
+      
+      if (!bundle) {
+        console.error('lam repro --bundle [--case <case-name>]');
+        process.exit(1);
+      }
+      
+      const caseName = args.get('case') as string | undefined;
+      await bundleRepro(caseName);
+      break;
+    }
     case 'ingest': {
       const go = args.get('go');
       if (!go) {
