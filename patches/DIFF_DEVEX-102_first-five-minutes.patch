diff --git a/docs/devex/first-five-minutes.md b/docs/devex/first-five-minutes.md
index 2a11098..81b8425 100644
--- a/docs/devex/first-five-minutes.md
+++ b/docs/devex/first-five-minutes.md
@@ -1,127 +1,295 @@
-# First Five Minutes with mkolbol
+# First Five Minutes: Local Node v1.0
 
-Welcome! You're about to experience the easiest way to get mkolbol running. Pick one of the three paths below based on what you want to do right now.
+**Get your first mkolbol topology running in 5 minutes.**
+
+Welcome to mkolbol! This guide will take you from zero to a running topology in five minutes. No complex setup, no deep architecture study—just clone, run, and see it work.
 
 ⏱️ **Total time: 5 minutes**
 
 ---
 
-## 🚀 Path A: Run a Topology (No Code Required)
+## 1. What is mkolbol? (2 min read)
 
-**For**: "I just want to see it work"
+**One sentence:** mkolbol is a stream-based microkernel that lets you wire together data processing modules (like HTTP servers, transforms, and outputs) into flexible topologies using simple YAML configs.
 
-### What you'll do
-Execute a pre-built topology config using `mkctl run` — no TypeScript, no setup beyond `npm install`.
+### Why it matters for AI agents
 
-### Commands
-```bash
-# Clone and build
-git clone https://github.com/anteew/mkolbol.git
-cd mkolbol
-npm install && npm run build
+AI agents need to:
+- **Observe** streams of data (terminal output, HTTP logs, sensor data)
+- **Transform** that data in flight (parse, filter, compress)
+- **Route** data to multiple destinations (screen, logger, AI model)
+- **React** to changes without rebuilding pipelines
+
+mkolbol gives you this for free. Write modules once, wire them flexibly, run them anywhere.
 
-# Run the PTY demo via config (5 seconds)
-node dist/scripts/mkctl.js run --file examples/configs/external-pty.yaml
+### What you can do with it
 
-# Or run for 10 seconds
-node dist/scripts/mkctl.js run --file examples/configs/external-pty.yaml --duration 10
+```
+HTTP Server (logs) → Parser → Split ┬→ Console (live view)
+                                     ├→ Logger (persistent)
+                                     └→ AI Agent (analysis)
 ```
 
-### What happens
-- A bash shell runs in a PTY and streams output to your terminal
-- The topology loads from YAML, runs modules, exits cleanly
-- Watch for the demo output, then press Ctrl+C if needed
+**Real-world examples:**
+- Build terminal hijackers (capture shell I/O for AI analysis)
+- Create data pipelines (HTTP logs → filters → multiple sinks)
+- Stream processing (sensor data → transforms → dashboards)
+- MCP servers with observability (debug every message in flight)
 
-### Next: Learn more
-- **[Quickstart Guide](./quickstart.md)** - Full walkthrough with troubleshooting
-- **[mkctl run Documentation](./wiring-and-tests.md#running-configurations)** - Running your own configs
+**The mkolbol promise:** Write once, wire flexibly, observe everything.
 
 ---
 
-## 📊 Path B: Process Data Without Terminal Features
+## 2. Local Node v1.0: The Basics (2 min read)
+
+### What is in-process routing?
+
+**Local Node mode** means all modules run in a single Node.js process or as child processes on one machine. No network, no distributed routing, just local pipes.
 
-**For**: "I want to pipe data through filters (like `cat`, `jq`, `sed`)"
+This is the **fastest path to productivity**:
+- Clone → config → run
+- Perfect for development and testing
+- Ideal for single-machine deployments
+- Foundation before scaling to distributed mode
 
-### What you'll do
-Explore the **StdIO path** — lightweight I/O for non-interactive programs. No terminal overhead, maximum performance.
+### The MK_LOCAL_NODE=1 environment variable
+
+To ensure you're running in Local Node mode (and prevent accidental network features):
 
-### Example
 ```bash
-# Run the StdIO echo demo
-npm run build
-node dist/examples/stdio-echo-demo.js
+export MK_LOCAL_NODE=1
 ```
 
-### What happens
-- Data flows through an external process without terminal emulation
-- ~100μs latency (vs 500μs with PTY)
-- Perfect for data transformation pipelines
+**What this does:**
+- ✅ **Enables:** In-process RoutingServer, Executor, Hostess, StateManager
+- ❌ **Disables:** Network transports, distributed routing, multi-machine topologies
+- 🔒 **Validates:** Config loader rejects any node with `type=network` or `address` parameters
 
-### Next: Learn more
-- **[StdIO Path Guide](./stdio-path.md)** - Deep dive on filters and pipelines
-- **[Wiring Topologies](./wiring-and-tests.md#i-o-modes)** - Understanding stdio vs pty modes
+**When to use Local Node mode:**
+- Local development and testing (today)
+- Single-machine deployments (today)
+- Learning mkolbol concepts (today)
+
+**Future:** When `MK_LOCAL_NODE=0` or unset, distributed routing will be available.
+
+### Key concepts (quick definitions)
+
+| Component | What it does |
+|-----------|--------------|
+| **Kernel** | ~100 line core API: creates pipes, connects modules |
+| **Router** | Tracks all running modules and their endpoints |
+| **Executor** | Loads configs, starts/stops modules, manages lifecycle |
+| **Hostess** | Service registry with heartbeat monitoring |
+| **Module** | A functional unit (HTTP server, parser, console output, etc.) |
+
+**Mental model:** Kernel = plumbing, Modules = functionality, Executor = orchestrator.
 
 ---
 
-## ⌨️ Path C: Build Interactive Applications
+## 3. Your First Topology (Copy & Paste) (3 min)
 
-**For**: "I want to build an app that interacts with a shell or TUI"
+Let's run the canonical Local Node v1.0 demo: an HTTP server that logs requests to your console.
 
-### What you'll do
-Explore the **Interactive path** — keyboard input → PTY → terminal output. Full terminal features, ANSI escape sequences, window resizing.
+### Step 1: Clone and build (90 seconds)
 
-### Try it
 ```bash
+git clone https://github.com/anteew/mkolbol.git
+cd mkolbol
+npm install
 npm run build
+```
+
+### Step 2: Run the topology (30 seconds)
 
-# Interactive demo (requires xterm library and terminal support)
-node dist/examples/keyboard-pty-tty.js
+```bash
+export MK_LOCAL_NODE=1
+node dist/scripts/mkctl.js run --file examples/configs/http-logs-local.yml --duration 10
 ```
 
-### What happens
-- Keyboard input flows to a bash shell running in PTY
-- Terminal output renders with colors, formatting, cursor control
-- You can interact with bash directly
+**Expected output:**
+```
+[mkctl] Running in Local Node mode (MK_LOCAL_NODE=1): network features disabled.
+Loading config from: examples/configs/http-logs-local.yml
+Bringing topology up...
+Topology running for 10 seconds...
 
-### Next: Learn more
-- **[Interactive Topology Guide](./interactive-topology.md)** - Keyboard → PTY → Screen pipelines
-- **[Quickstart: PTY Demo](./quickstart.md)** - Step-by-step walkthrough
+[http] Server listening on http://localhost:3000
+```
+
+### Step 3: Send a request (in another terminal)
+
+```bash
+curl -s http://localhost:3000/hello
+```
+
+**Terminal 1 output (where mkctl is running):**
+```
+[http] [2025-10-17T04:15:23.456Z] GET /hello
+```
+
+**Terminal 2 output (where curl ran):**
+```
+ok
+```
+
+### What just happened?
+
+1. **web node** (ExternalProcess): Spawned a Node.js HTTP server that logs requests to stdout
+2. **sink node** (ConsoleSink): Read from web's output and displayed to terminal with `[http]` prefix
+3. **Router**: Tracked both endpoints; snapshot saved to `reports/router-endpoints.json` at shutdown
+4. **Local Node gate**: Enforced in-process routing only (no network features)
+
+### The config file (examples/configs/http-logs-local.yml)
+
+```yaml
+nodes:
+  - id: web
+    module: ExternalProcess
+    params:
+      command: node
+      args:
+        - -e
+        - "require('http').createServer((req,res)=>{console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);res.end('ok')}).listen(3000,()=>console.log('Server listening on http://localhost:3000'))"
+      ioMode: stdio
+      restart: never
+
+  - id: sink
+    module: ConsoleSink
+    params:
+      prefix: "[http]"
+
+connections:
+  - from: web.output
+    to: sink.input
+```
+
+**Key takeaways:**
+- **`ioMode: stdio`** - Lightweight, non-interactive data piping (perfect for HTTP logs)
+- **`restart: never`** - Server won't auto-restart on crash
+- **`prefix: "[http]"`** - ConsoleSink adds prefix to all output lines
+- **Inline server** - No external files needed; server defined in config
+
+### Inspect the routing snapshot
+
+After the topology exits:
+
+```bash
+node dist/scripts/mkctl.js endpoints
+```
+
+Or view the raw JSON:
+
+```bash
+cat reports/router-endpoints.json | jq .
+```
+
+You'll see both endpoints (web and sink) with their metadata, timestamps, and coordinates.
 
 ---
 
-## 🤔 Stuck or have questions?
+## 4. What's Next? (2 min)
+
+**You just ran your first topology!** Here's where to go from here:
+
+### Immediate next steps
+
+| If you want to... | Go here... |
+|-------------------|-----------|
+| **Understand the architecture** | [Early Adopter Guide](./early-adopter-guide.md) - Core concepts, mental models, glossary |
+| **Run the full 3-terminal demo** | [Quickstart](./quickstart.md) - Complete Local Node v1.0 walkthrough with live endpoint monitoring |
+| **Validate everything works** | [Acceptance Pack](../../tests/devex/acceptance/local-node-v1.md) - Checklist for Local Node v1.0 |
+| **Build your own module** | [First Server Tutorial](./first-server-tutorial.md) - Code a custom Transform or External process |
+
+### Deep dives (when you're ready)
+
+- **[Wiring and Testing Guide](./wiring-and-tests.md)** - Configure custom topologies, understand I/O modes
+- **[mkctl Cookbook](./mkctl-cookbook.md)** - Daily reference for `mkctl run` and `mkctl endpoints`
+- **[StdIO Path](./stdio-path.md)** - Lightweight data pipelines (no terminal overhead)
+- **[Interactive Topology](./interactive-topology.md)** - Keyboard → PTY → Screen (full terminal features)
+- **[Packaging Guide](./packaging.md)** - Bundle topologies as single executables
+- **[Laminar Workflow](./laminar-workflow.md)** - Test observability and debugging
 
-- **Errors running the demos?** See **[Troubleshooting Guide](./troubleshooting.md)**
-- **Want to understand the architecture?** See **[Early Adopter Guide](./early-adopter-guide.md)**
-- **Ready to build your own module?** See **[First Server Tutorial](./first-server-tutorial.md)**
+### Architecture deep dives
+
+- **[Stream Kernel RFC](../rfcs/stream-kernel/00-index.md)** - Complete architecture documentation
+- **[RoutingServer RFC](../rfcs/stream-kernel/05-router.md)** - Endpoint discovery and routing
 
 ---
 
-## Quick Concept
+## 5. Getting Help (1 min)
+
+### Troubleshooting
+
+**Config file not found:**
+```bash
+# Use absolute path
+node dist/scripts/mkctl.js run --file $(pwd)/examples/configs/http-logs-local.yml --duration 10
+```
+
+**Server not starting:**
+```bash
+# Check if port 3000 is already in use
+lsof -i :3000
+```
+
+**No endpoints registered:**
+```bash
+# Run topology with longer duration
+node dist/scripts/mkctl.js run --file examples/configs/http-logs-local.yml --duration 15
+```
 
-mkolbol is a stream-based microkernel: **tiny kernel (~100 lines) + pluggable modules**. The kernel provides pipes and connections; modules handle semantics (terminal, data processing, AI logic, etc.).
+**More help:** [mkctl Cookbook](./mkctl-cookbook.md) has a complete troubleshooting matrix with exit codes and fixes.
 
-Three execution modes:
-- **inproc**: Fast, in-process (default)
-- **external (stdio)**: Lightweight, language-agnostic
-- **external (pty)**: Interactive, terminal-capable
+### Community support
 
-The same code works locally with `inproc`, scaled with `external`, or distributed across machines. **Location transparency** means modules don't know where they run.
+- **[GitHub Issues](https://github.com/anteew/mkolbol/issues)** - Report bugs, request features
+- **[GitHub Discussions](https://github.com/anteew/mkolbol/discussions)** - Ask questions, share ideas
+- **[Contributing Guide](../../CONTRIBUTING-DEVEX.md)** - Feedback templates and contribution workflow
 
 ---
 
-## Resources at a Glance
+## Quick Reference Card
+
+**Run a topology:**
+```bash
+export MK_LOCAL_NODE=1
+node dist/scripts/mkctl.js run --file examples/configs/http-logs-local.yml --duration 10
+```
+
+**Inspect endpoints:**
+```bash
+node dist/scripts/mkctl.js endpoints
+```
 
-| I want to... | Go to... |
-|---|---|
-| Run a topology from YAML | **[Quickstart Guide](./quickstart.md)** or **[Wiring Guide](./wiring-and-tests.md)** |
-| Build a module | **[First Server Tutorial](./first-server-tutorial.md)** |
-| Test my module | **[Acceptance Tests](./tests/devex/README.md)** |
-| Package for distribution | **[Packaging Guide](./packaging.md)** |
-| Debug with logs | **[Laminar Workflow](./laminar-workflow.md)** |
-| Understand architecture | **[Early Adopter Guide](./early-adopter-guide.md)** or **[RFC](../rfcs/stream-kernel/00-index.md)** |
-| Report issues | **[Contributing Guide](../../../CONTRIBUTING-DEVEX.md)** |
+**Watch endpoints live:**
+```bash
+node dist/scripts/mkctl.js endpoints --watch --interval 1
+```
+
+**Stop early:**
+```
+Press Ctrl+C
+```
+
+**Example configs:**
+```
+examples/configs/
+├── http-logs-local.yml        # HTTP → Console (this guide)
+├── external-pty.yaml          # PTY demo (interactive shell)
+└── external-stdio.yaml        # StdIO demo (data pipeline)
+```
 
 ---
 
-**Ready?** Pick a path above and dive in. You'll have mkolbol running in 5 minutes.
+**That's it!** You've run your first topology, understood Local Node mode, and know where to go next.
+
+**Time spent:** 5 minutes ⏱️
+
+**What you learned:**
+- ✅ What mkolbol is and why it matters
+- ✅ Local Node v1.0 in-process routing
+- ✅ How to run a topology from YAML
+- ✅ How to inspect routing snapshots
+- ✅ Where to go for deeper learning
+
+**Ready to build?** Head to the [First Server Tutorial](./first-server-tutorial.md) and create your first custom module.
