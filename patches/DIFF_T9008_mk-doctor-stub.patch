diff --git a/src/mk/doctor.ts b/src/mk/doctor.ts
new file mode 100644
index 0000000..0961316
--- /dev/null
+++ b/src/mk/doctor.ts
@@ -0,0 +1,209 @@
+import { execSync } from 'node:child_process';
+import { existsSync } from 'node:fs';
+import { resolve } from 'node:path';
+
+export type CheckResult = {
+  name: string;
+  status: 'pass' | 'fail' | 'warn';
+  message: string;
+  remediation?: string;
+};
+
+export async function runDoctorChecks(verbose: boolean = false): Promise<CheckResult[]> {
+  const results: CheckResult[] = [];
+
+  results.push(checkNodeVersion());
+  results.push(checkPackageManager());
+  results.push(checkGitRepository());
+  results.push(checkBuildStatus());
+  results.push(checkDependencies());
+  results.push(checkTypeScriptCompilation());
+
+  return results;
+}
+
+function checkNodeVersion(): CheckResult {
+  const nodeVersion = process.version;
+  const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0], 10);
+
+  if (majorVersion >= 20) {
+    return {
+      name: 'Node.js version',
+      status: 'pass',
+      message: `${nodeVersion} (>= 20)`,
+    };
+  } else {
+    return {
+      name: 'Node.js version',
+      status: 'fail',
+      message: `${nodeVersion} (< 20)`,
+      remediation: 'Install Node.js 20 or later from https://nodejs.org/ or use nvm: nvm install 20',
+    };
+  }
+}
+
+function checkPackageManager(): CheckResult {
+  let npm = false;
+  let pnpm = false;
+
+  try {
+    execSync('npm --version', { stdio: 'pipe' });
+    npm = true;
+  } catch {
+    // npm not found
+  }
+
+  try {
+    execSync('pnpm --version', { stdio: 'pipe' });
+    pnpm = true;
+  } catch {
+    // pnpm not found
+  }
+
+  if (npm || pnpm) {
+    const managers = [npm && 'npm', pnpm && 'pnpm'].filter(Boolean).join(', ');
+    return {
+      name: 'Package manager',
+      status: 'pass',
+      message: `Found: ${managers}`,
+    };
+  } else {
+    return {
+      name: 'Package manager',
+      status: 'fail',
+      message: 'npm/pnpm not found',
+      remediation: 'Install npm (comes with Node.js) or pnpm: npm install -g pnpm',
+    };
+  }
+}
+
+function checkGitRepository(): CheckResult {
+  try {
+    execSync('git rev-parse --git-dir', { stdio: 'pipe' });
+    return {
+      name: 'Git repository',
+      status: 'pass',
+      message: 'Detected',
+    };
+  } catch {
+    return {
+      name: 'Git repository',
+      status: 'warn',
+      message: 'Not a git repository',
+      remediation: 'Initialize git: git init',
+    };
+  }
+}
+
+function checkBuildStatus(): CheckResult {
+  const distPath = resolve(process.cwd(), 'dist');
+  
+  if (existsSync(distPath)) {
+    const mkPath = resolve(distPath, 'scripts/mk.js');
+    const hasMk = existsSync(mkPath);
+    
+    if (hasMk) {
+      return {
+        name: 'Build status',
+        status: 'pass',
+        message: 'dist/ directory exists with compiled files',
+      };
+    } else {
+      return {
+        name: 'Build status',
+        status: 'warn',
+        message: 'dist/ exists but incomplete',
+        remediation: 'Run: npm run build',
+      };
+    }
+  } else {
+    return {
+      name: 'Build status',
+      status: 'fail',
+      message: 'dist/ directory not found',
+      remediation: 'Run: npm run build',
+    };
+  }
+}
+
+function checkDependencies(): CheckResult {
+  const nodeModulesPath = resolve(process.cwd(), 'node_modules');
+  
+  if (existsSync(nodeModulesPath)) {
+    return {
+      name: 'Dependencies',
+      status: 'pass',
+      message: 'node_modules/ directory exists',
+    };
+  } else {
+    return {
+      name: 'Dependencies',
+      status: 'fail',
+      message: 'node_modules/ not found',
+      remediation: 'Run: npm install',
+    };
+  }
+}
+
+function checkTypeScriptCompilation(): CheckResult {
+  try {
+    execSync('npx tsc --version', { stdio: 'pipe' });
+    
+    try {
+      execSync('npx tsc --noEmit', { stdio: 'pipe', timeout: 10000 });
+      return {
+        name: 'TypeScript compilation',
+        status: 'pass',
+        message: 'No type errors',
+      };
+    } catch {
+      return {
+        name: 'TypeScript compilation',
+        status: 'warn',
+        message: 'Type errors detected',
+        remediation: 'Run: npx tsc --noEmit to see errors',
+      };
+    }
+  } catch {
+    return {
+      name: 'TypeScript compilation',
+      status: 'fail',
+      message: 'TypeScript not found',
+      remediation: 'Run: npm install',
+    };
+  }
+}
+
+export function formatCheckResults(results: CheckResult[]): string {
+  const lines: string[] = [];
+  
+  lines.push('\nüè• mk doctor ‚Äî Environment Diagnostics\n');
+  
+  for (const result of results) {
+    const icon = result.status === 'pass' ? '‚úì' : result.status === 'warn' ? '‚ö†' : '‚úó';
+    const statusColor = result.status === 'pass' ? '' : result.status === 'warn' ? ' (warning)' : ' (failed)';
+    
+    lines.push(`${icon} ${result.name}: ${result.message}${statusColor}`);
+    
+    if (result.remediation) {
+      lines.push(`  ‚Üí ${result.remediation}`);
+    }
+  }
+  
+  const passCount = results.filter(r => r.status === 'pass').length;
+  const warnCount = results.filter(r => r.status === 'warn').length;
+  const failCount = results.filter(r => r.status === 'fail').length;
+  
+  lines.push('\n' + '‚îÄ'.repeat(60));
+  lines.push(`Summary: ${passCount} passed, ${warnCount} warnings, ${failCount} failed`);
+  
+  if (failCount === 0 && warnCount === 0) {
+    lines.push('‚úì All checks passed!');
+  } else if (failCount > 0) {
+    lines.push('‚úó Some checks failed. See remediations above.');
+  } else {
+    lines.push('‚ö† Some warnings detected. Review and fix if needed.');
+  }
+  
+  return lines.join('\n');
+}
diff --git a/docs/devex/doctor.md b/docs/devex/doctor.md
index 0859ad3..e0b9047 100644
--- a/docs/devex/doctor.md
+++ b/docs/devex/doctor.md
@@ -1,594 +1,149 @@
-# mkctl Doctor ‚Äî Diagnostic Guide
+# mk doctor ‚Äî Environment Diagnostics
 
-The `mkctl doctor` command helps you diagnose common issues with mkolbol topologies and configurations. This guide covers the most common problems and how to resolve them.
+The `mk doctor` command performs comprehensive environment diagnostics to ensure your mkolbol development environment is correctly configured.
 
-## Quick Diagnostics
+## Usage
 
 ```bash
-# Run all diagnostics
-mkctl doctor
-
-# Focus on specific area
-mkctl doctor --section config      # Configuration issues
-mkctl doctor --section topology    # Running topologies
-mkctl doctor --section health      # Health check problems
-mkctl doctor --section permissions # File permissions
+mk doctor [--verbose]
 ```
 
-## Configuration Errors
+### Options
 
-### Problem: "Config file not found"
+- `--verbose` ‚Äî Show detailed output (future enhancement)
 
-**Symptom:**
-```
-Error: Config file not found: examples/configs/my-topology.yml
-```
-
-**Cause:** File path is incorrect, relative path not found, or typo in filename.
-
-**Fix:**
-```bash
-# Verify file exists
-ls -la examples/configs/my-topology.yml
-
-# Use absolute path
-mkctl run --file /absolute/path/to/config.yml
-
-# Or use pwd to construct path
-mkctl run --file $(pwd)/examples/configs/basic.yml
-
-# Check current directory
-pwd
-```
-
-### Problem: "Failed to read config"
-
-**Symptom:**
-```
-Error: Failed to read config: Could not parse YAML
-```
-
-**Cause:** YAML/JSON syntax error in configuration file.
-
-**Fix:**
-```bash
-# Validate YAML syntax
-python3 -m yaml examples/configs/my-topology.yml
-
-# Or using yq
-yq eval examples/configs/my-topology.yml
-
-# Common YAML issues:
-# - Inconsistent indentation (use 2 spaces, not tabs)
-# - Missing colons after keys
-# - Unquoted strings with special chars
-# - Extra spaces or trailing colons
-```
-
-**Example: Invalid YAML**
-```yaml
-# ‚ùå WRONG - inconsistent indentation
-nodes:
-  - id: source
-    module: TimerSource
-      params:  # Too much indentation
-        periodMs: 1000
-
-# ‚úÖ CORRECT
-nodes:
-  - id: source
-    module: TimerSource
-    params:
-      periodMs: 1000
-```
-
-### Problem: "nodes must be an array"
-
-**Symptom:**
-```
-Configuration validation failed: "nodes" must be an array
-```
-
-**Cause:** Missing `nodes` array or it's not formatted as an array.
-
-**Fix:**
-```yaml
-# ‚ùå WRONG
-nodes:
-  source:
-    module: TimerSource
-
-# ‚úÖ CORRECT
-nodes:
-  - id: source
-    module: TimerSource
-```
-
-### Problem: "Duplicate node id"
-
-**Symptom:**
-```
-Configuration validation failed: Duplicate node id 'source'
-```
-
-**Cause:** Two or more nodes have the same `id`.
-
-**Fix:**
-```yaml
-# ‚ùå WRONG
-nodes:
-  - id: processor
-    module: UppercaseTransform
-  - id: processor  # Duplicate!
-    module: ReverseTransform
-
-# ‚úÖ CORRECT
-nodes:
-  - id: uppercase
-    module: UppercaseTransform
-  - id: reverse
-    module: ReverseTransform
-```
-
-### Problem: "Connection from 'X' to non-existent node 'Y'"
-
-**Symptom:**
-```
-Connection from 'source' to non-existent node "transform" referenced in "to" does not exist
-```
-
-**Cause:** Connection references a node that doesn't exist in the nodes array.
-
-**Fix:**
-```yaml
-# ‚ùå WRONG
-nodes:
-  - id: source
-    module: TimerSource
-  - id: sink
-    module: ConsoleSink
-
-connections:
-  - from: source.output
-    to: transform.input  # 'transform' doesn't exist!
-
-# ‚úÖ CORRECT
-connections:
-  - from: source.output
-    to: sink.input
-```
-
-### Problem: "Unknown module 'SomeModule'"
-
-**Symptom:**
-```
-Configuration validation failed: Unknown module 'SomeModule'
-```
-
-**Cause:** Module name is not registered or has a typo.
-
-**Fix:**
-
-Available built-in modules:
-- **Sources**: `TimerSource`
-- **Transforms**: `UppercaseTransform`, `PipeMeterTransform`, `RateLimiterTransform`, `TeeTransform`
-- **Sinks**: `ConsoleSink`, `FilesystemSink`
-- **External**: `ExternalProcess`
-
-```yaml
-# ‚ùå WRONG
-nodes:
-  - id: source
-    module: TimerSourceModule  # Typo!
-
-# ‚úÖ CORRECT
-nodes:
-  - id: source
-    module: TimerSource
-```
-
----
-
-## Runtime Errors
-
-### Problem: "Command 'xyz' not found"
-
-**Symptom:**
-```
-Failed to start topology: Command bash not found on PATH
-```
-
-**Cause:** External command doesn't exist or isn't in `$PATH`.
-
-**Fix:**
-```bash
-# Use absolute paths for external commands
-# ‚ùå WRONG
-command: curl
-
-# ‚úÖ CORRECT (with absolute path)
-command: /usr/bin/curl
-
-# Or verify command is in PATH
-which curl
-echo $PATH
-
-# Add to PATH if needed
-export PATH="/usr/local/bin:$PATH"
-```
-
-### Problem: "Health check failed for node 'X'"
-
-**Symptom:**
-```
-Health check failed for node 'server' after 3 retries
-```
-
-**Cause:** External process didn't respond to health check (command exit non-zero or HTTP non-2xx).
-
-**Fix:**
-
-**For command-based health checks:**
-```yaml
-healthCheck:
-  type: command
-  command: "curl -f http://localhost:3000/health"  # Must exit 0
-  timeout: 5000
-  retries: 3
-```
-
-**Debugging:**
-```bash
-# Test the health check command manually
-curl -f http://localhost:3000/health
-echo $?  # Should be 0
-
-# Increase timeout if process is slow
-timeout: 10000  # 10 seconds
-
-# Increase retries for flaky services
-retries: 5
-```
-
-**For HTTP-based health checks:**
-```yaml
-healthCheck:
-  type: http
-  url: "http://localhost:3000/health"
-  timeout: 5000
-  retries: 3
-```
-
-**Debugging:**
-```bash
-# Test HTTP endpoint directly
-curl -i http://localhost:3000/health
-# Must return 2xx status (200, 201, etc.)
-
-# Check if server is actually running
-curl -v http://localhost:3000/health 2>&1 | grep "Connection refused"
-
-# If connection refused, server isn't listening yet
-```
-
-### Problem: "Topology runtime error: [message]"
-
-**Symptom:**
-```
-Failed to start topology: Module instantiation failed: [error details]
-```
+## Checks Performed
 
-**Cause:** Error during module initialization or topology execution.
-
-**Fix:**
-
-Verify:
-1. All module names are correct (registered in ModuleRegistry)
-2. All external commands are in `$PATH` or absolute paths
-3. Parameters match module expectations
-4. Ports aren't already in use (for ExternalProcess with servers)
+### 1. Node.js Version
+**Requirement**: Node.js 20 or later
 
+**Remediation**: If check fails:
 ```bash
-# Check port availability
-lsof -i :3000  # Check if port 3000 is in use
-
-# Or for multiple ports
-for port in 3000 3001 3002; do
-  lsof -i :$port && echo "Port $port is in use"
-done
-
-# Kill existing process if needed
-kill -9 $(lsof -t -i :3000)
-```
+# Using nvm
+nvm install 20
+nvm use 20
 
----
-
-## Health Check Troubleshooting
-
-### Command-Based Health Checks Not Working
-
-```yaml
-# ‚ùå WRONG - health check never succeeds
-healthCheck:
-  type: command
-  command: "echo 'checking...'"  # Always succeeds, but wrong check
-
-# ‚úÖ CORRECT - actually verify the service
-healthCheck:
-  type: command
-  command: "curl -f http://localhost:3000/health"  # Fails if service down
+# Or download from https://nodejs.org/
 ```
 
-### HTTP Health Checks Timing Out
-
-```yaml
-# Symptoms: "Health check timed out after 5000ms"
-
-# ‚úÖ Solution 1: Increase timeout
-healthCheck:
-  type: http
-  url: "http://localhost:3000/health"
-  timeout: 10000  # Give it more time
-
-# ‚úÖ Solution 2: Reduce initial startup time
-# If service takes time to start, use longer timeout + retries
-healthCheck:
-  type: http
-  url: "http://localhost:3000/health"
-  timeout: 3000
-  retries: 5  # More attempts
-
-# ‚úÖ Solution 3: Check service startup
-# Make sure service outputs to console after binding
-args:
-  - -e
-  - "require('http').createServer(...).listen(3000, () => console.log('Server ready'))"
-```
-
----
-
-## Dry-Run Validation
-
-### Using `--dry-run` to Catch Errors Early
+### 2. Package Manager
+**Requirement**: npm or pnpm installed
 
+**Remediation**: If check fails:
 ```bash
-# Validate config without running topology
-mkctl run --file my-config.yml --dry-run
-
-# Useful in CI/CD before deployment
-mkctl run --file production-config.yml --dry-run || exit 1
-
-# Check all configs before deploying
-for cfg in configs/*.yml; do
-  mkctl run --file "$cfg" --dry-run || echo "FAIL: $cfg"
-done
-```
-
-### What `--dry-run` Checks
+# pnpm (recommended)
+npm install -g pnpm
 
-‚úÖ YAML/JSON syntax
-‚úÖ Required fields (nodes, connections)
-‚úÖ No duplicate node IDs
-‚úÖ Connections reference existing nodes
-‚úÖ Module names are registered
-‚úÖ Config structure is valid
-
-‚ùå NOT checked:
-- External command availability (checked at runtime)
-- Port availability
-- File permissions
-- Health check endpoints
-
----
-
-## File Permissions
-
-### Problem: "Permission denied" when writing to file
-
-**Symptom:**
-```
-Failed to write to logs/output.log: Permission denied
+# npm comes bundled with Node.js
 ```
 
-**Cause:** FilesystemSink lacks write permissions on directory or file.
+### 3. Git Repository
+**Requirement**: Working in a Git repository (warning only)
 
-**Fix:**
+**Remediation**: If not detected:
 ```bash
-# Check current permissions
-ls -la logs/
-
-# Make directory writable
-chmod 755 logs/
-
-# Or make user the owner
-chown $USER:$USER logs/
-
-# Create directory if missing
-mkdir -p logs
-chmod 755 logs
-
-# Verify write permissions
-touch logs/test.txt && rm logs/test.txt && echo "OK"
+git init
 ```
 
-### Problem: "Cannot create directory"
+### 4. Build Status
+**Requirement**: `dist/` directory with compiled files
 
-**Symptom:**
-```
-Failed to create logs/nested/output.log: EACCES: permission denied
-```
-
-**Cause:** Parent directory or ancestor lacks permission.
-
-**Fix:**
+**Remediation**: If check fails:
 ```bash
-# Check parent directory permissions
-ls -la logs/
-ls -la logs/nested/ 2>/dev/null || echo "nested doesn't exist"
-
-# Fix: Use mkctl with proper directory
-# mkolbol creates nested directories automatically if parent is writable
-mkdir -p logs/
-chmod 755 logs/
-
-# Then FilesystemSink can create nested paths
+npm run build
 ```
 
----
-
-## Debugging Tips
-
-### Enable Verbose Logging
+### 5. Dependencies Installed
+**Requirement**: `node_modules/` directory exists
 
+**Remediation**: If check fails:
 ```bash
-# mkctl doesn't have --verbose yet, but you can:
-# 1. Check stdout for messages
-mkctl run --file config.yml 2>&1 | grep -i error
-
-# 2. Look at generated reports
-cat reports/summary.jsonl | jq '.[]' | head -20
+npm install
+# or
+pnpm install
 ```
 
-### Inspect Configuration
+### 6. TypeScript Compilation
+**Requirement**: No TypeScript type errors
 
+**Remediation**: If check fails:
 ```bash
-# Dry-run shows parsed config
-mkctl run --file config.yml --dry-run
+# See detailed errors
+npx tsc --noEmit
 
-# For complex configs, validate step-by-step
-mkctl run --file config.yml --dry-run && echo "‚úì Config valid"
+# Fix type errors in your code
+# Then rebuild
+npm run build
 ```
 
-### Check Endpoints After Run
+## Output Format
 
-```bash
-# After topology completes, inspect endpoints
-mkctl endpoints
+The command outputs a checklist with status indicators:
 
-# View as JSON for scripting
-mkctl endpoints --json | jq '.[] | {id, type, coordinates}'
-```
+- `‚úì` ‚Äî Check passed
+- `‚ö†` ‚Äî Warning (non-critical issue)
+- `‚úó` ‚Äî Check failed
 
-### Monitor Running Topology
+Each failed or warned check includes a remediation hint.
 
-```bash
-# In one terminal: run topology
-mkctl run --file config.yml --duration 60
+## Example Output
 
-# In another: watch endpoints live
-mkctl endpoints --watch
-
-# Or filter by type
-mkctl endpoints --filter type=external --watch
 ```
+üè• mk doctor ‚Äî Environment Diagnostics
 
----
-
-## Common Scenarios
-
-### Scenario 1: "Port Already in Use"
-
-```bash
-# You see: "Failed to bind to port 3000"
-
-# Find what's using the port
-lsof -i :3000
-# Result: node 12345 user 3u IPv4 0x... TCP 127.0.0.1:3000 (LISTEN)
-
-# Option A: Kill existing process
-kill -9 12345
+‚úì Node.js version: v20.12.2 (>= 20)
+‚úì Package manager: Found: npm, pnpm
+‚úì Git repository: Detected
+‚úì Build status: dist/ directory exists with compiled files
+‚úì Dependencies: node_modules/ directory exists
+‚úì TypeScript compilation: No type errors
 
-# Option B: Use different port
-# Modify your config to use a different port
-ports:
-  - 3001  # was 3000
-
-# Option C: Wait for process to exit
-sleep 5 && mkctl run --file config.yml
+‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
+Summary: 6 passed, 0 warnings, 0 failed
+‚úì All checks passed!
 ```
 
-### Scenario 2: "External Server Crashes Immediately"
-
-```bash
-# Problem: ExternalProcess exits right away
+## Exit Codes
 
-# Check:
-# 1. Is the command correct?
-command: /usr/bin/python3
-args: ["server.py"]
+- `0` ‚Äî All checks passed or only warnings
+- `1` ‚Äî One or more checks failed
 
-# 2. Does server.py exist?
-ls -la server.py
+## Integration with CI/CD
 
-# 3. Is it executable?
-chmod +x server.py
-
-# 4. Run it manually to see error
-python3 server.py
-
-# 5. Check restart limits
-restart: on-failure
-maxRestarts: 5
-```
-
-### Scenario 3: "Health Check Passes, Then Service Crashes"
+Use `mk doctor` in CI pipelines to validate environment:
 
 ```yaml
-# Problem: Health check succeeds but service dies after
-
-# Solution: Use more comprehensive health check
-healthCheck:
-  type: http
-  url: "http://localhost:3000/ready"  # Endpoint that stays valid
-  timeout: 2000
-  retries: 5
-
-# Or use command-based check that validates deeper
-healthCheck:
-  type: command
-  command: "curl http://localhost:3000/health && test -f data/ready"
+# .github/workflows/ci.yml
+- name: Environment check
+  run: npm run build && node dist/scripts/mk.js doctor
 ```
 
----
-
-## Exit Codes Reference
-
-| Code | Meaning | Fix |
-|------|---------|-----|
-| 0 | Success | No action needed |
-| 64 | Usage error (bad arguments) | Check `mkctl run --help` |
-| 65 | Config parse error | Validate YAML with `python3 -m yaml` |
-| 66 | Config file not found | Check file path exists |
-| 70 | Runtime error | Check external process, health checks, ports |
-| 130 | Interrupted (Ctrl+C) | Normal - user stopped topology |
+## Related Commands
 
----
+- `mk init` ‚Äî Initialize a new mkolbol project
+- `mk run` ‚Äî Run mkolbol topologies
+- `mk graph` ‚Äî Visualize topology graphs
 
-## When to Use Doctor
+## Troubleshooting
 
-‚úÖ **Use `mkctl doctor` when:**
-- Configuration won't parse
-- Topology fails to start
-- Health checks are timing out
-- You're not sure which module to use
-- File permissions are preventing output
-- Port conflicts are happening
-- A service is crashing during startup
+### "dist/ directory not found"
+Run `npm run build` to compile TypeScript sources.
 
-‚úÖ **Common Next Steps:**
-1. Run `mkctl doctor` for specific error
-2. Check the fix section above
-3. Validate config with `--dry-run`
-4. Test manually (run command, check port, etc.)
-5. Try again with updated config
+### "node_modules/ not found"
+Run `npm install` to install dependencies.
 
----
+### "Node.js version v18.x (< 20)"
+Upgrade to Node.js 20+ using nvm or download from nodejs.org.
 
-## Getting Help
+### TypeScript compilation warnings
+Run `npx tsc --noEmit` to see detailed type errors, then fix them in your code.
 
-- **Config Syntax**: See [mkctl Cookbook](./mkctl-cookbook.md)
-- **Health Checks**: See [Health Check Configuration](./mkctl-cookbook.md#health-checks-for-external-processes)
-- **Examples**: See `examples/configs/` directory
-- **Building Modules**: See [Authoring a Module](./authoring-a-module.md)
-- **Testing**: See [Wiring and Tests](./wiring-and-tests.md)
+## Future Enhancements
 
+Planned checks for future versions:
+- Port availability for services
+- Memory/CPU resources
+- External tool dependencies (git, docker)
+- Environment variables validation
+- Configuration file syntax
+- Network connectivity
