diff --git a/package.json b/package.json
index 471ceec..ffebe86 100644
--- a/package.json
+++ b/package.json
@@ -46,7 +46,7 @@
     "test:pty": "vitest run --pool=forks --poolOptions.forks.singleFork=true tests/wrappers/ptyServerWrapper.spec.ts tests/integration/multiModalOutput.spec.ts tests/integration/endpointsList.spec.ts tests/integration/processMode.spec.ts tests/integration/processUnix.spec.ts tests/integration/workerMode.spec.ts --reporter=./node_modules/@agent_vega/laminar/dist/src/test/reporter/jsonlReporter.js",
     "test:ci:lam": "npm run test:ci && mkdir -p reports && npm run lam -- summary > reports/LAMINAR_SUMMARY.txt && npm run lam -- trends --top 10 > reports/LAMINAR_TRENDS.txt",
     "test:pty:lam": "MK_PROCESS_EXPERIMENTAL=1 npm run test:pty && mkdir -p reports && npm run lam -- summary >> reports/LAMINAR_SUMMARY.txt && npm run lam -- trends --top 10 >> reports/LAMINAR_TRENDS.txt",
-    "lam:dogfood:ci": "npm run test:ci:lam && tsx scripts/laminar-feedback.ts",
+    "lam:dogfood:ci": "tsx scripts/dogfood-ci.ts",
     "lam:dogfood:pty": "npm run test:pty:lam && tsx scripts/laminar-feedback.ts",
     "test:watch": "vitest",
     "lam": "node node_modules/@agent_vega/laminar/dist/scripts/lam.js",
diff --git a/scripts/dogfood-ci.ts b/scripts/dogfood-ci.ts
new file mode 100644
index 0000000..62b3340
--- /dev/null
+++ b/scripts/dogfood-ci.ts
@@ -0,0 +1,86 @@
+#!/usr/bin/env tsx
+import { execSync } from 'node:child_process';
+import fs from 'node:fs';
+import path from 'node:path';
+
+function ensureDir(dir: string) {
+  fs.mkdirSync(dir, { recursive: true });
+}
+
+function runCommand(cmd: string, options = {}): string {
+  console.log(`> ${cmd}`);
+  try {
+    return execSync(cmd, {
+      encoding: 'utf8',
+      stdio: ['inherit', 'pipe', 'inherit'],
+      ...options
+    });
+  } catch (error: any) {
+    return error.stdout || '';
+  }
+}
+
+function main() {
+  const reportsDir = path.resolve('reports');
+  const feedbackDir = path.resolve('project-manager/laminar-feedback');
+  ensureDir(reportsDir);
+  ensureDir(feedbackDir);
+
+  console.log('=== Laminar Dogfood CI (Threads Lane) ===\n');
+
+  // 1. Run tests with Laminar (threads lane)
+  console.log('Step 1: Running test:ci (threads lane)...');
+  runCommand('npm run test:ci');
+
+  // 2. Generate summary
+  console.log('\nStep 2: Generating summary...');
+  const summary = runCommand('npm run lam -- summary');
+  fs.writeFileSync(path.join(reportsDir, 'LAMINAR_SUMMARY.txt'), summary, 'utf8');
+
+  // 3. Generate trends if history exists
+  console.log('\nStep 3: Generating trends...');
+  const trends = runCommand('npm run lam -- trends --top 10');
+  fs.writeFileSync(path.join(reportsDir, 'LAMINAR_TRENDS.txt'), trends, 'utf8');
+
+  // 4. Generate digest for failures (if any)
+  console.log('\nStep 4: Generating digest for failures...');
+  const indexPath = path.join(reportsDir, 'index.json');
+  if (fs.existsSync(indexPath)) {
+    try {
+      const index = JSON.parse(fs.readFileSync(indexPath, 'utf8'));
+      const hasFailures = Array.isArray(index?.artifacts) && 
+        index.artifacts.some((a: any) => a.status === 'fail');
+      
+      if (hasFailures) {
+        const digest = runCommand('npm run lam -- digest');
+        fs.writeFileSync(path.join(reportsDir, 'LAMINAR_DIGEST.txt'), digest, 'utf8');
+      } else {
+        console.log('No failures detected, skipping digest.');
+      }
+    } catch (err) {
+      console.log('Could not read index.json for digest check:', err);
+    }
+  }
+
+  // 5. Generate feedback markdown
+  console.log('\nStep 5: Generating feedback markdown...');
+  runCommand('tsx scripts/laminar-feedback.ts');
+
+  // 6. Also save to reports/LAMINAR_THREADS_FEEDBACK.txt
+  const latestFeedback = path.join(feedbackDir, 'latest.md');
+  if (fs.existsSync(latestFeedback)) {
+    const feedbackContent = fs.readFileSync(latestFeedback, 'utf8');
+    fs.writeFileSync(
+      path.join(reportsDir, 'LAMINAR_THREADS_FEEDBACK.txt'),
+      feedbackContent,
+      'utf8'
+    );
+  }
+
+  console.log('\nâœ… Dogfood CI complete!');
+  console.log(`   - Summary: ${path.join(reportsDir, 'LAMINAR_SUMMARY.txt')}`);
+  console.log(`   - Trends: ${path.join(reportsDir, 'LAMINAR_TRENDS.txt')}`);
+  console.log(`   - Feedback: ${path.join(feedbackDir, 'latest.md')}`);
+}
+
+main();
