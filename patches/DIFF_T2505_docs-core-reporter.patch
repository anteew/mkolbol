From a412af655772660d9d96b4d4b3cfb037a0173ed6 Mon Sep 17 00:00:00 2001
From: Ubuntu <ubuntu@agent-compute.small-lab.net>
Date: Sun, 12 Oct 2025 17:40:15 +0000
Subject: [PATCH] docs: T2505 artifact guarantees + index manifest spec

- Document artifact directory structure (reports/...)
- Explain per-case JSONL files and lifecycle events
- Document index.json structure and purpose
- Provide artifact guarantee statements
- Add examples of reading/using artifacts
- Update README with artifact overview

Amp-Thread-ID: https://ampcode.com/threads/T-a1da511b-b44d-4ab3-b5ac-2dffb58918be
Co-authored-by: Amp <amp@ampcode.com>
---
 README.md                                     |   10 +
 dist/test/reporter/jsonlReporter.d.ts         |    5 +
 dist/test/reporter/jsonlReporter.d.ts.map     |    2 +-
 dist/test/reporter/jsonlReporter.js           |   90 +
 dist/test/reporter/jsonlReporter.js.map       |    2 +-
 docs/testing/laminar.md                       |  206 +-
 .../DIFF_T2501_reporter-per-case-jsonl.patch  |  171 ++
 .../DIFF_T2502_reporter-index-manifest.patch  |   91 +
 patches/DIFF_T2503_cli-index-consumers.patch  |  146 ++
 patches/DIFF_T2504_tests-core-reporter.patch  |  322 ++++
 .../should_handle_backspace.jsonl             |    3 +
 .../should_handle_carriage_return.jsonl       |    3 +
 .../should_handle_color_codes__SGR_.jsonl     |    3 +
 .../should_handle_color_reset.jsonl           |    3 +
 .../should_handle_cursor_back__CUB_.jsonl     |    3 +
 .../should_handle_cursor_down__CUD_.jsonl     |    3 +
 .../should_handle_cursor_forward__CUF_.jsonl  |    3 +
 .../should_handle_cursor_up__CUU_.jsonl       |    3 +
 .../should_handle_line_clearing__EL_.jsonl    |    3 +
 .../should_handle_line_wrapping.jsonl         |    3 +
 .../should_handle_newlines.jsonl              |    3 +
 .../should_handle_screen_clearing__ED_.jsonl  |    3 +
 .../should_handle_scrolling.jsonl             |    3 +
 .../ansiParser.spec/should_handle_tabs.jsonl  |    3 +
 ...uld_parse_ANSI_cursor_movement__CUP_.jsonl |    3 +
 .../should_parse_regular_characters.jsonl     |    3 +
 .../should_contain_valid_JSONL_format.jsonl   |    3 +
 ...create_JSONL_file_for_each_test_case.jsonl |    3 +
 ...ference_between_index_and_case_files.jsonl |    3 +
 ...rate_index_json_with_valid_structure.jsonl |    3 +
 ...e_test_names_with_special_characters.jsonl |    3 +
 ..._all_case_files_in_reports_directory.jsonl |    3 +
 ...uld_have_at_least_one_artifact_entry.jsonl |    3 +
 ...ld_have_caseFile_path_for_each_entry.jsonl |    3 +
 ...e_in_JSONL_events_matching_test_name.jsonl |    3 +
 ...should_have_chronological_timestamps.jsonl |    3 +
 ...should_have_consistent_status_values.jsonl |    3 +
 ...vel_log_for_case_end_of_failed_tests.jsonl |    3 +
 ...test_count_between_index_and_summary.jsonl |    4 +
 .../should_have_summary_jsonl_file.jsonl      |    3 +
 ...hould_have_timestamps_for_all_events.jsonl |    3 +
 ...totalTests_matching_artifacts_length.jsonl |    3 +
 .../should_have_unique_case_file_paths.jsonl  |    3 +
 ...uld_have_valid_JSONL_in_summary_file.jsonl |    3 +
 .../should_have_valid_location_paths.jsonl    |    3 +
 ...id_structure_for_each_artifact_entry.jsonl |    3 +
 .../should_have_valid_timestamp_format.jsonl  |    3 +
 ...have_valid_timestamps_for_each_entry.jsonl |    3 +
 .../should_include_case_begin_event.jsonl     |    3 +
 ..._include_case_end_event_with_payload.jsonl |    3 +
 ...e_test_error_events_for_failed_tests.jsonl |    3 +
 .../should_include_test_run_event.jsonl       |    3 +
 ...nize_case_files_in_suite_directories.jsonl |    3 +
 ...reference_summary_jsonl_in_artifacts.jsonl |    3 +
 ..._against_config_modules_when_enabled.jsonl |    3 +
 ...oes_not_emit_when_on___returns_false.jsonl |    3 +
 ..._immediately_when_module_is_disabled.jsonl |    3 +
 .../emits_formatted_output_to_console.jsonl   |    3 +
 ...ts_to_console_when_module_is_enabled.jsonl |    3 +
 .../handles_emit_without_payload.jsonl        |    3 +
 .../respects_debug_level_filtering.jsonl      |    3 +
 ...rns_consistent_value_for_same_module.jsonl |    3 +
 ...eturns_false_when_config_is_disabled.jsonl |    3 +
 ...rns_false_when_module_is_not_enabled.jsonl |    3 +
 .../shouldEmit_respects_level_hierarchy.jsonl |    3 +
 ...eturns_false_when_module_is_disabled.jsonl |    3 +
 reports/demo/demo.case.jsonl                  |    4 -
 ...pplies_redact_action_to_fields.digest.json |   16 -
 .../applies_redact_action_to_fields.digest.md |   11 -
 .../applies_redact_action_to_fields.jsonl     |    3 +
 ...plies_slice_action_with_window.digest.json |   16 -
 ...applies_slice_action_with_window.digest.md |   11 -
 .../applies_slice_action_with_window.jsonl    |    3 +
 .../enforces_byte_budget.digest.json          |   16 -
 .../enforces_byte_budget.digest.md            |   11 -
 .../digest.spec/enforces_byte_budget.jsonl    |    3 +
 .../enforces_line_budget.digest.json          |   16 -
 .../enforces_line_budget.digest.md            |   11 -
 .../digest.spec/enforces_line_budget.jsonl    |    3 +
 ...st_from_synthetic_logs_with_failures.jsonl |    3 +
 .../digest.spec/handles_empty_log_file.jsonl  |    3 +
 ...ndles_events_without_optional_fields.jsonl |    3 +
 .../handles_missing_log_file.jsonl            |    3 +
 ...ifies_error-level_events_as_suspects.jsonl |    3 +
 .../includes_correct_summary_statistics.jsonl |    3 +
 ...es_events_matching_error_level.digest.json |   16 -
 ...udes_events_matching_error_level.digest.md |   11 -
 ...includes_events_matching_error_level.jsonl |    3 +
 ...s_matching_specific_event_name.digest.json |   16 -
 ...nts_matching_specific_event_name.digest.md |   11 -
 ..._events_matching_specific_event_name.jsonl |    3 +
 ..._all_events_when_within_budget.digest.json |   16 -
 ...ps_all_events_when_within_budget.digest.md |   11 -
 .../keeps_all_events_when_within_budget.jsonl |    3 +
 .../limits_suspects_to_top_5.jsonl            |    3 +
 ...ested_Go_test_failures_transparently.jsonl |    3 +
 ...ognizes_Go_test_fail_events_in_rules.jsonl |    3 +
 .../respects_priority_order.digest.json       |   16 -
 .../respects_priority_order.digest.md         |   11 -
 .../digest.spec/respects_priority_order.jsonl |    3 +
 ...empty_suspects_for_no_failure_events.jsonl |    3 +
 .../returns_null_for_passing_tests.jsonl      |    3 +
 .../returns_null_when_disabled.jsonl          |    3 +
 .../scores_correlated_events.jsonl            |    3 +
 .../scores_events_close_to_failure_time.jsonl |    3 +
 .../digest.spec/scores_failure_events.jsonl   |    3 +
 .../skips_malformed_JSON_lines.jsonl          |    3 +
 ...pports_multiple_match_criteria.digest.json |   16 -
 ...supports_multiple_match_criteria.digest.md |   11 -
 .../supports_multiple_match_criteria.jsonl    |    3 +
 ...ard_patterns_in_event_matching.digest.json |   16 -
 ...dcard_patterns_in_event_matching.digest.md |   11 -
 ..._wildcard_patterns_in_event_matching.jsonl |    3 +
 .../digest.spec/writes_valid_JSON_file.jsonl  |    3 +
 .../writes_valid_markdown_file.jsonl          |    3 +
 ...te_modules_and_register_with_hostess.jsonl |    3 +
 .../should_load_configuration.jsonl           |    3 +
 .../should_support_restartNode.jsonl          |    3 +
 ..._throw_if_up___called_without_load__.jsonl |    3 +
 ...on_restartNode_for_non-existent_node.jsonl |    3 +
 ...ld_wire_connections_via_StateManager.jsonl |    3 +
 ...uld_gracefully_shutdown_with_SIGTERM.jsonl |    3 +
 .../should_handle_environment_variables.jsonl |    3 +
 ...ould_not_restart_with__never__policy.jsonl |    3 +
 .../should_provide_process_info.jsonl         |    3 +
 ...hould_register_with_Hostess_on_spawn.jsonl |    3 +
 .../should_respect_maxRestarts_limit.jsonl    |    3 +
 ..._on_failure_with__on-failure__policy.jsonl |    3 +
 .../should_spawn_a_simple_process.jsonl       |    3 +
 ...converts_Go_events_to_Laminar_format.jsonl |    3 +
 ...es_test_fail_events_with_error_level.jsonl |    3 +
 ...est_output_events_for_output_actions.jsonl |    3 +
 ...test_pass_events_with_correct_status.jsonl |    3 +
 ...s_test_skip_events_for_skipped_tests.jsonl |    3 +
 ...es_test_start_events_for_run_actions.jsonl |    3 +
 ...es_summary_with_correct_test_results.jsonl |    3 +
 ...groups_events_by_test_case_correctly.jsonl |    3 +
 .../goIngest.spec/handles_empty_input.jsonl   |    3 +
 .../handles_malformed_JSON_lines.jsonl        |    3 +
 .../includes_artifactURI_in_summary.jsonl     |    3 +
 .../includes_duration_in_summary.jsonl        |    3 +
 .../includes_location_in_summary.jsonl        |    3 +
 .../parses_go_test_-json_fixture_data.jsonl   |    3 +
 ...es_individual_event_fields_correctly.jsonl |    3 +
 .../preserves_timestamp_ordering.jsonl        |    3 +
 ..._fixture_data_from_parsing_to_output.jsonl |    3 +
 .../validates_Laminar_event_structure.jsonl   |    3 +
 .../writes_JSONL_files_per_test_case.jsonl    |    3 +
 .../writes_summary_jsonl_file.jsonl           |    3 +
 .../writes_valid_JSONL_format.jsonl           |    3 +
 .../evicts_after_missed_heartbeats.jsonl      |    3 +
 .../heartbeat_maintains_liveness.jsonl        |    3 +
 .../marks_in-use_and_back_to_available.jsonl  |    3 +
 ...egisters_and_queries_by_capabilities.jsonl |    3 +
 reports/index.json                            | 1667 +++++++++++++++++
 ...tination_with_zero_sources_completes.jsonl |    3 +
 ...rce_with_zero_destinations_completes.jsonl |    3 +
 ..._all_source_data_reaches_destination.jsonl |    3 +
 ..._no_data_loss_with_concurrent_writes.jsonl |    3 +
 ...-merge__roundtrip_preserves_all_data.jsonl |    3 +
 ..._destinations_receive_identical_data.jsonl |    3 +
 ...der_preservation_across_destinations.jsonl |    3 +
 .../kernel.spec/connect_moves_data_1_1.jsonl  |    3 +
 ...ultiple_sources_into_one_destination.jsonl |    3 +
 ...ister_lookup_filters_by_capabilities.jsonl |    3 +
 ...it_fans_out_to_multiple_destinations.jsonl |    3 +
 .../should_append_to_existing_log_file.jsonl  |    3 +
 .../should_write_all_data_to_log_file.jsonl   |    3 +
 .../should_handle_ANSI_escape_sequences.jsonl |    3 +
 .../should_render_raw_ANSI_to_stdout.jsonl    |    3 +
 reports/router.test/initialize.jsonl          |    3 +
 .../tools_resources_list_read.jsonl           |    3 +
 ...e_and_compare_snapshots_with_masking.jsonl |    3 +
 .../should_detect_mismatches.jsonl            |    3 +
 .../should_support_custom_mask_rules.jsonl    |    3 +
 .../adds_nodes_and_emits_events.jsonl         |    3 +
 .../connects_and_emits_connected.jsonl        |    3 +
 .../exporters_produce_strings.jsonl           |    3 +
 .../split_and_merge_emit_events.jsonl         |    3 +
 ...tor_enforces_directionality_when_set.jsonl |    3 +
 reports/summary.jsonl                         |  195 +-
 .../assert_handshake_event_structure.jsonl    |    3 +
 .../round-trip_a_Buffer.jsonl                 |    3 +
 .../round-trip_a_control_frame.jsonl          |    3 +
 scripts/lam.ts                                |  111 +-
 src/test/reporter/jsonlReporter.ts            |  128 ++
 tests/laminar/coreReporter.spec.ts            |  316 ++++
 187 files changed, 3824 insertions(+), 366 deletions(-)
 create mode 100644 patches/DIFF_T2501_reporter-per-case-jsonl.patch
 create mode 100644 patches/DIFF_T2502_reporter-index-manifest.patch
 create mode 100644 patches/DIFF_T2503_cli-index-consumers.patch
 create mode 100644 patches/DIFF_T2504_tests-core-reporter.patch
 create mode 100644 reports/ansiParser.spec/should_handle_backspace.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_carriage_return.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_color_reset.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_line_wrapping.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_newlines.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_scrolling.jsonl
 create mode 100644 reports/ansiParser.spec/should_handle_tabs.jsonl
 create mode 100644 reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
 create mode 100644 reports/ansiParser.spec/should_parse_regular_characters.jsonl
 create mode 100644 reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
 create mode 100644 reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
 create mode 100644 reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
 create mode 100644 reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
 create mode 100644 reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_consistent_status_values.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_valid_location_paths.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
 create mode 100644 reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
 create mode 100644 reports/coreReporter.spec/should_include_case_begin_event.jsonl
 create mode 100644 reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
 create mode 100644 reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
 create mode 100644 reports/coreReporter.spec/should_include_test_run_event.jsonl
 create mode 100644 reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
 create mode 100644 reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
 create mode 100644 reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
 create mode 100644 reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
 create mode 100644 reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
 create mode 100644 reports/debug-api.spec/emits_formatted_output_to_console.jsonl
 create mode 100644 reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
 create mode 100644 reports/debug-api.spec/handles_emit_without_payload.jsonl
 create mode 100644 reports/debug-api.spec/respects_debug_level_filtering.jsonl
 create mode 100644 reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
 create mode 100644 reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
 create mode 100644 reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
 create mode 100644 reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
 create mode 100644 reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
 delete mode 100644 reports/demo/demo.case.jsonl
 delete mode 100644 reports/digest.spec/applies_redact_action_to_fields.digest.json
 delete mode 100644 reports/digest.spec/applies_redact_action_to_fields.digest.md
 create mode 100644 reports/digest.spec/applies_redact_action_to_fields.jsonl
 delete mode 100644 reports/digest.spec/applies_slice_action_with_window.digest.json
 delete mode 100644 reports/digest.spec/applies_slice_action_with_window.digest.md
 create mode 100644 reports/digest.spec/applies_slice_action_with_window.jsonl
 delete mode 100644 reports/digest.spec/enforces_byte_budget.digest.json
 delete mode 100644 reports/digest.spec/enforces_byte_budget.digest.md
 create mode 100644 reports/digest.spec/enforces_byte_budget.jsonl
 delete mode 100644 reports/digest.spec/enforces_line_budget.digest.json
 delete mode 100644 reports/digest.spec/enforces_line_budget.digest.md
 create mode 100644 reports/digest.spec/enforces_line_budget.jsonl
 create mode 100644 reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
 create mode 100644 reports/digest.spec/handles_empty_log_file.jsonl
 create mode 100644 reports/digest.spec/handles_events_without_optional_fields.jsonl
 create mode 100644 reports/digest.spec/handles_missing_log_file.jsonl
 create mode 100644 reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
 create mode 100644 reports/digest.spec/includes_correct_summary_statistics.jsonl
 delete mode 100644 reports/digest.spec/includes_events_matching_error_level.digest.json
 delete mode 100644 reports/digest.spec/includes_events_matching_error_level.digest.md
 create mode 100644 reports/digest.spec/includes_events_matching_error_level.jsonl
 delete mode 100644 reports/digest.spec/includes_events_matching_specific_event_name.digest.json
 delete mode 100644 reports/digest.spec/includes_events_matching_specific_event_name.digest.md
 create mode 100644 reports/digest.spec/includes_events_matching_specific_event_name.jsonl
 delete mode 100644 reports/digest.spec/keeps_all_events_when_within_budget.digest.json
 delete mode 100644 reports/digest.spec/keeps_all_events_when_within_budget.digest.md
 create mode 100644 reports/digest.spec/keeps_all_events_when_within_budget.jsonl
 create mode 100644 reports/digest.spec/limits_suspects_to_top_5.jsonl
 create mode 100644 reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
 create mode 100644 reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
 delete mode 100644 reports/digest.spec/respects_priority_order.digest.json
 delete mode 100644 reports/digest.spec/respects_priority_order.digest.md
 create mode 100644 reports/digest.spec/respects_priority_order.jsonl
 create mode 100644 reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
 create mode 100644 reports/digest.spec/returns_null_for_passing_tests.jsonl
 create mode 100644 reports/digest.spec/returns_null_when_disabled.jsonl
 create mode 100644 reports/digest.spec/scores_correlated_events.jsonl
 create mode 100644 reports/digest.spec/scores_events_close_to_failure_time.jsonl
 create mode 100644 reports/digest.spec/scores_failure_events.jsonl
 create mode 100644 reports/digest.spec/skips_malformed_JSON_lines.jsonl
 delete mode 100644 reports/digest.spec/supports_multiple_match_criteria.digest.json
 delete mode 100644 reports/digest.spec/supports_multiple_match_criteria.digest.md
 create mode 100644 reports/digest.spec/supports_multiple_match_criteria.jsonl
 delete mode 100644 reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.json
 delete mode 100644 reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.md
 create mode 100644 reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
 create mode 100644 reports/digest.spec/writes_valid_JSON_file.jsonl
 create mode 100644 reports/digest.spec/writes_valid_markdown_file.jsonl
 create mode 100644 reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
 create mode 100644 reports/executor.spec/should_load_configuration.jsonl
 create mode 100644 reports/executor.spec/should_support_restartNode.jsonl
 create mode 100644 reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
 create mode 100644 reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
 create mode 100644 reports/executor.spec/should_wire_connections_via_StateManager.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_provide_process_info.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
 create mode 100644 reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
 create mode 100644 reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
 create mode 100644 reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
 create mode 100644 reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
 create mode 100644 reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
 create mode 100644 reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
 create mode 100644 reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
 create mode 100644 reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
 create mode 100644 reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
 create mode 100644 reports/goIngest.spec/handles_empty_input.jsonl
 create mode 100644 reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
 create mode 100644 reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
 create mode 100644 reports/goIngest.spec/includes_duration_in_summary.jsonl
 create mode 100644 reports/goIngest.spec/includes_location_in_summary.jsonl
 create mode 100644 reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
 create mode 100644 reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
 create mode 100644 reports/goIngest.spec/preserves_timestamp_ordering.jsonl
 create mode 100644 reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
 create mode 100644 reports/goIngest.spec/validates_Laminar_event_structure.jsonl
 create mode 100644 reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
 create mode 100644 reports/goIngest.spec/writes_summary_jsonl_file.jsonl
 create mode 100644 reports/goIngest.spec/writes_valid_JSONL_format.jsonl
 create mode 100644 reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
 create mode 100644 reports/hostess.spec/heartbeat_maintains_liveness.jsonl
 create mode 100644 reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
 create mode 100644 reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
 create mode 100644 reports/index.json
 create mode 100644 reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
 create mode 100644 reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
 create mode 100644 reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
 create mode 100644 reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
 create mode 100644 reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
 create mode 100644 reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
 create mode 100644 reports/invariants.spec/split__order_preservation_across_destinations.jsonl
 create mode 100644 reports/kernel.spec/connect_moves_data_1_1.jsonl
 create mode 100644 reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
 create mode 100644 reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
 create mode 100644 reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
 create mode 100644 reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
 create mode 100644 reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
 create mode 100644 reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
 create mode 100644 reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
 create mode 100644 reports/router.test/initialize.jsonl
 create mode 100644 reports/router.test/tools_resources_list_read.jsonl
 create mode 100644 reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
 create mode 100644 reports/sample.spec/should_detect_mismatches.jsonl
 create mode 100644 reports/sample.spec/should_support_custom_mask_rules.jsonl
 create mode 100644 reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
 create mode 100644 reports/stateManager.spec/connects_and_emits_connected.jsonl
 create mode 100644 reports/stateManager.spec/exporters_produce_strings.jsonl
 create mode 100644 reports/stateManager.spec/split_and_merge_emit_events.jsonl
 create mode 100644 reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
 create mode 100644 reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
 create mode 100644 reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
 create mode 100644 reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
 create mode 100644 tests/laminar/coreReporter.spec.ts

diff --git a/README.md b/README.md
index 7dcc1dd..3ea655e 100644
--- a/README.md
+++ b/README.md
@@ -151,6 +151,16 @@ The project includes structured test event logging in JSONL format:
 - **Logger:** [src/logging/logger.ts](src/logging/logger.ts) provides `beginCase()`, `endCase()`, `emit()` helpers
 - **Output:** Events written to `reports/<suite>/<case>.jsonl` for test analysis and reporting
 
+**Artifact Structure:**
+```
+reports/
+├── index.json                    # Manifest of all test artifacts
+├── summary.jsonl                 # One-line summaries
+└── <suite>/<case>.jsonl         # Per-case event streams
+```
+
+See [docs/testing/laminar.md](docs/testing/laminar.md) for complete artifact structure, guarantees, and index.json specification.
+
 **Agent Integration**: When working with agents via ampcode.log, include pointers to `reports/summary.jsonl` and case files in task reports. If digests were created or updated, also include pointers to relevant digest files in `docs/digests/`. Keep console output compact; rely on report files and digests for detailed metrics, traces, and learnings.
 
 ### Debug Instrumentation
diff --git a/dist/test/reporter/jsonlReporter.d.ts b/dist/test/reporter/jsonlReporter.d.ts
index 1106e34..fffaf33 100644
--- a/dist/test/reporter/jsonlReporter.d.ts
+++ b/dist/test/reporter/jsonlReporter.d.ts
@@ -2,13 +2,18 @@ import type { File, Reporter, Vitest } from 'vitest';
 export default class JSONLReporter implements Reporter {
     private ctx;
     private summaryPath;
+    private indexPath;
     private summaryStream?;
     private processedTests;
+    private indexEntries;
+    private caseStreams;
     onInit(ctx: Vitest): void;
     onCollected(): void;
     onFinished(files?: File[]): void;
     private processFiles;
     private processTask;
     private reportTest;
+    private writePerCaseJSONL;
+    private generateIndex;
 }
 //# sourceMappingURL=jsonlReporter.d.ts.map
\ No newline at end of file
diff --git a/dist/test/reporter/jsonlReporter.d.ts.map b/dist/test/reporter/jsonlReporter.d.ts.map
index 6e0a5a3..e3d2b8b 100644
--- a/dist/test/reporter/jsonlReporter.d.ts.map
+++ b/dist/test/reporter/jsonlReporter.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"jsonlReporter.d.ts","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAQ,MAAM,EAAE,MAAM,QAAQ,CAAC;AAU3D,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,QAAQ;IACpD,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,WAAW,CAA2B;IAC9C,OAAO,CAAC,aAAa,CAAC,CAAiB;IACvC,OAAO,CAAC,cAAc,CAAqB;IAE3C,MAAM,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;IAUzB,WAAW,IAAI,IAAI;IAKnB,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,IAAI;IAShC,OAAO,CAAC,YAAY;IAMpB,OAAO,CAAC,WAAW;IAgBnB,OAAO,CAAC,UAAU;CAqCnB"}
\ No newline at end of file
+{"version":3,"file":"jsonlReporter.d.ts","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAQ,MAAM,EAAE,MAAM,QAAQ,CAAC;AA6B3D,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,QAAQ;IACpD,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,WAAW,CAA2B;IAC9C,OAAO,CAAC,SAAS,CAAwB;IACzC,OAAO,CAAC,aAAa,CAAC,CAAiB;IACvC,OAAO,CAAC,cAAc,CAAqB;IAC3C,OAAO,CAAC,YAAY,CAA4B;IAChD,OAAO,CAAC,WAAW,CAAqC;IAExD,MAAM,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;IAWzB,WAAW,IAAI,IAAI;IAKnB,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,IAAI;IAehC,OAAO,CAAC,YAAY;IAMpB,OAAO,CAAC,WAAW;IAgBnB,OAAO,CAAC,UAAU;IAyDlB,OAAO,CAAC,iBAAiB;IAsEzB,OAAO,CAAC,aAAa;CAStB"}
\ No newline at end of file
diff --git a/dist/test/reporter/jsonlReporter.js b/dist/test/reporter/jsonlReporter.js
index 27870ad..efb604e 100644
--- a/dist/test/reporter/jsonlReporter.js
+++ b/dist/test/reporter/jsonlReporter.js
@@ -3,8 +3,11 @@ import * as path from 'path';
 export default class JSONLReporter {
     ctx;
     summaryPath = 'reports/summary.jsonl';
+    indexPath = 'reports/index.json';
     summaryStream;
     processedTests = new Set();
+    indexEntries = [];
+    caseStreams = new Map();
     onInit(ctx) {
         this.ctx = ctx;
         const dir = path.dirname(this.summaryPath);
@@ -13,6 +16,7 @@ export default class JSONLReporter {
             fs.unlinkSync(this.summaryPath);
         }
         this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
+        this.indexEntries = [];
     }
     onCollected() {
         const files = this.ctx.state.getFiles();
@@ -25,6 +29,12 @@ export default class JSONLReporter {
         if (this.summaryStream) {
             this.summaryStream.end();
         }
+        // Close all per-case streams
+        for (const stream of this.caseStreams.values()) {
+            stream.end();
+        }
+        this.caseStreams.clear();
+        this.generateIndex();
     }
     processFiles(files) {
         for (const file of files) {
@@ -61,6 +71,8 @@ export default class JSONLReporter {
         const suiteName = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
         const caseName = task.name.replace(/[^a-zA-Z0-9-_]/g, '_');
         const artifactURI = `reports/${suiteName}/${caseName}.jsonl`;
+        // Write per-case JSONL file with test lifecycle events
+        this.writePerCaseJSONL(artifactURI, task.name, state, duration, result.errors);
         const summary = {
             status: state,
             duration,
@@ -73,6 +85,84 @@ export default class JSONLReporter {
         if (this.summaryStream) {
             this.summaryStream.write(JSON.stringify(summary) + '\n');
         }
+        const suitePath = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
+        const digestPath = `reports/${suitePath}/digest.jsonl`;
+        this.indexEntries.push({
+            testName: task.name,
+            status: state,
+            duration,
+            location,
+            timestamp: new Date().toISOString(),
+            artifacts: {
+                summary: this.summaryPath,
+                caseFile: artifactURI,
+                digestFile: fs.existsSync(digestPath) ? digestPath : undefined,
+            },
+        });
+    }
+    writePerCaseJSONL(artifactPath, caseName, state, duration, errors) {
+        const dir = path.dirname(artifactPath);
+        fs.mkdirSync(dir, { recursive: true });
+        // Remove existing file if it exists
+        if (fs.existsSync(artifactPath)) {
+            fs.unlinkSync(artifactPath);
+        }
+        const stream = fs.createWriteStream(artifactPath, { flags: 'a' });
+        const ts = Date.now();
+        // Write test lifecycle events
+        // 1. Test begin event
+        stream.write(JSON.stringify({
+            ts,
+            lvl: 'info',
+            case: caseName,
+            phase: 'setup',
+            evt: 'case.begin'
+        }) + '\n');
+        // 2. Test execution event
+        stream.write(JSON.stringify({
+            ts: ts + 1,
+            lvl: 'info',
+            case: caseName,
+            phase: 'execution',
+            evt: 'test.run'
+        }) + '\n');
+        // 3. If there are errors, write error events
+        if (errors && errors.length > 0) {
+            errors.forEach((error, idx) => {
+                stream.write(JSON.stringify({
+                    ts: ts + 2 + idx,
+                    lvl: 'error',
+                    case: caseName,
+                    phase: 'execution',
+                    evt: 'test.error',
+                    payload: {
+                        message: error.message || String(error),
+                        stack: error.stack
+                    }
+                }) + '\n');
+            });
+        }
+        // 4. Test end event with result
+        stream.write(JSON.stringify({
+            ts: ts + 2 + (errors?.length || 0),
+            lvl: state === 'fail' ? 'error' : 'info',
+            case: caseName,
+            phase: 'teardown',
+            evt: 'case.end',
+            payload: {
+                duration,
+                status: state === 'pass' ? 'passed' : state === 'fail' ? 'failed' : 'skipped'
+            }
+        }) + '\n');
+        stream.end();
+    }
+    generateIndex() {
+        const index = {
+            generated: new Date().toISOString(),
+            totalTests: this.indexEntries.length,
+            artifacts: this.indexEntries,
+        };
+        fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
     }
 }
 //# sourceMappingURL=jsonlReporter.js.map
\ No newline at end of file
diff --git a/dist/test/reporter/jsonlReporter.js.map b/dist/test/reporter/jsonlReporter.js.map
index 6ae4b61..80b792f 100644
--- a/dist/test/reporter/jsonlReporter.js.map
+++ b/dist/test/reporter/jsonlReporter.js.map
@@ -1 +1 @@
-{"version":3,"file":"jsonlReporter.js","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAW7B,MAAM,CAAC,OAAO,OAAO,aAAa;IACxB,GAAG,CAAU;IACb,WAAW,GAAG,uBAAuB,CAAC;IACtC,aAAa,CAAkB;IAC/B,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;IAE3C,MAAM,CAAC,GAAW;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3C,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YACpC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,WAAW;QACT,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,KAAc;QACvB,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAC3B,CAAC;IACH,CAAC;IAEO,YAAY,CAAC,KAAa;QAChC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAEO,WAAW,CAAC,IAAU;QAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YAC/C,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,IAAI,OAAO,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACjD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;IACH,CAAC;IAEO,UAAU,CAAC,IAAU;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAO,CAAC;QAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAE3B,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,EAAE,CAAC;YAC7D,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAEnF,MAAM,MAAM,GAAG,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACrE,MAAM,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACzF,MAAM,KAAK,GAAG,SAAS,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAEjF,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/F,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,WAAW,SAAS,IAAI,QAAQ,QAAQ,CAAC;QAE7D,MAAM,OAAO,GAAgB;YAC3B,MAAM,EAAE,KAAK;YACb,QAAQ;YACR,QAAQ;YACR,WAAW;SACZ,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9C,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5E,CAAC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3D,CAAC;IACH,CAAC;CACF"}
\ No newline at end of file
+{"version":3,"file":"jsonlReporter.js","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AA8B7B,MAAM,CAAC,OAAO,OAAO,aAAa;IACxB,GAAG,CAAU;IACb,WAAW,GAAG,uBAAuB,CAAC;IACtC,SAAS,GAAG,oBAAoB,CAAC;IACjC,aAAa,CAAkB;IAC/B,cAAc,GAAG,IAAI,GAAG,EAAU,CAAC;IACnC,YAAY,GAAyB,EAAE,CAAC;IACxC,WAAW,GAAG,IAAI,GAAG,EAA0B,CAAC;IAExD,MAAM,CAAC,GAAW;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3C,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACvC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YACpC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IACzB,CAAC;IAED,WAAW;QACT,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QACxC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED,UAAU,CAAC,KAAc;QACvB,IAAI,KAAK,EAAE,CAAC;YACV,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;QACD,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;QAC3B,CAAC;QACD,6BAA6B;QAC7B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/C,MAAM,CAAC,GAAG,EAAE,CAAC;QACf,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEO,YAAY,CAAC,KAAa;QAChC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAEO,WAAW,CAAC,IAAU;QAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,CAAC;YAC/C,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBACrC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;QACH,CAAC;QAED,IAAI,OAAO,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YACjD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBAC/B,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC;QACH,CAAC;IACH,CAAC;IAEO,UAAU,CAAC,IAAU;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAO,CAAC;QAC5B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAE3B,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,EAAE,CAAC;YAC7D,OAAO;QACT,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;QACtC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAEnF,MAAM,MAAM,GAAG,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QACrE,MAAM,KAAK,GAAG,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QACzF,MAAM,KAAK,GAAG,SAAS,CAAC;QAExB,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAEjF,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/F,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,WAAW,SAAS,IAAI,QAAQ,QAAQ,CAAC;QAE7D,uDAAuD;QACvD,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;QAE/E,MAAM,OAAO,GAAgB;YAC3B,MAAM,EAAE,KAAK;YACb,QAAQ;YACR,QAAQ;YACR,WAAW;SACZ,CAAC;QAEF,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9C,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5E,CAAC;QAED,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC/F,MAAM,UAAU,GAAG,WAAW,SAAS,eAAe,CAAC;QAEvD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACrB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,MAAM,EAAE,KAAK;YACb,QAAQ;YACR,QAAQ;YACR,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,SAAS,EAAE;gBACT,OAAO,EAAE,IAAI,CAAC,WAAW;gBACzB,QAAQ,EAAE,WAAW;gBACrB,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;aAC/D;SACF,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CACvB,YAAoB,EACpB,QAAgB,EAChB,KAA+B,EAC/B,QAAgB,EAChB,MAAc;QAEd,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACvC,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAEvC,oCAAoC;QACpC,IAAI,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;YAChC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC;QAED,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;QAClE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEtB,8BAA8B;QAC9B,sBAAsB;QACtB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,EAAE;YACF,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,OAAO;YACd,GAAG,EAAE,YAAY;SAClB,CAAC,GAAG,IAAI,CAAC,CAAC;QAEX,0BAA0B;QAC1B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,EAAE,EAAE,EAAE,GAAG,CAAC;YACV,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,WAAW;YAClB,GAAG,EAAE,UAAU;SAChB,CAAC,GAAG,IAAI,CAAC,CAAC;QAEX,6CAA6C;QAC7C,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAChC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;gBAC5B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;oBAC1B,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,GAAG;oBAChB,GAAG,EAAE,OAAO;oBACZ,IAAI,EAAE,QAAQ;oBACd,KAAK,EAAE,WAAW;oBAClB,GAAG,EAAE,YAAY;oBACjB,OAAO,EAAE;wBACP,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,CAAC;wBACvC,KAAK,EAAE,KAAK,CAAC,KAAK;qBACnB;iBACF,CAAC,GAAG,IAAI,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;QACL,CAAC;QAED,gCAAgC;QAChC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1B,EAAE,EAAE,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC;YAClC,GAAG,EAAE,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM;YACxC,IAAI,EAAE,QAAQ;YACd,KAAK,EAAE,UAAU;YACjB,GAAG,EAAE,UAAU;YACf,OAAO,EAAE;gBACP,QAAQ;gBACR,MAAM,EAAE,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;aAC9E;SACF,CAAC,GAAG,IAAI,CAAC,CAAC;QAEX,MAAM,CAAC,GAAG,EAAE,CAAC;IACf,CAAC;IAEO,aAAa;QACnB,MAAM,KAAK,GAAkB;YAC3B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,UAAU,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM;YACpC,SAAS,EAAE,IAAI,CAAC,YAAY;SAC7B,CAAC;QAEF,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACnE,CAAC;CACF"}
\ No newline at end of file
diff --git a/docs/testing/laminar.md b/docs/testing/laminar.md
index b63a865..81d8dad 100644
--- a/docs/testing/laminar.md
+++ b/docs/testing/laminar.md
@@ -23,9 +23,209 @@ Every event is a single JSON object per line with stable keys:
 - `payload`: object (domain‑specific)
 
 ## Artifacts & Layout
-- `reports/summary.jsonl` — one line per test (status, duration, pointers)
-- `reports/<suite>/<case>.jsonl` — event stream for the case
-- `reports/<suite>/<case>.snap/` — optional golden snapshots (transcripts)
+
+### Directory Structure
+```
+reports/
+├── index.json                          # Manifest of all test artifacts
+├── summary.jsonl                       # One-line summaries (status, duration, URIs)
+└── <suite>/                            # Per test-suite directories
+    ├── <case>.jsonl                    # Event stream for each test case
+    ├── <case>.digest.json              # Structured digest (on failure)
+    ├── <case>.digest.md                # Human-readable digest (on failure)
+    └── <case>.snap/                    # Optional golden snapshots
+```
+
+### Core Files
+
+**`reports/index.json`** — Artifact manifest with cross-references:
+- Generated on test completion
+- Maps each test to its artifacts
+- Provides timestamp, status, location metadata
+- Enables discovery of all test outputs
+
+**`reports/summary.jsonl`** — JSONL stream with one entry per test:
+- Test status (pass/fail/skip)
+- Duration in milliseconds
+- Source location (file:line)
+- Artifact URI pointer
+- Error message (if failed)
+
+**`reports/<suite>/<case>.jsonl`** — Per-case event stream:
+- Test lifecycle events (begin → run → end)
+- Error events with stack traces (on failure)
+- Debug events (if `LAMINAR_DEBUG=1`)
+- Uses standard event envelope schema
+
+### index.json Structure
+
+The index manifest provides a complete catalog of test artifacts:
+
+```json
+{
+  "generated": "2025-10-12T17:37:43.104Z",
+  "totalTests": 151,
+  "artifacts": [
+    {
+      "testName": "connect moves data 1:1",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/kernel.spec.ts:45",
+      "timestamp": "2025-10-12T17:37:41.027Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/kernel.spec/connect_moves_data_1_1.jsonl",
+        "digestFile": "reports/kernel.spec/connect_moves_data_1_1.digest.json"
+      }
+    }
+  ]
+}
+```
+
+**Fields:**
+- `generated`: ISO 8601 timestamp when index was created
+- `totalTests`: Count of test cases (matches `artifacts.length`)
+- `artifacts[]`: Array of test artifact entries
+
+**Per-artifact entry:**
+- `testName`: Human-readable test name
+- `status`: 'pass' | 'fail' | 'skip'
+- `duration`: Execution time in milliseconds
+- `location`: Source file path with line number
+- `timestamp`: ISO 8601 timestamp when test completed
+- `artifacts.summary`: Path to summary.jsonl (always present)
+- `artifacts.caseFile`: Path to per-case JSONL (always present)
+- `artifacts.digestFile`: Path to digest (only if failed and digest generated)
+
+### Per-Case JSONL Lifecycle
+
+Every test case JSONL file contains a predictable event sequence:
+
+**1. Test Begin (`case.begin`)**
+```json
+{
+  "ts": 1760290661027,
+  "lvl": "info",
+  "case": "connect moves data 1:1",
+  "phase": "setup",
+  "evt": "case.begin"
+}
+```
+
+**2. Test Execution (`test.run`)**
+```json
+{
+  "ts": 1760290661028,
+  "lvl": "info",
+  "case": "connect moves data 1:1",
+  "phase": "execution",
+  "evt": "test.run"
+}
+```
+
+**3. Error Events (if test failed)**
+```json
+{
+  "ts": 1760290661029,
+  "lvl": "error",
+  "case": "topology rewire",
+  "phase": "execution",
+  "evt": "test.error",
+  "payload": {
+    "message": "Expected value to be 42, got 40",
+    "stack": "Error: ...\n  at tests/topology.spec.ts:61:5"
+  }
+}
+```
+
+**4. Test End (`case.end`)**
+```json
+{
+  "ts": 1760290661029,
+  "lvl": "info",
+  "case": "connect moves data 1:1",
+  "phase": "teardown",
+  "evt": "case.end",
+  "payload": {
+    "duration": 6,
+    "status": "passed"
+  }
+}
+```
+
+**Note:** Failed tests have `"lvl": "error"` and `"status": "failed"` in the `case.end` event.
+
+### Artifact Guarantees
+
+Laminar guarantees the following invariants for all test runs:
+
+**✓ Always Present:**
+- `reports/index.json` — exists after any test run
+- `reports/summary.jsonl` — exists after any test run
+- `reports/<suite>/<case>.jsonl` — exists for every test case
+- `case.begin` event — first event in every case JSONL
+- `case.end` event — last event in every case JSONL
+
+**✓ Chronological Ordering:**
+- Timestamps (`ts`) are monotonically increasing within each case JSONL
+- Events appear in execution order (setup → execution → teardown)
+
+**✓ Cross-References:**
+- `index.json` entries reference valid `caseFile` paths
+- All `caseFile` paths exist on disk
+- `summary.jsonl` `artifactURI` matches `index.json` `caseFile`
+
+**✓ Failed Test Additions:**
+- `test.error` events appear before `case.end` (if errors exist)
+- `case.end` has `"lvl": "error"` for failed tests
+- `case.end.payload.status` is 'failed' for failed tests
+
+**⚠ Conditional:**
+- `digestFile` — only present if test failed AND digests were generated
+- Debug events — only present if `LAMINAR_DEBUG=1` was set
+
+### Reading Artifacts (Examples)
+
+**List all test results:**
+```typescript
+import * as fs from 'fs';
+
+const index = JSON.parse(fs.readFileSync('reports/index.json', 'utf-8'));
+index.artifacts.forEach(test => {
+  console.log(`${test.status.toUpperCase()} ${test.duration}ms ${test.testName}`);
+});
+```
+
+**Find failures:**
+```typescript
+const failures = index.artifacts.filter(t => t.status === 'fail');
+failures.forEach(fail => {
+  console.log(`FAIL: ${fail.testName} → ${fail.artifacts.caseFile}`);
+});
+```
+
+**Read case events:**
+```typescript
+const caseEvents = fs.readFileSync('reports/kernel.spec/connect_moves_data_1_1.jsonl', 'utf-8')
+  .trim()
+  .split('\n')
+  .map(line => JSON.parse(line));
+
+const errors = caseEvents.filter(e => e.lvl === 'error');
+console.log(`Found ${errors.length} error events`);
+```
+
+**Query with logq CLI:**
+```bash
+# Show all failures
+logq lvl=error reports/summary.jsonl
+
+# Show events around correlation ID
+logq --around corr=abc123 --window 10 reports/kernel.spec/connect_moves_data_1_1.jsonl
+
+# Find specific event types
+logq evt=test.error reports/**/*.jsonl
+```
 
 ## CLI: logq
 A tiny CLI to slice/filter JSONL by fields and windows.
diff --git a/patches/DIFF_T2501_reporter-per-case-jsonl.patch b/patches/DIFF_T2501_reporter-per-case-jsonl.patch
new file mode 100644
index 0000000..bea976f
--- /dev/null
+++ b/patches/DIFF_T2501_reporter-per-case-jsonl.patch
@@ -0,0 +1,171 @@
+diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
+index cc304e2..5cbcd5a 100644
+--- a/src/test/reporter/jsonlReporter.ts
++++ b/src/test/reporter/jsonlReporter.ts
+@@ -10,11 +10,33 @@ interface TestSummary {
+   error?: string;
+ }
+ 
++interface ArtifactIndexEntry {
++  testName: string;
++  status: 'pass' | 'fail' | 'skip';
++  duration: number;
++  location: string;
++  timestamp: string;
++  artifacts: {
++    summary: string;
++    caseFile?: string;
++    digestFile?: string;
++  };
++}
++
++interface ArtifactIndex {
++  generated: string;
++  totalTests: number;
++  artifacts: ArtifactIndexEntry[];
++}
++
+ export default class JSONLReporter implements Reporter {
+   private ctx!: Vitest;
+   private summaryPath = 'reports/summary.jsonl';
++  private indexPath = 'reports/index.json';
+   private summaryStream?: fs.WriteStream;
+   private processedTests = new Set<string>();
++  private indexEntries: ArtifactIndexEntry[] = [];
++  private caseStreams = new Map<string, fs.WriteStream>();
+ 
+   onInit(ctx: Vitest): void {
+     this.ctx = ctx;
+@@ -24,6 +46,7 @@ export default class JSONLReporter implements Reporter {
+       fs.unlinkSync(this.summaryPath);
+     }
+     this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
++    this.indexEntries = [];
+   }
+ 
+   onCollected(): void {
+@@ -38,6 +61,12 @@ export default class JSONLReporter implements Reporter {
+     if (this.summaryStream) {
+       this.summaryStream.end();
+     }
++    // Close all per-case streams
++    for (const stream of this.caseStreams.values()) {
++      stream.end();
++    }
++    this.caseStreams.clear();
++    this.generateIndex();
+   }
+ 
+   private processFiles(files: File[]): void {
+@@ -84,6 +113,9 @@ export default class JSONLReporter implements Reporter {
+     const caseName = task.name.replace(/[^a-zA-Z0-9-_]/g, '_');
+     const artifactURI = `reports/${suiteName}/${caseName}.jsonl`;
+ 
++    // Write per-case JSONL file with test lifecycle events
++    this.writePerCaseJSONL(artifactURI, task.name, state, duration, result.errors);
++
+     const summary: TestSummary = {
+       status: state,
+       duration,
+@@ -98,5 +130,101 @@ export default class JSONLReporter implements Reporter {
+     if (this.summaryStream) {
+       this.summaryStream.write(JSON.stringify(summary) + '\n');
+     }
++
++    const suitePath = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
++    const digestPath = `reports/${suitePath}/digest.jsonl`;
++    
++    this.indexEntries.push({
++      testName: task.name,
++      status: state,
++      duration,
++      location,
++      timestamp: new Date().toISOString(),
++      artifacts: {
++        summary: this.summaryPath,
++        caseFile: artifactURI,
++        digestFile: fs.existsSync(digestPath) ? digestPath : undefined,
++      },
++    });
++  }
++
++  private writePerCaseJSONL(
++    artifactPath: string,
++    caseName: string,
++    state: 'pass' | 'fail' | 'skip',
++    duration: number,
++    errors?: any[]
++  ): void {
++    const dir = path.dirname(artifactPath);
++    fs.mkdirSync(dir, { recursive: true });
++
++    // Remove existing file if it exists
++    if (fs.existsSync(artifactPath)) {
++      fs.unlinkSync(artifactPath);
++    }
++
++    const stream = fs.createWriteStream(artifactPath, { flags: 'a' });
++    const ts = Date.now();
++
++    // Write test lifecycle events
++    // 1. Test begin event
++    stream.write(JSON.stringify({
++      ts,
++      lvl: 'info',
++      case: caseName,
++      phase: 'setup',
++      evt: 'case.begin'
++    }) + '\n');
++
++    // 2. Test execution event
++    stream.write(JSON.stringify({
++      ts: ts + 1,
++      lvl: 'info',
++      case: caseName,
++      phase: 'execution',
++      evt: 'test.run'
++    }) + '\n');
++
++    // 3. If there are errors, write error events
++    if (errors && errors.length > 0) {
++      errors.forEach((error, idx) => {
++        stream.write(JSON.stringify({
++          ts: ts + 2 + idx,
++          lvl: 'error',
++          case: caseName,
++          phase: 'execution',
++          evt: 'test.error',
++          payload: {
++            message: error.message || String(error),
++            stack: error.stack
++          }
++        }) + '\n');
++      });
++    }
++
++    // 4. Test end event with result
++    stream.write(JSON.stringify({
++      ts: ts + 2 + (errors?.length || 0),
++      lvl: state === 'fail' ? 'error' : 'info',
++      case: caseName,
++      phase: 'teardown',
++      evt: 'case.end',
++      payload: {
++        duration,
++        status: state === 'pass' ? 'passed' : state === 'fail' ? 'failed' : 'skipped'
++      }
++    }) + '\n');
++
++    stream.end();
++  }
++
++  private generateIndex(): void {
++    const index: ArtifactIndex = {
++      generated: new Date().toISOString(),
++      totalTests: this.indexEntries.length,
++      artifacts: this.indexEntries,
++    };
++
++    fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
+   }
+ }
diff --git a/patches/DIFF_T2502_reporter-index-manifest.patch b/patches/DIFF_T2502_reporter-index-manifest.patch
new file mode 100644
index 0000000..be7a2a0
--- /dev/null
+++ b/patches/DIFF_T2502_reporter-index-manifest.patch
@@ -0,0 +1,91 @@
+diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
+index cc304e2..9471fe0 100644
+--- a/src/test/reporter/jsonlReporter.ts
++++ b/src/test/reporter/jsonlReporter.ts
+@@ -10,11 +10,33 @@ interface TestSummary {
+   error?: string;
+ }
+ 
++interface ArtifactIndexEntry {
++  testName: string;
++  status: 'pass' | 'fail' | 'skip';
++  duration: number;
++  location: string;
++  timestamp: string;
++  artifacts: {
++    summary: string;
++    caseFile?: string;
++    digestFile?: string;
++  };
++}
++
++interface ArtifactIndex {
++  generated: string;
++  totalTests: number;
++  artifacts: ArtifactIndexEntry[];
++}
++
+ export default class JSONLReporter implements Reporter {
+   private ctx!: Vitest;
+   private summaryPath = 'reports/summary.jsonl';
++  private indexPath = 'reports/index.json';
+   private summaryStream?: fs.WriteStream;
+   private processedTests = new Set<string>();
++  private indexEntries: ArtifactIndexEntry[] = [];
++  private caseStreams = new Map<string, fs.WriteStream>();
+ 
+   onInit(ctx: Vitest): void {
+     this.ctx = ctx;
+@@ -24,6 +46,7 @@ export default class JSONLReporter implements Reporter {
+       fs.unlinkSync(this.summaryPath);
+     }
+     this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
++    this.indexEntries = [];
+   }
+ 
+   onCollected(): void {
+@@ -38,6 +61,12 @@ export default class JSONLReporter implements Reporter {
+     if (this.summaryStream) {
+       this.summaryStream.end();
+     }
++    // Close all per-case streams
++    for (const stream of this.caseStreams.values()) {
++      stream.end();
++    }
++    this.caseStreams.clear();
++    this.generateIndex();
+   }
+ 
+   private processFiles(files: File[]): void {
+@@ -98,5 +127,31 @@ export default class JSONLReporter implements Reporter {
+     if (this.summaryStream) {
+       this.summaryStream.write(JSON.stringify(summary) + '\n');
+     }
++
++    const suitePath = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
++    const digestPath = `reports/${suitePath}/digest.jsonl`;
++    
++    this.indexEntries.push({
++      testName: task.name,
++      status: state,
++      duration,
++      location,
++      timestamp: new Date().toISOString(),
++      artifacts: {
++        summary: this.summaryPath,
++        caseFile: artifactURI,
++        digestFile: fs.existsSync(digestPath) ? digestPath : undefined,
++      },
++    });
++  }
++
++  private generateIndex(): void {
++    const index: ArtifactIndex = {
++      generated: new Date().toISOString(),
++      totalTests: this.indexEntries.length,
++      artifacts: this.indexEntries,
++    };
++
++    fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
+   }
+ }
diff --git a/patches/DIFF_T2503_cli-index-consumers.patch b/patches/DIFF_T2503_cli-index-consumers.patch
new file mode 100644
index 0000000..12bf06f
--- /dev/null
+++ b/patches/DIFF_T2503_cli-index-consumers.patch
@@ -0,0 +1,146 @@
+diff --git a/scripts/lam.ts b/scripts/lam.ts
+index ac72ec5..3b96327 100644
+--- a/scripts/lam.ts
++++ b/scripts/lam.ts
+@@ -34,11 +34,49 @@ Examples:
+ }
+ 
+ function readSummary(): any[] {
++  const indexPath = 'reports/index.json';
++  if (fs.existsSync(indexPath)) {
++    try {
++      const index = JSON.parse(fs.readFileSync(indexPath, 'utf-8'));
++      return index.artifacts || [];
++    } catch (err) {
++      console.error('Failed to parse index.json, falling back to summary.jsonl');
++    }
++  }
++  
+   const p = 'reports/summary.jsonl';
+   if (!fs.existsSync(p)) return [];
+   return fs.readFileSync(p, 'utf-8').trim().split(/\n+/).map(l => { try { return JSON.parse(l); } catch { return undefined; } }).filter(Boolean);
+ }
+ 
++function findTestInIndex(caseId: string): any {
++  const indexPath = 'reports/index.json';
++  if (!fs.existsSync(indexPath)) return null;
++  
++  try {
++    const index = JSON.parse(fs.readFileSync(indexPath, 'utf-8'));
++    const artifacts = index.artifacts || [];
++    
++    // Normalize caseId: suite/test_name format
++    const parts = caseId.split('/');
++    if (parts.length !== 2) return null;
++    
++    const [suite, testName] = parts;
++    const normalized = testName.replace(/_/g, ' ');
++    
++    return artifacts.find((a: any) => {
++      const entryLocation = a.location || '';
++      const entryTestName = a.testName || '';
++      return entryLocation.includes(suite) && (
++        entryTestName === normalized ||
++        entryTestName.replace(/\s+/g, '_') === testName
++      );
++    });
++  } catch (err) {
++    return null;
++  }
++}
++
+ async function main() {
+   const [,, cmd, ...rest] = process.argv;
+   const args = new Map<string,string|true>();
+@@ -80,7 +118,28 @@ async function main() {
+       const entries = readSummary();
+       if (!entries.length) { console.log('No summary found. Run `lam run` first.'); break; }
+       for (const e of entries) {
+-        console.log(`${e.status.toUpperCase()} ${e.duration}ms ${e.location} → ${e.artifactURI||''}`);
++        const status = (e.status || 'unknown').toUpperCase();
++        const duration = e.duration || 0;
++        const location = e.location || '';
++        const testName = e.testName || '';
++        
++        // Check for digest file
++        let digestLink = '';
++        if (e.artifacts?.digestFile && fs.existsSync(e.artifacts.digestFile)) {
++          digestLink = ` [digest: ${e.artifacts.digestFile}]`;
++        } else {
++          // Try to find digest file based on caseFile path
++          const caseFile = e.artifacts?.caseFile || e.artifactURI || '';
++          if (caseFile.endsWith('.jsonl')) {
++            const digestPath = caseFile.replace('.jsonl', '.digest.md');
++            if (fs.existsSync(digestPath)) {
++              digestLink = ` [digest: ${digestPath}]`;
++            }
++          }
++        }
++        
++        const artifactURI = e.artifactURI || e.artifacts?.caseFile || '';
++        console.log(`${status} ${duration}ms ${location} → ${artifactURI}${digestLink}`);
+       }
+       break;
+     }
+@@ -90,14 +149,58 @@ async function main() {
+       const around = (args.get('around') as string) || 'assert.fail';
+       const window = (args.get('window') as string) || '50';
+       
+-      const digestPath = `reports/${caseId}.digest.md`;
+-      if (fs.existsSync(digestPath)) {
++      // Find test in index.json to get digest path and case file
++      const testEntry = findTestInIndex(caseId);
++      let digestPath: string | undefined;
++      let caseFile: string | undefined;
++      
++      if (testEntry?.artifacts?.caseFile) {
++        caseFile = testEntry.artifacts.caseFile;
++      } else {
++        // Fallback: construct from caseId
++        const parts = caseId.split('/');
++        if (parts.length === 2) {
++          const [suite, test] = parts;
++          caseFile = `reports/${suite}/${test}.jsonl`;
++        }
++      }
++      
++      // Try to find digest file
++      if (testEntry?.artifacts?.digestFile && fs.existsSync(testEntry.artifacts.digestFile)) {
++        digestPath = testEntry.artifacts.digestFile;
++      } else if (caseFile && caseFile.endsWith('.jsonl')) {
++        // Derive digest path from case file
++        const derived = caseFile.replace('.jsonl', '.digest.md');
++        if (fs.existsSync(derived)) {
++          digestPath = derived;
++        }
++      }
++      
++      if (!digestPath) {
++        // Final fallback: try common patterns
++        const parts = caseId.split('/');
++        if (parts.length === 2) {
++          const [suite, test] = parts;
++          const candidates = [
++            `reports/${suite}/${test}.digest.md`,
++            `reports/${caseId}.digest.md`,
++          ];
++          digestPath = candidates.find(p => fs.existsSync(p));
++        }
++      }
++      
++      if (digestPath && fs.existsSync(digestPath)) {
+         console.log('=== DIGEST ===');
+         console.log(fs.readFileSync(digestPath, 'utf-8'));
+         console.log('\n=== FULL LOG ===');
+       }
+       
+-      sh('npm', ['run','logq','--','case', caseId, '--around', around, '--window', window]);
++      if (!caseFile || !fs.existsSync(caseFile)) {
++        console.error(`Case file not found for ${caseId}`);
++        process.exit(1);
++      }
++      
++      sh('npm', ['run','logq','--','--around', around, '--window', window, caseFile]);
+       break;
+     }
+     case 'digest': {
diff --git a/patches/DIFF_T2504_tests-core-reporter.patch b/patches/DIFF_T2504_tests-core-reporter.patch
new file mode 100644
index 0000000..fe78857
--- /dev/null
+++ b/patches/DIFF_T2504_tests-core-reporter.patch
@@ -0,0 +1,322 @@
+diff --git a/tests/laminar/coreReporter.spec.ts b/tests/laminar/coreReporter.spec.ts
+new file mode 100644
+index 0000000..21b6020
+--- /dev/null
++++ b/tests/laminar/coreReporter.spec.ts
+@@ -0,0 +1,316 @@
++import { describe, it, expect, beforeAll } from 'vitest';
++import * as fs from 'fs';
++import * as path from 'path';
++
++const REPORTS_DIR = 'reports';
++const INDEX_PATH = path.join(REPORTS_DIR, 'index.json');
++const SUMMARY_PATH = path.join(REPORTS_DIR, 'summary.jsonl');
++
++interface ArtifactIndexEntry {
++  testName: string;
++  status: 'pass' | 'fail' | 'skip';
++  duration: number;
++  location: string;
++  timestamp: string;
++  artifacts: {
++    summary: string;
++    caseFile?: string;
++    digestFile?: string;
++  };
++}
++
++interface ArtifactIndex {
++  generated: string;
++  totalTests: number;
++  artifacts: ArtifactIndexEntry[];
++}
++
++describe('Laminar Core Reporter - Per-case JSONL and Index', () => {
++  let indexData: ArtifactIndex;
++
++  beforeAll(() => {
++    expect(fs.existsSync(INDEX_PATH), 'index.json should exist').toBe(true);
++    const indexContent = fs.readFileSync(INDEX_PATH, 'utf-8');
++    indexData = JSON.parse(indexContent);
++  });
++
++  describe('index.json generation', () => {
++    it('should generate index.json with valid structure', () => {
++      expect(indexData).toBeDefined();
++      expect(indexData.generated).toBeDefined();
++      expect(indexData.totalTests).toBeGreaterThan(0);
++      expect(Array.isArray(indexData.artifacts)).toBe(true);
++    });
++
++    it('should have valid timestamp format', () => {
++      const timestamp = new Date(indexData.generated);
++      expect(timestamp.toString()).not.toBe('Invalid Date');
++    });
++
++    it('should have totalTests matching artifacts length', () => {
++      expect(indexData.totalTests).toBe(indexData.artifacts.length);
++    });
++
++    it('should have at least one artifact entry', () => {
++      expect(indexData.artifacts.length).toBeGreaterThan(0);
++    });
++  });
++
++  describe('index.json artifact entries', () => {
++    it('should have valid structure for each artifact entry', () => {
++      indexData.artifacts.forEach((entry, idx) => {
++        expect(entry.testName, `artifact[${idx}].testName`).toBeDefined();
++        expect(entry.status, `artifact[${idx}].status`).toMatch(/^(pass|fail|skip)$/);
++        expect(typeof entry.duration, `artifact[${idx}].duration type`).toBe('number');
++        expect(entry.location, `artifact[${idx}].location`).toBeDefined();
++        expect(entry.timestamp, `artifact[${idx}].timestamp`).toBeDefined();
++        expect(entry.artifacts, `artifact[${idx}].artifacts`).toBeDefined();
++      });
++    });
++
++    it('should have valid timestamps for each entry', () => {
++      indexData.artifacts.forEach((entry, idx) => {
++        const timestamp = new Date(entry.timestamp);
++        expect(timestamp.toString(), `artifact[${idx}] timestamp`).not.toBe('Invalid Date');
++      });
++    });
++
++    it('should reference summary.jsonl in artifacts', () => {
++      indexData.artifacts.forEach((entry, idx) => {
++        expect(entry.artifacts.summary, `artifact[${idx}].artifacts.summary`).toBe('reports/summary.jsonl');
++      });
++    });
++
++    it('should have caseFile path for each entry', () => {
++      indexData.artifacts.forEach((entry, idx) => {
++        expect(entry.artifacts.caseFile, `artifact[${idx}].artifacts.caseFile`).toBeDefined();
++        expect(entry.artifacts.caseFile, `artifact[${idx}].artifacts.caseFile`).toMatch(/^reports\/.+\.jsonl$/);
++      });
++    });
++
++    it('should have valid location paths', () => {
++      indexData.artifacts.forEach((entry, idx) => {
++        expect(entry.location, `artifact[${idx}].location`).toMatch(/\.ts:\d+$/);
++      });
++    });
++  });
++
++  describe('per-case JSONL files existence', () => {
++    it('should create JSONL file for each test case', () => {
++      indexData.artifacts.forEach((entry) => {
++        if (entry.artifacts.caseFile) {
++          const caseFilePath = path.join(entry.artifacts.caseFile);
++          expect(
++            fs.existsSync(caseFilePath),
++            `Case file should exist: ${caseFilePath}`
++          ).toBe(true);
++        }
++      });
++    });
++
++    it('should organize case files in suite directories', () => {
++      indexData.artifacts.forEach((entry) => {
++        if (entry.artifacts.caseFile) {
++          const parts = entry.artifacts.caseFile.split('/');
++          expect(parts.length, `${entry.artifacts.caseFile} should have suite directory`).toBeGreaterThanOrEqual(3);
++          expect(parts[0]).toBe('reports');
++          expect(parts[1]).toMatch(/\.(spec|test)$/);
++        }
++      });
++    });
++  });
++
++  describe('per-case JSONL file structure', () => {
++    it('should contain valid JSONL format', () => {
++      const sampleEntry = indexData.artifacts.find(e => e.status === 'pass');
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n');
++        
++        lines.forEach((line, idx) => {
++          expect(() => JSON.parse(line), `Line ${idx} should be valid JSON`).not.toThrow();
++        });
++      }
++    });
++
++    it('should include case.begin event', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        const beginEvent = lines.find(e => e.evt === 'case.begin');
++        expect(beginEvent, 'case.begin event should exist').toBeDefined();
++        expect(beginEvent?.phase).toBe('setup');
++        expect(beginEvent?.lvl).toBe('info');
++        expect(beginEvent?.case).toBeDefined();
++      }
++    });
++
++    it('should include test.run event', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        const runEvent = lines.find(e => e.evt === 'test.run');
++        expect(runEvent, 'test.run event should exist').toBeDefined();
++        expect(runEvent?.phase).toBe('execution');
++        expect(runEvent?.lvl).toBe('info');
++      }
++    });
++
++    it('should include case.end event with payload', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        const endEvent = lines.find(e => e.evt === 'case.end');
++        expect(endEvent, 'case.end event should exist').toBeDefined();
++        expect(endEvent?.phase).toBe('teardown');
++        expect(endEvent?.payload).toBeDefined();
++        expect(endEvent?.payload?.duration).toBeGreaterThanOrEqual(0);
++        expect(endEvent?.payload?.status).toMatch(/^(passed|failed|skipped)$/);
++      }
++    });
++
++    it('should have timestamps for all events', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        lines.forEach((event, idx) => {
++          expect(event.ts, `Event ${idx} should have timestamp`).toBeDefined();
++          expect(typeof event.ts, `Event ${idx} ts should be number`).toBe('number');
++        });
++      }
++    });
++
++    it('should have chronological timestamps', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        for (let i = 1; i < lines.length; i++) {
++          expect(lines[i].ts, `Event ${i} timestamp should be >= previous`).toBeGreaterThanOrEqual(lines[i - 1].ts);
++        }
++      }
++    });
++  });
++
++  describe('failed test case JSONL structure', () => {
++    it('should include test.error events for failed tests', () => {
++      const failedEntry = indexData.artifacts.find(e => e.status === 'fail');
++      if (failedEntry?.artifacts.caseFile && fs.existsSync(failedEntry.artifacts.caseFile)) {
++        const content = fs.readFileSync(failedEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        const errorEvent = lines.find(e => e.evt === 'test.error');
++        expect(errorEvent, 'test.error event should exist for failed test').toBeDefined();
++        expect(errorEvent?.lvl).toBe('error');
++        expect(errorEvent?.payload).toBeDefined();
++        expect(errorEvent?.payload?.message).toBeDefined();
++      }
++    });
++
++    it('should have error-level log for case.end of failed tests', () => {
++      const failedEntry = indexData.artifacts.find(e => e.status === 'fail');
++      if (failedEntry?.artifacts.caseFile && fs.existsSync(failedEntry.artifacts.caseFile)) {
++        const content = fs.readFileSync(failedEntry.artifacts.caseFile, 'utf-8');
++        const lines = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        const endEvent = lines.find(e => e.evt === 'case.end');
++        expect(endEvent?.lvl).toBe('error');
++        expect(endEvent?.payload?.status).toBe('failed');
++      }
++    });
++  });
++
++  describe('cross-references validation', () => {
++    it('should have summary.jsonl file', () => {
++      expect(fs.existsSync(SUMMARY_PATH), 'summary.jsonl should exist').toBe(true);
++    });
++
++    it('should have matching test count between index and summary', () => {
++      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');
++      const summaryLines = summaryContent.trim().split('\n');
++      expect(summaryLines.length).toBeGreaterThanOrEqual(indexData.totalTests);
++    });
++
++    it('should have valid JSONL in summary file', () => {
++      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');
++      const summaryLines = summaryContent.trim().split('\n').filter(l => l.length > 0);
++      
++      summaryLines.forEach((line, idx) => {
++        expect(() => JSON.parse(line), `Summary line ${idx} should be valid JSON`).not.toThrow();
++      });
++    });
++
++    it('should cross-reference between index and case files', () => {
++      indexData.artifacts.slice(0, 5).forEach((entry) => {
++        if (entry.artifacts.caseFile) {
++          expect(fs.existsSync(entry.artifacts.caseFile)).toBe(true);
++          
++          const caseContent = fs.readFileSync(entry.artifacts.caseFile, 'utf-8');
++          const events = caseContent.trim().split('\n').map(l => JSON.parse(l));
++          
++          const endEvent = events.find(e => e.evt === 'case.end');
++          expect(endEvent?.payload?.duration).toBe(entry.duration);
++        }
++      });
++    });
++
++    it('should have case name in JSONL events matching test name', () => {
++      const sampleEntry = indexData.artifacts[0];
++      if (sampleEntry?.artifacts.caseFile) {
++        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
++        const events = content.trim().split('\n').map(l => JSON.parse(l));
++        
++        events.forEach((event) => {
++          expect(event.case).toBe(sampleEntry.testName);
++        });
++      }
++    });
++  });
++
++  describe('edge cases and robustness', () => {
++    it('should handle test names with special characters', () => {
++      const specialCharsEntry = indexData.artifacts.find(e => 
++        e.testName.includes('-') || e.testName.includes('/')
++      );
++      
++      if (specialCharsEntry?.artifacts.caseFile) {
++        const fileName = path.basename(specialCharsEntry.artifacts.caseFile);
++        expect(fileName).toMatch(/^[a-zA-Z0-9_-]+\.jsonl$/);
++        expect(fs.existsSync(specialCharsEntry.artifacts.caseFile)).toBe(true);
++      }
++    });
++
++    it('should have unique case file paths', () => {
++      const casePaths = indexData.artifacts
++        .map(e => e.artifacts.caseFile)
++        .filter(Boolean);
++      
++      const uniquePaths = new Set(casePaths);
++      expect(uniquePaths.size).toBe(casePaths.length);
++    });
++
++    it('should have all case files in reports directory', () => {
++      indexData.artifacts.forEach((entry) => {
++        if (entry.artifacts.caseFile) {
++          expect(entry.artifacts.caseFile).toMatch(/^reports\//);
++        }
++      });
++    });
++
++    it('should have consistent status values', () => {
++      indexData.artifacts.forEach((entry) => {
++        const validStatuses = ['pass', 'fail', 'skip'];
++        expect(validStatuses).toContain(entry.status);
++      });
++    });
++  });
++});
diff --git a/reports/ansiParser.spec/should_handle_backspace.jsonl b/reports/ansiParser.spec/should_handle_backspace.jsonl
new file mode 100644
index 0000000..eae0124
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_backspace.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"should handle backspace","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"should handle backspace","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"should handle backspace","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_carriage_return.jsonl b/reports/ansiParser.spec/should_handle_carriage_return.jsonl
new file mode 100644
index 0000000..3244e45
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_carriage_return.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"should handle carriage return","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"should handle carriage return","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"should handle carriage return","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl b/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
new file mode 100644
index 0000000..2ea9f57
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"should handle color codes (SGR)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"should handle color codes (SGR)","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"should handle color codes (SGR)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_color_reset.jsonl b/reports/ansiParser.spec/should_handle_color_reset.jsonl
new file mode 100644
index 0000000..5d5e06d
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_color_reset.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle color reset","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle color reset","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle color reset","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl b/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
new file mode 100644
index 0000000..960c6ae
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle cursor back (CUB)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle cursor back (CUB)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle cursor back (CUB)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl b/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
new file mode 100644
index 0000000..d03756a
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle cursor down (CUD)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle cursor down (CUD)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle cursor down (CUD)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl b/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
new file mode 100644
index 0000000..9ebedba
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl b/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
new file mode 100644
index 0000000..abc52ca
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle cursor up (CUU)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle cursor up (CUU)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle cursor up (CUU)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl b/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
new file mode 100644
index 0000000..62a7c88
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle line clearing (EL)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle line clearing (EL)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle line clearing (EL)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_line_wrapping.jsonl b/reports/ansiParser.spec/should_handle_line_wrapping.jsonl
new file mode 100644
index 0000000..11e5b13
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_line_wrapping.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle line wrapping","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle line wrapping","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle line wrapping","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_newlines.jsonl b/reports/ansiParser.spec/should_handle_newlines.jsonl
new file mode 100644
index 0000000..bb1f787
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_newlines.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"should handle newlines","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"should handle newlines","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"should handle newlines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl b/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
new file mode 100644
index 0000000..d63af53
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle screen clearing (ED)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle screen clearing (ED)","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle screen clearing (ED)","phase":"teardown","evt":"case.end","payload":{"duration":22,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_scrolling.jsonl b/reports/ansiParser.spec/should_handle_scrolling.jsonl
new file mode 100644
index 0000000..0a683cd
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_scrolling.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661045,"lvl":"info","case":"should handle scrolling","phase":"setup","evt":"case.begin"}
+{"ts":1760290661046,"lvl":"info","case":"should handle scrolling","phase":"execution","evt":"test.run"}
+{"ts":1760290661047,"lvl":"info","case":"should handle scrolling","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_tabs.jsonl b/reports/ansiParser.spec/should_handle_tabs.jsonl
new file mode 100644
index 0000000..0b447bf
--- /dev/null
+++ b/reports/ansiParser.spec/should_handle_tabs.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"should handle tabs","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"should handle tabs","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"should handle tabs","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl b/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
new file mode 100644
index 0000000..6e4df6c
--- /dev/null
+++ b/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_parse_regular_characters.jsonl b/reports/ansiParser.spec/should_parse_regular_characters.jsonl
new file mode 100644
index 0000000..7d86b4b
--- /dev/null
+++ b/reports/ansiParser.spec/should_parse_regular_characters.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"should parse regular characters","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"should parse regular characters","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"should parse regular characters","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl b/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
new file mode 100644
index 0000000..537e614
--- /dev/null
+++ b/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should contain valid JSONL format","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should contain valid JSONL format","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should contain valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl b/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
new file mode 100644
index 0000000..1cc0f49
--- /dev/null
+++ b/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should create JSONL file for each test case","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should create JSONL file for each test case","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should create JSONL file for each test case","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl b/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
new file mode 100644
index 0000000..a7a2d54
--- /dev/null
+++ b/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661037,"lvl":"info","case":"should cross-reference between index and case files","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should cross-reference between index and case files","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"info","case":"should cross-reference between index and case files","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl b/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
new file mode 100644
index 0000000..369a927
--- /dev/null
+++ b/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661034,"lvl":"info","case":"should generate index.json with valid structure","phase":"setup","evt":"case.begin"}
+{"ts":1760290661035,"lvl":"info","case":"should generate index.json with valid structure","phase":"execution","evt":"test.run"}
+{"ts":1760290661036,"lvl":"info","case":"should generate index.json with valid structure","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl b/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
new file mode 100644
index 0000000..e02354d
--- /dev/null
+++ b/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"should handle test names with special characters","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"should handle test names with special characters","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"should handle test names with special characters","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl b/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
new file mode 100644
index 0000000..3689d96
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"should have all case files in reports directory","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"should have all case files in reports directory","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"should have all case files in reports directory","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl b/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
new file mode 100644
index 0000000..ef413c8
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have at least one artifact entry","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have at least one artifact entry","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have at least one artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl b/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
new file mode 100644
index 0000000..c5e6a50
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have caseFile path for each entry","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have caseFile path for each entry","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have caseFile path for each entry","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl b/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
new file mode 100644
index 0000000..c62fe99
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661037,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl b/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
new file mode 100644
index 0000000..3b531ba
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should have chronological timestamps","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should have chronological timestamps","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should have chronological timestamps","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_consistent_status_values.jsonl b/reports/coreReporter.spec/should_have_consistent_status_values.jsonl
new file mode 100644
index 0000000..e9a0680
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_consistent_status_values.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"should have consistent status values","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"should have consistent status values","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"should have consistent status values","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl b/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
new file mode 100644
index 0000000..6d25331
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661037,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
new file mode 100644
index 0000000..01461d4
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
@@ -0,0 +1,4 @@
+{"ts":1760290661037,"lvl":"info","case":"should have matching test count between index and summary","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should have matching test count between index and summary","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"error","case":"should have matching test count between index and summary","phase":"execution","evt":"test.error","payload":{"message":"expected 1 to be greater than or equal to 121","stack":"AssertionError: expected 1 to be greater than or equal to 121\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"}}
+{"ts":1760290661040,"lvl":"error","case":"should have matching test count between index and summary","phase":"teardown","evt":"case.end","payload":{"duration":10,"status":"failed"}}
diff --git a/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl b/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
new file mode 100644
index 0000000..30bfddc
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661037,"lvl":"info","case":"should have summary.jsonl file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should have summary.jsonl file","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"info","case":"should have summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl b/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
new file mode 100644
index 0000000..cac5c45
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should have timestamps for all events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should have timestamps for all events","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should have timestamps for all events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl b/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
new file mode 100644
index 0000000..70f561a
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl b/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
new file mode 100644
index 0000000..c6336ad
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"should have unique case file paths","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"should have unique case file paths","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"should have unique case file paths","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl b/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
new file mode 100644
index 0000000..5c6ceb3
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661037,"lvl":"info","case":"should have valid JSONL in summary file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661038,"lvl":"info","case":"should have valid JSONL in summary file","phase":"execution","evt":"test.run"}
+{"ts":1760290661039,"lvl":"info","case":"should have valid JSONL in summary file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_location_paths.jsonl b/reports/coreReporter.spec/should_have_valid_location_paths.jsonl
new file mode 100644
index 0000000..55df889
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_valid_location_paths.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have valid location paths","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have valid location paths","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have valid location paths","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl b/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
new file mode 100644
index 0000000..58ffba0
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":25,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl b/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
new file mode 100644
index 0000000..dc253e9
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have valid timestamp format","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have valid timestamp format","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have valid timestamp format","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl b/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
new file mode 100644
index 0000000..7709315
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should have valid timestamps for each entry","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should have valid timestamps for each entry","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should have valid timestamps for each entry","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_case_begin_event.jsonl b/reports/coreReporter.spec/should_include_case_begin_event.jsonl
new file mode 100644
index 0000000..672a290
--- /dev/null
+++ b/reports/coreReporter.spec/should_include_case_begin_event.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should include case.begin event","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should include case.begin event","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should include case.begin event","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl b/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
new file mode 100644
index 0000000..6b68581
--- /dev/null
+++ b/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should include case.end event with payload","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should include case.end event with payload","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should include case.end event with payload","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl b/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
new file mode 100644
index 0000000..c9d8365
--- /dev/null
+++ b/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should include test.error events for failed tests","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should include test.error events for failed tests","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should include test.error events for failed tests","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_test_run_event.jsonl b/reports/coreReporter.spec/should_include_test_run_event.jsonl
new file mode 100644
index 0000000..fc11db6
--- /dev/null
+++ b/reports/coreReporter.spec/should_include_test_run_event.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should include test.run event","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should include test.run event","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should include test.run event","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl b/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
new file mode 100644
index 0000000..862e4b5
--- /dev/null
+++ b/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661036,"lvl":"info","case":"should organize case files in suite directories","phase":"setup","evt":"case.begin"}
+{"ts":1760290661037,"lvl":"info","case":"should organize case files in suite directories","phase":"execution","evt":"test.run"}
+{"ts":1760290661038,"lvl":"info","case":"should organize case files in suite directories","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl b/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
new file mode 100644
index 0000000..2853354
--- /dev/null
+++ b/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661035,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"setup","evt":"case.begin"}
+{"ts":1760290661036,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"execution","evt":"test.run"}
+{"ts":1760290661037,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl b/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
new file mode 100644
index 0000000..13f64f1
--- /dev/null
+++ b/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"checks module against config.modules when enabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"checks module against config.modules when enabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"checks module against config.modules when enabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl b/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
new file mode 100644
index 0000000..84276cb
--- /dev/null
+++ b/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"does not emit when on() returns false","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"does not emit when on() returns false","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"does not emit when on() returns false","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl b/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
new file mode 100644
index 0000000..527962e
--- /dev/null
+++ b/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/emits_formatted_output_to_console.jsonl b/reports/debug-api.spec/emits_formatted_output_to_console.jsonl
new file mode 100644
index 0000000..4eb8b86
--- /dev/null
+++ b/reports/debug-api.spec/emits_formatted_output_to_console.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"emits formatted output to console","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"emits formatted output to console","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"emits formatted output to console","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl b/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
new file mode 100644
index 0000000..1d4e1b2
--- /dev/null
+++ b/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"emits to console when module is enabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"emits to console when module is enabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"emits to console when module is enabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/handles_emit_without_payload.jsonl b/reports/debug-api.spec/handles_emit_without_payload.jsonl
new file mode 100644
index 0000000..ebe1059
--- /dev/null
+++ b/reports/debug-api.spec/handles_emit_without_payload.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"handles emit without payload","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"handles emit without payload","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"handles emit without payload","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/respects_debug_level_filtering.jsonl b/reports/debug-api.spec/respects_debug_level_filtering.jsonl
new file mode 100644
index 0000000..8b47541
--- /dev/null
+++ b/reports/debug-api.spec/respects_debug_level_filtering.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"respects debug level filtering","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"respects debug level filtering","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"respects debug level filtering","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl b/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
new file mode 100644
index 0000000..9f86f1c
--- /dev/null
+++ b/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"returns consistent value for same module","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"returns consistent value for same module","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"returns consistent value for same module","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl b/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
new file mode 100644
index 0000000..61720ab
--- /dev/null
+++ b/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"returns false when config is disabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"returns false when config is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"returns false when config is disabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl b/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
new file mode 100644
index 0000000..3cc904a
--- /dev/null
+++ b/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661046,"lvl":"info","case":"returns false when module is not enabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661047,"lvl":"info","case":"returns false when module is not enabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661048,"lvl":"info","case":"returns false when module is not enabled","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl b/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
new file mode 100644
index 0000000..e201b15
--- /dev/null
+++ b/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl b/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
new file mode 100644
index 0000000..10181e3
--- /dev/null
+++ b/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661047,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661048,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661049,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/demo/demo.case.jsonl b/reports/demo/demo.case.jsonl
deleted file mode 100644
index 4fe17df..0000000
--- a/reports/demo/demo.case.jsonl
+++ /dev/null
@@ -1,4 +0,0 @@
-{"ts":1760278402607,"lvl":"info","case":"demo.case","phase":"setup","evt":"case.begin"}
-{"ts":1760278402608,"lvl":"info","case":"demo.case","phase":"execution","evt":"test.step","payload":{"step":1,"action":"initialize"}}
-{"ts":1760278402608,"lvl":"info","case":"demo.case","phase":"verification","evt":"test.assertion","payload":{"expected":true,"actual":true,"passed":true}}
-{"ts":1760278402608,"lvl":"info","case":"demo.case","phase":"teardown","evt":"case.end","payload":{"duration":42,"status":"passed"}}
diff --git a/reports/digest.spec/applies_redact_action_to_fields.digest.json b/reports/digest.spec/applies_redact_action_to_fields.digest.json
deleted file mode 100644
index 0d5015d..0000000
--- a/reports/digest.spec/applies_redact_action_to_fields.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "applies_redact_action_to_fields",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/applies_redact_action_to_fields.digest.md b/reports/digest.spec/applies_redact_action_to_fields.digest.md
deleted file mode 100644
index 24bd4fd..0000000
--- a/reports/digest.spec/applies_redact_action_to_fields.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: applies_redact_action_to_fields
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/applies_redact_action_to_fields.jsonl b/reports/digest.spec/applies_redact_action_to_fields.jsonl
new file mode 100644
index 0000000..c82b351
--- /dev/null
+++ b/reports/digest.spec/applies_redact_action_to_fields.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"applies redact action to fields","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"applies redact action to fields","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"applies redact action to fields","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/applies_slice_action_with_window.digest.json b/reports/digest.spec/applies_slice_action_with_window.digest.json
deleted file mode 100644
index cfe7050..0000000
--- a/reports/digest.spec/applies_slice_action_with_window.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "applies_slice_action_with_window",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/applies_slice_action_with_window.digest.md b/reports/digest.spec/applies_slice_action_with_window.digest.md
deleted file mode 100644
index a4cba6b..0000000
--- a/reports/digest.spec/applies_slice_action_with_window.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: applies_slice_action_with_window
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/applies_slice_action_with_window.jsonl b/reports/digest.spec/applies_slice_action_with_window.jsonl
new file mode 100644
index 0000000..640a4ed
--- /dev/null
+++ b/reports/digest.spec/applies_slice_action_with_window.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"applies slice action with window","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"applies slice action with window","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"applies slice action with window","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/enforces_byte_budget.digest.json b/reports/digest.spec/enforces_byte_budget.digest.json
deleted file mode 100644
index f153080..0000000
--- a/reports/digest.spec/enforces_byte_budget.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "enforces_byte_budget",
-  "status": "fail",
-  "duration": 3,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'summary')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/enforces_byte_budget.digest.md b/reports/digest.spec/enforces_byte_budget.digest.md
deleted file mode 100644
index ddc65a8..0000000
--- a/reports/digest.spec/enforces_byte_budget.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: enforces_byte_budget
-
-**Status**: fail
-**Duration**: 3ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'summary')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/enforces_byte_budget.jsonl b/reports/digest.spec/enforces_byte_budget.jsonl
new file mode 100644
index 0000000..a7b52a6
--- /dev/null
+++ b/reports/digest.spec/enforces_byte_budget.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"enforces byte budget","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"enforces byte budget","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"enforces byte budget","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/digest.spec/enforces_line_budget.digest.json b/reports/digest.spec/enforces_line_budget.digest.json
deleted file mode 100644
index f9de7f0..0000000
--- a/reports/digest.spec/enforces_line_budget.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "enforces_line_budget",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/enforces_line_budget.digest.md b/reports/digest.spec/enforces_line_budget.digest.md
deleted file mode 100644
index 2d9c7ab..0000000
--- a/reports/digest.spec/enforces_line_budget.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: enforces_line_budget
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/enforces_line_budget.jsonl b/reports/digest.spec/enforces_line_budget.jsonl
new file mode 100644
index 0000000..d78665b
--- /dev/null
+++ b/reports/digest.spec/enforces_line_budget.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"enforces line budget","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"enforces line budget","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"enforces line budget","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl b/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
new file mode 100644
index 0000000..8022ec2
--- /dev/null
+++ b/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/digest.spec/handles_empty_log_file.jsonl b/reports/digest.spec/handles_empty_log_file.jsonl
new file mode 100644
index 0000000..788ee08
--- /dev/null
+++ b/reports/digest.spec/handles_empty_log_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"handles empty log file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"handles empty log file","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"handles empty log file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/digest.spec/handles_events_without_optional_fields.jsonl b/reports/digest.spec/handles_events_without_optional_fields.jsonl
new file mode 100644
index 0000000..c969d8b
--- /dev/null
+++ b/reports/digest.spec/handles_events_without_optional_fields.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"handles events without optional fields","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"handles events without optional fields","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"handles events without optional fields","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/handles_missing_log_file.jsonl b/reports/digest.spec/handles_missing_log_file.jsonl
new file mode 100644
index 0000000..559ba0c
--- /dev/null
+++ b/reports/digest.spec/handles_missing_log_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"handles missing log file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"handles missing log file","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"handles missing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl b/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
new file mode 100644
index 0000000..32f07ca
--- /dev/null
+++ b/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"identifies error-level events as suspects","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"identifies error-level events as suspects","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"identifies error-level events as suspects","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/includes_correct_summary_statistics.jsonl b/reports/digest.spec/includes_correct_summary_statistics.jsonl
new file mode 100644
index 0000000..3f77a35
--- /dev/null
+++ b/reports/digest.spec/includes_correct_summary_statistics.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"includes correct summary statistics","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"includes correct summary statistics","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"includes correct summary statistics","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/includes_events_matching_error_level.digest.json b/reports/digest.spec/includes_events_matching_error_level.digest.json
deleted file mode 100644
index 60c44e2..0000000
--- a/reports/digest.spec/includes_events_matching_error_level.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "includes_events_matching_error_level",
-  "status": "fail",
-  "duration": 6,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/includes_events_matching_error_level.digest.md b/reports/digest.spec/includes_events_matching_error_level.digest.md
deleted file mode 100644
index 78a105b..0000000
--- a/reports/digest.spec/includes_events_matching_error_level.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: includes_events_matching_error_level
-
-**Status**: fail
-**Duration**: 6ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/includes_events_matching_error_level.jsonl b/reports/digest.spec/includes_events_matching_error_level.jsonl
new file mode 100644
index 0000000..13402c4
--- /dev/null
+++ b/reports/digest.spec/includes_events_matching_error_level.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"includes events matching error level","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"includes events matching error level","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"includes events matching error level","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/includes_events_matching_specific_event_name.digest.json b/reports/digest.spec/includes_events_matching_specific_event_name.digest.json
deleted file mode 100644
index 83f0917..0000000
--- a/reports/digest.spec/includes_events_matching_specific_event_name.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "includes_events_matching_specific_event_name",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/includes_events_matching_specific_event_name.digest.md b/reports/digest.spec/includes_events_matching_specific_event_name.digest.md
deleted file mode 100644
index 79aef66..0000000
--- a/reports/digest.spec/includes_events_matching_specific_event_name.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: includes_events_matching_specific_event_name
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/includes_events_matching_specific_event_name.jsonl b/reports/digest.spec/includes_events_matching_specific_event_name.jsonl
new file mode 100644
index 0000000..1976462
--- /dev/null
+++ b/reports/digest.spec/includes_events_matching_specific_event_name.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"includes events matching specific event name","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"includes events matching specific event name","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"includes events matching specific event name","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/keeps_all_events_when_within_budget.digest.json b/reports/digest.spec/keeps_all_events_when_within_budget.digest.json
deleted file mode 100644
index c178f6e..0000000
--- a/reports/digest.spec/keeps_all_events_when_within_budget.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "keeps_all_events_when_within_budget",
-  "status": "fail",
-  "duration": 0,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/keeps_all_events_when_within_budget.digest.md b/reports/digest.spec/keeps_all_events_when_within_budget.digest.md
deleted file mode 100644
index 4d6a3bc..0000000
--- a/reports/digest.spec/keeps_all_events_when_within_budget.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: keeps_all_events_when_within_budget
-
-**Status**: fail
-**Duration**: 0ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/keeps_all_events_when_within_budget.jsonl b/reports/digest.spec/keeps_all_events_when_within_budget.jsonl
new file mode 100644
index 0000000..5a38d50
--- /dev/null
+++ b/reports/digest.spec/keeps_all_events_when_within_budget.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"keeps all events when within budget","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"keeps all events when within budget","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"keeps all events when within budget","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/limits_suspects_to_top_5.jsonl b/reports/digest.spec/limits_suspects_to_top_5.jsonl
new file mode 100644
index 0000000..5a65a53
--- /dev/null
+++ b/reports/digest.spec/limits_suspects_to_top_5.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"limits suspects to top 5","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"limits suspects to top 5","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"limits suspects to top 5","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl b/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
new file mode 100644
index 0000000..22ccb85
--- /dev/null
+++ b/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl b/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
new file mode 100644
index 0000000..b1b946c
--- /dev/null
+++ b/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/respects_priority_order.digest.json b/reports/digest.spec/respects_priority_order.digest.json
deleted file mode 100644
index a6c1b89..0000000
--- a/reports/digest.spec/respects_priority_order.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "respects_priority_order",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/respects_priority_order.digest.md b/reports/digest.spec/respects_priority_order.digest.md
deleted file mode 100644
index 916966a..0000000
--- a/reports/digest.spec/respects_priority_order.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: respects_priority_order
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/respects_priority_order.jsonl b/reports/digest.spec/respects_priority_order.jsonl
new file mode 100644
index 0000000..6ba3064
--- /dev/null
+++ b/reports/digest.spec/respects_priority_order.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"respects priority order","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"respects priority order","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"respects priority order","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl b/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
new file mode 100644
index 0000000..3e9d536
--- /dev/null
+++ b/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"returns empty suspects for no failure events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"returns empty suspects for no failure events","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"returns empty suspects for no failure events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/returns_null_for_passing_tests.jsonl b/reports/digest.spec/returns_null_for_passing_tests.jsonl
new file mode 100644
index 0000000..8861852
--- /dev/null
+++ b/reports/digest.spec/returns_null_for_passing_tests.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"returns null for passing tests","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"returns null for passing tests","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"returns null for passing tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/returns_null_when_disabled.jsonl b/reports/digest.spec/returns_null_when_disabled.jsonl
new file mode 100644
index 0000000..41a5515
--- /dev/null
+++ b/reports/digest.spec/returns_null_when_disabled.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661038,"lvl":"info","case":"returns null when disabled","phase":"setup","evt":"case.begin"}
+{"ts":1760290661039,"lvl":"info","case":"returns null when disabled","phase":"execution","evt":"test.run"}
+{"ts":1760290661040,"lvl":"info","case":"returns null when disabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/digest.spec/scores_correlated_events.jsonl b/reports/digest.spec/scores_correlated_events.jsonl
new file mode 100644
index 0000000..7ad1ff1
--- /dev/null
+++ b/reports/digest.spec/scores_correlated_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"scores correlated events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"scores correlated events","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"scores correlated events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/scores_events_close_to_failure_time.jsonl b/reports/digest.spec/scores_events_close_to_failure_time.jsonl
new file mode 100644
index 0000000..885248a
--- /dev/null
+++ b/reports/digest.spec/scores_events_close_to_failure_time.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"scores events close to failure time","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"scores events close to failure time","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"scores events close to failure time","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/scores_failure_events.jsonl b/reports/digest.spec/scores_failure_events.jsonl
new file mode 100644
index 0000000..ca9ca63
--- /dev/null
+++ b/reports/digest.spec/scores_failure_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"scores failure events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"scores failure events","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"scores failure events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/skips_malformed_JSON_lines.jsonl b/reports/digest.spec/skips_malformed_JSON_lines.jsonl
new file mode 100644
index 0000000..f826a9e
--- /dev/null
+++ b/reports/digest.spec/skips_malformed_JSON_lines.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"skips malformed JSON lines","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"skips malformed JSON lines","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"skips malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/supports_multiple_match_criteria.digest.json b/reports/digest.spec/supports_multiple_match_criteria.digest.json
deleted file mode 100644
index ccd8661..0000000
--- a/reports/digest.spec/supports_multiple_match_criteria.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "supports_multiple_match_criteria",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/supports_multiple_match_criteria.digest.md b/reports/digest.spec/supports_multiple_match_criteria.digest.md
deleted file mode 100644
index 672eaac..0000000
--- a/reports/digest.spec/supports_multiple_match_criteria.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: supports_multiple_match_criteria
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/supports_multiple_match_criteria.jsonl b/reports/digest.spec/supports_multiple_match_criteria.jsonl
new file mode 100644
index 0000000..7e17a46
--- /dev/null
+++ b/reports/digest.spec/supports_multiple_match_criteria.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661040,"lvl":"info","case":"supports multiple match criteria","phase":"setup","evt":"case.begin"}
+{"ts":1760290661041,"lvl":"info","case":"supports multiple match criteria","phase":"execution","evt":"test.run"}
+{"ts":1760290661042,"lvl":"info","case":"supports multiple match criteria","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.json b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.json
deleted file mode 100644
index 8628257..0000000
--- a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.json
+++ /dev/null
@@ -1,16 +0,0 @@
-{
-  "case": "supports_wildcard_patterns_in_event_matching",
-  "status": "fail",
-  "duration": 1,
-  "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-  "error": "Cannot read properties of null (reading 'events')",
-  "summary": {
-    "totalEvents": 0,
-    "includedEvents": 0,
-    "redactedFields": 0,
-    "budgetUsed": 2,
-    "budgetLimit": 10240
-  },
-  "suspects": [],
-  "events": []
-}
\ No newline at end of file
diff --git a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.md b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.md
deleted file mode 100644
index bcae9ce..0000000
--- a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.digest.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Digest: supports_wildcard_patterns_in_event_matching
-
-**Status**: fail
-**Duration**: 1ms
-**Location**: /srv/repos0/mkolbol/tests/digest/digest.spec.ts:0
-**Error**: Cannot read properties of null (reading 'events')
-
-## Summary
-- Total Events: 0
-- Included Events: 0
-- Budget Used: 2 / 10240 bytes
diff --git a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
new file mode 100644
index 0000000..9912d5e
--- /dev/null
+++ b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/writes_valid_JSON_file.jsonl b/reports/digest.spec/writes_valid_JSON_file.jsonl
new file mode 100644
index 0000000..32023cc
--- /dev/null
+++ b/reports/digest.spec/writes_valid_JSON_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"writes valid JSON file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"writes valid JSON file","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"writes valid JSON file","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/writes_valid_markdown_file.jsonl b/reports/digest.spec/writes_valid_markdown_file.jsonl
new file mode 100644
index 0000000..151993d
--- /dev/null
+++ b/reports/digest.spec/writes_valid_markdown_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661039,"lvl":"info","case":"writes valid markdown file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661040,"lvl":"info","case":"writes valid markdown file","phase":"execution","evt":"test.run"}
+{"ts":1760290661041,"lvl":"info","case":"writes valid markdown file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl b/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
new file mode 100644
index 0000000..ff10fae
--- /dev/null
+++ b/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663098,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"setup","evt":"case.begin"}
+{"ts":1760290663099,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"execution","evt":"test.run"}
+{"ts":1760290663100,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"teardown","evt":"case.end","payload":{"duration":53,"status":"passed"}}
diff --git a/reports/executor.spec/should_load_configuration.jsonl b/reports/executor.spec/should_load_configuration.jsonl
new file mode 100644
index 0000000..2d194dc
--- /dev/null
+++ b/reports/executor.spec/should_load_configuration.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663097,"lvl":"info","case":"should load configuration","phase":"setup","evt":"case.begin"}
+{"ts":1760290663098,"lvl":"info","case":"should load configuration","phase":"execution","evt":"test.run"}
+{"ts":1760290663099,"lvl":"info","case":"should load configuration","phase":"teardown","evt":"case.end","payload":{"duration":40,"status":"passed"}}
diff --git a/reports/executor.spec/should_support_restartNode.jsonl b/reports/executor.spec/should_support_restartNode.jsonl
new file mode 100644
index 0000000..1acb45c
--- /dev/null
+++ b/reports/executor.spec/should_support_restartNode.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663099,"lvl":"info","case":"should support restartNode","phase":"setup","evt":"case.begin"}
+{"ts":1760290663100,"lvl":"info","case":"should support restartNode","phase":"execution","evt":"test.run"}
+{"ts":1760290663101,"lvl":"info","case":"should support restartNode","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl b/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
new file mode 100644
index 0000000..cfdd66d
--- /dev/null
+++ b/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663098,"lvl":"info","case":"should throw if up() called without load()","phase":"setup","evt":"case.begin"}
+{"ts":1760290663099,"lvl":"info","case":"should throw if up() called without load()","phase":"execution","evt":"test.run"}
+{"ts":1760290663100,"lvl":"info","case":"should throw if up() called without load()","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl b/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
new file mode 100644
index 0000000..596e47d
--- /dev/null
+++ b/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663099,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"setup","evt":"case.begin"}
+{"ts":1760290663100,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"execution","evt":"test.run"}
+{"ts":1760290663101,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/executor.spec/should_wire_connections_via_StateManager.jsonl b/reports/executor.spec/should_wire_connections_via_StateManager.jsonl
new file mode 100644
index 0000000..1cddd68
--- /dev/null
+++ b/reports/executor.spec/should_wire_connections_via_StateManager.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663098,"lvl":"info","case":"should wire connections via StateManager","phase":"setup","evt":"case.begin"}
+{"ts":1760290663099,"lvl":"info","case":"should wire connections via StateManager","phase":"execution","evt":"test.run"}
+{"ts":1760290663100,"lvl":"info","case":"should wire connections via StateManager","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl b/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
new file mode 100644
index 0000000..25ad507
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663102,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"setup","evt":"case.begin"}
+{"ts":1760290663103,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"execution","evt":"test.run"}
+{"ts":1760290663104,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"teardown","evt":"case.end","payload":{"duration":68,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl b/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
new file mode 100644
index 0000000..7caec18
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663102,"lvl":"info","case":"should handle environment variables","phase":"setup","evt":"case.begin"}
+{"ts":1760290663103,"lvl":"info","case":"should handle environment variables","phase":"execution","evt":"test.run"}
+{"ts":1760290663104,"lvl":"info","case":"should handle environment variables","phase":"teardown","evt":"case.end","payload":{"duration":244,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl b/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
new file mode 100644
index 0000000..ca69ee9
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663103,"lvl":"info","case":"should not restart with \"never\" policy","phase":"setup","evt":"case.begin"}
+{"ts":1760290663104,"lvl":"info","case":"should not restart with \"never\" policy","phase":"execution","evt":"test.run"}
+{"ts":1760290663105,"lvl":"info","case":"should not restart with \"never\" policy","phase":"teardown","evt":"case.end","payload":{"duration":329,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_provide_process_info.jsonl b/reports/externalServerWrapper.spec/should_provide_process_info.jsonl
new file mode 100644
index 0000000..82d35b7
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_provide_process_info.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663104,"lvl":"info","case":"should provide process info","phase":"setup","evt":"case.begin"}
+{"ts":1760290663105,"lvl":"info","case":"should provide process info","phase":"execution","evt":"test.run"}
+{"ts":1760290663106,"lvl":"info","case":"should provide process info","phase":"teardown","evt":"case.end","payload":{"duration":36,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl b/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
new file mode 100644
index 0000000..bfbcc41
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663102,"lvl":"info","case":"should register with Hostess on spawn","phase":"setup","evt":"case.begin"}
+{"ts":1760290663103,"lvl":"info","case":"should register with Hostess on spawn","phase":"execution","evt":"test.run"}
+{"ts":1760290663104,"lvl":"info","case":"should register with Hostess on spawn","phase":"teardown","evt":"case.end","payload":{"duration":123,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl b/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
new file mode 100644
index 0000000..f15bd88
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663103,"lvl":"info","case":"should respect maxRestarts limit","phase":"setup","evt":"case.begin"}
+{"ts":1760290663104,"lvl":"info","case":"should respect maxRestarts limit","phase":"execution","evt":"test.run"}
+{"ts":1760290663105,"lvl":"info","case":"should respect maxRestarts limit","phase":"teardown","evt":"case.end","payload":{"duration":529,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl b/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
new file mode 100644
index 0000000..a963520
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663103,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"setup","evt":"case.begin"}
+{"ts":1760290663104,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"execution","evt":"test.run"}
+{"ts":1760290663105,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"teardown","evt":"case.end","payload":{"duration":534,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl b/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
new file mode 100644
index 0000000..34fe2bb
--- /dev/null
+++ b/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661148,"lvl":"info","case":"should spawn a simple process","phase":"setup","evt":"case.begin"}
+{"ts":1760290661149,"lvl":"info","case":"should spawn a simple process","phase":"execution","evt":"test.run"}
+{"ts":1760290661150,"lvl":"info","case":"should spawn a simple process","phase":"teardown","evt":"case.end","payload":{"duration":39,"status":"passed"}}
diff --git a/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl b/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
new file mode 100644
index 0000000..9619aa4
--- /dev/null
+++ b/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"converts Go events to Laminar format","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"converts Go events to Laminar format","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"converts Go events to Laminar format","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl b/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
new file mode 100644
index 0000000..0843573
--- /dev/null
+++ b/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"creates test.fail events with error level","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"creates test.fail events with error level","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"creates test.fail events with error level","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl b/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
new file mode 100644
index 0000000..376911c
--- /dev/null
+++ b/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"creates test.output events for output actions","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"creates test.output events for output actions","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"creates test.output events for output actions","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl b/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
new file mode 100644
index 0000000..bb41217
--- /dev/null
+++ b/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"creates test.pass events with correct status","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"creates test.pass events with correct status","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"creates test.pass events with correct status","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl b/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
new file mode 100644
index 0000000..3dd49dd
--- /dev/null
+++ b/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl b/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
new file mode 100644
index 0000000..301cf09
--- /dev/null
+++ b/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"creates test.start events for run actions","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"creates test.start events for run actions","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"creates test.start events for run actions","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl b/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
new file mode 100644
index 0000000..76e0722
--- /dev/null
+++ b/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"generates summary with correct test results","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"generates summary with correct test results","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"generates summary with correct test results","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl b/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
new file mode 100644
index 0000000..6415a0c
--- /dev/null
+++ b/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"groups events by test case correctly","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"groups events by test case correctly","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"groups events by test case correctly","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/handles_empty_input.jsonl b/reports/goIngest.spec/handles_empty_input.jsonl
new file mode 100644
index 0000000..233f9f9
--- /dev/null
+++ b/reports/goIngest.spec/handles_empty_input.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"handles empty input","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"handles empty input","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"handles empty input","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl b/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
new file mode 100644
index 0000000..a7691e3
--- /dev/null
+++ b/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"handles malformed JSON lines","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"handles malformed JSON lines","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"handles malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl b/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
new file mode 100644
index 0000000..3e6ea0a
--- /dev/null
+++ b/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"includes artifactURI in summary","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"includes artifactURI in summary","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"includes artifactURI in summary","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_duration_in_summary.jsonl b/reports/goIngest.spec/includes_duration_in_summary.jsonl
new file mode 100644
index 0000000..58d466f
--- /dev/null
+++ b/reports/goIngest.spec/includes_duration_in_summary.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"includes duration in summary","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"includes duration in summary","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"includes duration in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_location_in_summary.jsonl b/reports/goIngest.spec/includes_location_in_summary.jsonl
new file mode 100644
index 0000000..dbc9192
--- /dev/null
+++ b/reports/goIngest.spec/includes_location_in_summary.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"includes location in summary","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"includes location in summary","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"includes location in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl b/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
new file mode 100644
index 0000000..97f6fd0
--- /dev/null
+++ b/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661041,"lvl":"info","case":"parses go test -json fixture data","phase":"setup","evt":"case.begin"}
+{"ts":1760290661042,"lvl":"info","case":"parses go test -json fixture data","phase":"execution","evt":"test.run"}
+{"ts":1760290661043,"lvl":"info","case":"parses go test -json fixture data","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl b/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
new file mode 100644
index 0000000..5db3edf
--- /dev/null
+++ b/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661042,"lvl":"info","case":"parses individual event fields correctly","phase":"setup","evt":"case.begin"}
+{"ts":1760290661043,"lvl":"info","case":"parses individual event fields correctly","phase":"execution","evt":"test.run"}
+{"ts":1760290661044,"lvl":"info","case":"parses individual event fields correctly","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/preserves_timestamp_ordering.jsonl b/reports/goIngest.spec/preserves_timestamp_ordering.jsonl
new file mode 100644
index 0000000..2e11a87
--- /dev/null
+++ b/reports/goIngest.spec/preserves_timestamp_ordering.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"preserves timestamp ordering","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"preserves timestamp ordering","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"preserves timestamp ordering","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl b/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
new file mode 100644
index 0000000..1998aad
--- /dev/null
+++ b/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"processes fixture data from parsing to output","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"processes fixture data from parsing to output","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"processes fixture data from parsing to output","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/validates_Laminar_event_structure.jsonl b/reports/goIngest.spec/validates_Laminar_event_structure.jsonl
new file mode 100644
index 0000000..dd34476
--- /dev/null
+++ b/reports/goIngest.spec/validates_Laminar_event_structure.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"validates Laminar event structure","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"validates Laminar event structure","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"validates Laminar event structure","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl b/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
new file mode 100644
index 0000000..4ce647a
--- /dev/null
+++ b/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"writes JSONL files per test case","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"writes JSONL files per test case","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"writes JSONL files per test case","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_summary_jsonl_file.jsonl b/reports/goIngest.spec/writes_summary_jsonl_file.jsonl
new file mode 100644
index 0000000..226daa5
--- /dev/null
+++ b/reports/goIngest.spec/writes_summary_jsonl_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661043,"lvl":"info","case":"writes summary.jsonl file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661044,"lvl":"info","case":"writes summary.jsonl file","phase":"execution","evt":"test.run"}
+{"ts":1760290661045,"lvl":"info","case":"writes summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_valid_JSONL_format.jsonl b/reports/goIngest.spec/writes_valid_JSONL_format.jsonl
new file mode 100644
index 0000000..b23aef9
--- /dev/null
+++ b/reports/goIngest.spec/writes_valid_JSONL_format.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661044,"lvl":"info","case":"writes valid JSONL format","phase":"setup","evt":"case.begin"}
+{"ts":1760290661045,"lvl":"info","case":"writes valid JSONL format","phase":"execution","evt":"test.run"}
+{"ts":1760290661046,"lvl":"info","case":"writes valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl b/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
new file mode 100644
index 0000000..b9cf347
--- /dev/null
+++ b/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661149,"lvl":"info","case":"evicts after missed heartbeats","phase":"setup","evt":"case.begin"}
+{"ts":1760290661150,"lvl":"info","case":"evicts after missed heartbeats","phase":"execution","evt":"test.run"}
+{"ts":1760290661151,"lvl":"info","case":"evicts after missed heartbeats","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/hostess.spec/heartbeat_maintains_liveness.jsonl b/reports/hostess.spec/heartbeat_maintains_liveness.jsonl
new file mode 100644
index 0000000..c4a5c8b
--- /dev/null
+++ b/reports/hostess.spec/heartbeat_maintains_liveness.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661149,"lvl":"info","case":"heartbeat maintains liveness","phase":"setup","evt":"case.begin"}
+{"ts":1760290661150,"lvl":"info","case":"heartbeat maintains liveness","phase":"execution","evt":"test.run"}
+{"ts":1760290661151,"lvl":"info","case":"heartbeat maintains liveness","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl b/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
new file mode 100644
index 0000000..f420e26
--- /dev/null
+++ b/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661149,"lvl":"info","case":"marks in-use and back to available","phase":"setup","evt":"case.begin"}
+{"ts":1760290661150,"lvl":"info","case":"marks in-use and back to available","phase":"execution","evt":"test.run"}
+{"ts":1760290661151,"lvl":"info","case":"marks in-use and back to available","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl b/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
new file mode 100644
index 0000000..2928e58
--- /dev/null
+++ b/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661149,"lvl":"info","case":"registers and queries by capabilities","phase":"setup","evt":"case.begin"}
+{"ts":1760290661150,"lvl":"info","case":"registers and queries by capabilities","phase":"execution","evt":"test.run"}
+{"ts":1760290661151,"lvl":"info","case":"registers and queries by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":24,"status":"passed"}}
diff --git a/reports/index.json b/reports/index.json
new file mode 100644
index 0000000..de98bfe
--- /dev/null
+++ b/reports/index.json
@@ -0,0 +1,1667 @@
+{
+  "generated": "2025-10-12T17:37:43.104Z",
+  "totalTests": 151,
+  "artifacts": [
+    {
+      "testName": "initialize",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
+      "timestamp": "2025-10-12T17:37:41.008Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/router.test/initialize.jsonl"
+      }
+    },
+    {
+      "testName": "tools/resources list read",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
+      "timestamp": "2025-10-12T17:37:41.009Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/router.test/tools_resources_list_read.jsonl"
+      }
+    },
+    {
+      "testName": "should create and compare snapshots with masking",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.027Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"
+      }
+    },
+    {
+      "testName": "should detect mismatches",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.027Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/sample.spec/should_detect_mismatches.jsonl"
+      }
+    },
+    {
+      "testName": "should support custom mask rules",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.027Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/sample.spec/should_support_custom_mask_rules.jsonl"
+      }
+    },
+    {
+      "testName": "connect moves data 1:1",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.027Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/kernel.spec/connect_moves_data_1_1.jsonl"
+      }
+    },
+    {
+      "testName": "split fans out to multiple destinations",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.028Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"
+      }
+    },
+    {
+      "testName": "merge combines multiple sources into one destination",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.028Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"
+      }
+    },
+    {
+      "testName": "register/lookup filters by capabilities",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.028Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"
+      }
+    },
+    {
+      "testName": "round-trip a control frame",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.028Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"
+      }
+    },
+    {
+      "testName": "round-trip a Buffer",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.029Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"
+      }
+    },
+    {
+      "testName": "assert handshake event structure",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.029Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"
+      }
+    },
+    {
+      "testName": "should generate index.json with valid structure",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.034Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid timestamp format",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl"
+      }
+    },
+    {
+      "testName": "should have totalTests matching artifacts length",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl"
+      }
+    },
+    {
+      "testName": "should have at least one artifact entry",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid structure for each artifact entry",
+      "status": "pass",
+      "duration": 25,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid timestamps for each entry",
+      "status": "pass",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl"
+      }
+    },
+    {
+      "testName": "should reference summary.jsonl in artifacts",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl"
+      }
+    },
+    {
+      "testName": "should have caseFile path for each entry",
+      "status": "pass",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.035Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid location paths",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_valid_location_paths.jsonl"
+      }
+    },
+    {
+      "testName": "should create JSONL file for each test case",
+      "status": "pass",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl"
+      }
+    },
+    {
+      "testName": "should organize case files in suite directories",
+      "status": "pass",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl"
+      }
+    },
+    {
+      "testName": "should contain valid JSONL format",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl"
+      }
+    },
+    {
+      "testName": "should include case.begin event",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_include_case_begin_event.jsonl"
+      }
+    },
+    {
+      "testName": "should include test.run event",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_include_test_run_event.jsonl"
+      }
+    },
+    {
+      "testName": "should include case.end event with payload",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl"
+      }
+    },
+    {
+      "testName": "should have timestamps for all events",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl"
+      }
+    },
+    {
+      "testName": "should have chronological timestamps",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.036Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_chronological_timestamps.jsonl"
+      }
+    },
+    {
+      "testName": "should include test.error events for failed tests",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl"
+      }
+    },
+    {
+      "testName": "should have error-level log for case.end of failed tests",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl"
+      }
+    },
+    {
+      "testName": "should have summary.jsonl file",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl"
+      }
+    },
+    {
+      "testName": "should have matching test count between index and summary",
+      "status": "fail",
+      "duration": 10,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid JSONL in summary file",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl"
+      }
+    },
+    {
+      "testName": "should cross-reference between index and case files",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl"
+      }
+    },
+    {
+      "testName": "should have case name in JSONL events matching test name",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.037Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl"
+      }
+    },
+    {
+      "testName": "should handle test names with special characters",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl"
+      }
+    },
+    {
+      "testName": "should have unique case file paths",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl"
+      }
+    },
+    {
+      "testName": "should have all case files in reports directory",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl"
+      }
+    },
+    {
+      "testName": "should have consistent status values",
+      "status": "pass",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_consistent_status_values.jsonl"
+      }
+    },
+    {
+      "testName": "generates digest from synthetic logs with failures",
+      "status": "pass",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"
+      }
+    },
+    {
+      "testName": "returns null for passing tests",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/returns_null_for_passing_tests.jsonl"
+      }
+    },
+    {
+      "testName": "returns null when disabled",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/returns_null_when_disabled.jsonl"
+      }
+    },
+    {
+      "testName": "includes correct summary statistics",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.038Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/includes_correct_summary_statistics.jsonl"
+      }
+    },
+    {
+      "testName": "writes valid JSON file",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/writes_valid_JSON_file.jsonl"
+      }
+    },
+    {
+      "testName": "writes valid markdown file",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/writes_valid_markdown_file.jsonl"
+      }
+    },
+    {
+      "testName": "includes events matching error level",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/includes_events_matching_error_level.jsonl"
+      }
+    },
+    {
+      "testName": "includes events matching specific event name",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/includes_events_matching_specific_event_name.jsonl"
+      }
+    },
+    {
+      "testName": "applies slice action with window",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/applies_slice_action_with_window.jsonl"
+      }
+    },
+    {
+      "testName": "applies redact action to fields",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/applies_redact_action_to_fields.jsonl"
+      }
+    },
+    {
+      "testName": "respects priority order",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/respects_priority_order.jsonl"
+      }
+    },
+    {
+      "testName": "supports wildcard patterns in event matching",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.039Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl"
+      }
+    },
+    {
+      "testName": "supports multiple match criteria",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/supports_multiple_match_criteria.jsonl"
+      }
+    },
+    {
+      "testName": "enforces byte budget",
+      "status": "pass",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/enforces_byte_budget.jsonl"
+      }
+    },
+    {
+      "testName": "enforces line budget",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/enforces_line_budget.jsonl"
+      }
+    },
+    {
+      "testName": "keeps all events when within budget",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/keeps_all_events_when_within_budget.jsonl"
+      }
+    },
+    {
+      "testName": "identifies error-level events as suspects",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"
+      }
+    },
+    {
+      "testName": "scores failure events",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/scores_failure_events.jsonl"
+      }
+    },
+    {
+      "testName": "scores correlated events",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/scores_correlated_events.jsonl"
+      }
+    },
+    {
+      "testName": "scores events close to failure time",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.040Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/scores_events_close_to_failure_time.jsonl"
+      }
+    },
+    {
+      "testName": "limits suspects to top 5",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/limits_suspects_to_top_5.jsonl"
+      }
+    },
+    {
+      "testName": "returns empty suspects for no failure events",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl"
+      }
+    },
+    {
+      "testName": "handles empty log file",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/handles_empty_log_file.jsonl"
+      }
+    },
+    {
+      "testName": "handles missing log file",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/handles_missing_log_file.jsonl"
+      }
+    },
+    {
+      "testName": "skips malformed JSON lines",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/skips_malformed_JSON_lines.jsonl"
+      }
+    },
+    {
+      "testName": "handles events without optional fields",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/handles_events_without_optional_fields.jsonl"
+      }
+    },
+    {
+      "testName": "processes ingested Go test failures transparently",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl"
+      }
+    },
+    {
+      "testName": "recognizes Go test.fail events in rules",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"
+      }
+    },
+    {
+      "testName": "parses go test -json fixture data",
+      "status": "pass",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.041Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"
+      }
+    },
+    {
+      "testName": "parses individual event fields correctly",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"
+      }
+    },
+    {
+      "testName": "handles empty input",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/handles_empty_input.jsonl"
+      }
+    },
+    {
+      "testName": "handles malformed JSON lines",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"
+      }
+    },
+    {
+      "testName": "converts Go events to Laminar format",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"
+      }
+    },
+    {
+      "testName": "creates test.start events for run actions",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"
+      }
+    },
+    {
+      "testName": "creates test.output events for output actions",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"
+      }
+    },
+    {
+      "testName": "creates test.pass events with correct status",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"
+      }
+    },
+    {
+      "testName": "creates test.fail events with error level",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.042Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"
+      }
+    },
+    {
+      "testName": "creates test.skip events for skipped tests",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"
+      }
+    },
+    {
+      "testName": "generates summary with correct test results",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"
+      }
+    },
+    {
+      "testName": "includes duration in summary",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/includes_duration_in_summary.jsonl"
+      }
+    },
+    {
+      "testName": "includes location in summary",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/includes_location_in_summary.jsonl"
+      }
+    },
+    {
+      "testName": "includes artifactURI in summary",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"
+      }
+    },
+    {
+      "testName": "validates Laminar event structure",
+      "status": "pass",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/validates_Laminar_event_structure.jsonl"
+      }
+    },
+    {
+      "testName": "preserves timestamp ordering",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/preserves_timestamp_ordering.jsonl"
+      }
+    },
+    {
+      "testName": "writes JSONL files per test case",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.043Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"
+      }
+    },
+    {
+      "testName": "writes summary.jsonl file",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/writes_summary_jsonl_file.jsonl"
+      }
+    },
+    {
+      "testName": "groups events by test case correctly",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"
+      }
+    },
+    {
+      "testName": "writes valid JSONL format",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/writes_valid_JSONL_format.jsonl"
+      }
+    },
+    {
+      "testName": "processes fixture data from parsing to output",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"
+      }
+    },
+    {
+      "testName": "should parse regular characters",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_parse_regular_characters.jsonl"
+      }
+    },
+    {
+      "testName": "should handle newlines",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_newlines.jsonl"
+      }
+    },
+    {
+      "testName": "should handle carriage return",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_carriage_return.jsonl"
+      }
+    },
+    {
+      "testName": "should parse ANSI cursor movement (CUP)",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle color codes (SGR)",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.044Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle color reset",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_color_reset.jsonl"
+      }
+    },
+    {
+      "testName": "should handle screen clearing (ED)",
+      "status": "pass",
+      "duration": 22,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle line clearing (EL)",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle cursor up (CUU)",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle cursor down (CUD)",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle cursor forward (CUF)",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle cursor back (CUB)",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"
+      }
+    },
+    {
+      "testName": "should handle line wrapping",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_line_wrapping.jsonl"
+      }
+    },
+    {
+      "testName": "should handle scrolling",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.045Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_scrolling.jsonl"
+      }
+    },
+    {
+      "testName": "should handle tabs",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_tabs.jsonl"
+      }
+    },
+    {
+      "testName": "should handle backspace",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/ansiParser.spec/should_handle_backspace.jsonl"
+      }
+    },
+    {
+      "testName": "returns false when module is not enabled",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl"
+      }
+    },
+    {
+      "testName": "returns consistent value for same module",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"
+      }
+    },
+    {
+      "testName": "returns false when config is disabled",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl"
+      }
+    },
+    {
+      "testName": "checks module against config.modules when enabled",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl"
+      }
+    },
+    {
+      "testName": "does not emit when on() returns false",
+      "status": "pass",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.046Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"
+      }
+    },
+    {
+      "testName": "emit returns immediately when module is disabled",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl"
+      }
+    },
+    {
+      "testName": "shouldEmit returns false when module is disabled",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl"
+      }
+    },
+    {
+      "testName": "emits to console when module is enabled",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"
+      }
+    },
+    {
+      "testName": "respects debug level filtering",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/respects_debug_level_filtering.jsonl"
+      }
+    },
+    {
+      "testName": "emits formatted output to console",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/emits_formatted_output_to_console.jsonl"
+      }
+    },
+    {
+      "testName": "handles emit without payload",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/handles_emit_without_payload.jsonl"
+      }
+    },
+    {
+      "testName": "shouldEmit respects level hierarchy",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.047Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"
+      }
+    },
+    {
+      "testName": "adds nodes and emits events",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.146Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"
+      }
+    },
+    {
+      "testName": "connects and emits connected",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.147Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/stateManager.spec/connects_and_emits_connected.jsonl"
+      }
+    },
+    {
+      "testName": "split and merge emit events",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.147Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/stateManager.spec/split_and_merge_emit_events.jsonl"
+      }
+    },
+    {
+      "testName": "validator enforces directionality when set",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.147Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"
+      }
+    },
+    {
+      "testName": "exporters produce strings",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.147Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/stateManager.spec/exporters_produce_strings.jsonl"
+      }
+    },
+    {
+      "testName": "should render raw ANSI to stdout",
+      "status": "pass",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.148Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"
+      }
+    },
+    {
+      "testName": "should handle ANSI escape sequences",
+      "status": "pass",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.148Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl"
+      }
+    },
+    {
+      "testName": "should write all data to log file",
+      "status": "pass",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.148Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"
+      }
+    },
+    {
+      "testName": "should append to existing log file",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.148Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl"
+      }
+    },
+    {
+      "testName": "should spawn a simple process",
+      "status": "pass",
+      "duration": 39,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.148Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"
+      }
+    },
+    {
+      "testName": "registers and queries by capabilities",
+      "status": "pass",
+      "duration": 24,
+      "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.149Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/hostess.spec/registers_and_queries_by_capabilities.jsonl"
+      }
+    },
+    {
+      "testName": "marks in-use and back to available",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.149Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/hostess.spec/marks_in-use_and_back_to_available.jsonl"
+      }
+    },
+    {
+      "testName": "evicts after missed heartbeats",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.149Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/hostess.spec/evicts_after_missed_heartbeats.jsonl"
+      }
+    },
+    {
+      "testName": "heartbeat maintains liveness",
+      "status": "pass",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:41.149Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/hostess.spec/heartbeat_maintains_liveness.jsonl"
+      }
+    },
+    {
+      "testName": "should load configuration",
+      "status": "pass",
+      "duration": 40,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.097Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_load_configuration.jsonl"
+      }
+    },
+    {
+      "testName": "should throw if up() called without load()",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.098Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_throw_if_up___called_without_load__.jsonl"
+      }
+    },
+    {
+      "testName": "should instantiate modules and register with hostess",
+      "status": "pass",
+      "duration": 53,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.098Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl"
+      }
+    },
+    {
+      "testName": "should wire connections via StateManager",
+      "status": "pass",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.098Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_wire_connections_via_StateManager.jsonl"
+      }
+    },
+    {
+      "testName": "should support restartNode",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.099Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_support_restartNode.jsonl"
+      }
+    },
+    {
+      "testName": "should throw on restartNode for non-existent node",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.099Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl"
+      }
+    },
+    {
+      "testName": "split: all destinations receive identical data",
+      "status": "pass",
+      "duration": 130,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.100Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl"
+      }
+    },
+    {
+      "testName": "split: order preservation across destinations",
+      "status": "pass",
+      "duration": 182,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.100Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/split__order_preservation_across_destinations.jsonl"
+      }
+    },
+    {
+      "testName": "merge: all source data reaches destination",
+      "status": "pass",
+      "duration": 283,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.100Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl"
+      }
+    },
+    {
+      "testName": "merge: no data loss with concurrent writes",
+      "status": "pass",
+      "duration": 150,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.101Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl"
+      }
+    },
+    {
+      "testName": "split-then-merge: roundtrip preserves all data",
+      "status": "pass",
+      "duration": 1111,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.101Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl"
+      }
+    },
+    {
+      "testName": "empty split: source with zero destinations completes",
+      "status": "pass",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.101Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl"
+      }
+    },
+    {
+      "testName": "empty merge: destination with zero sources completes",
+      "status": "pass",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.102Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl"
+      }
+    },
+    {
+      "testName": "should handle environment variables",
+      "status": "pass",
+      "duration": 244,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.102Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl"
+      }
+    },
+    {
+      "testName": "should register with Hostess on spawn",
+      "status": "pass",
+      "duration": 123,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.102Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl"
+      }
+    },
+    {
+      "testName": "should gracefully shutdown with SIGTERM",
+      "status": "pass",
+      "duration": 68,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.102Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl"
+      }
+    },
+    {
+      "testName": "should restart on failure with \"on-failure\" policy",
+      "status": "pass",
+      "duration": 534,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.103Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl"
+      }
+    },
+    {
+      "testName": "should not restart with \"never\" policy",
+      "status": "pass",
+      "duration": 329,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.103Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl"
+      }
+    },
+    {
+      "testName": "should respect maxRestarts limit",
+      "status": "pass",
+      "duration": 529,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.103Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl"
+      }
+    },
+    {
+      "testName": "should provide process info",
+      "status": "pass",
+      "duration": 36,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T17:37:43.104Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/externalServerWrapper.spec/should_provide_process_info.jsonl"
+      }
+    }
+  ]
+}
\ No newline at end of file
diff --git a/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl b/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
new file mode 100644
index 0000000..3a1a906
--- /dev/null
+++ b/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663102,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"setup","evt":"case.begin"}
+{"ts":1760290663103,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"execution","evt":"test.run"}
+{"ts":1760290663104,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl b/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
new file mode 100644
index 0000000..d16eef1
--- /dev/null
+++ b/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663101,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"setup","evt":"case.begin"}
+{"ts":1760290663102,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"execution","evt":"test.run"}
+{"ts":1760290663103,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl b/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
new file mode 100644
index 0000000..2500b66
--- /dev/null
+++ b/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663100,"lvl":"info","case":"merge: all source data reaches destination","phase":"setup","evt":"case.begin"}
+{"ts":1760290663101,"lvl":"info","case":"merge: all source data reaches destination","phase":"execution","evt":"test.run"}
+{"ts":1760290663102,"lvl":"info","case":"merge: all source data reaches destination","phase":"teardown","evt":"case.end","payload":{"duration":283,"status":"passed"}}
diff --git a/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl b/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
new file mode 100644
index 0000000..b7d1b62
--- /dev/null
+++ b/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663101,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"setup","evt":"case.begin"}
+{"ts":1760290663102,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"execution","evt":"test.run"}
+{"ts":1760290663103,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"teardown","evt":"case.end","payload":{"duration":150,"status":"passed"}}
diff --git a/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl b/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
new file mode 100644
index 0000000..b980f1f
--- /dev/null
+++ b/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663101,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"setup","evt":"case.begin"}
+{"ts":1760290663102,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"execution","evt":"test.run"}
+{"ts":1760290663103,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"teardown","evt":"case.end","payload":{"duration":1111,"status":"passed"}}
diff --git a/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl b/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
new file mode 100644
index 0000000..63dcc08
--- /dev/null
+++ b/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663100,"lvl":"info","case":"split: all destinations receive identical data","phase":"setup","evt":"case.begin"}
+{"ts":1760290663101,"lvl":"info","case":"split: all destinations receive identical data","phase":"execution","evt":"test.run"}
+{"ts":1760290663102,"lvl":"info","case":"split: all destinations receive identical data","phase":"teardown","evt":"case.end","payload":{"duration":130,"status":"passed"}}
diff --git a/reports/invariants.spec/split__order_preservation_across_destinations.jsonl b/reports/invariants.spec/split__order_preservation_across_destinations.jsonl
new file mode 100644
index 0000000..9866d74
--- /dev/null
+++ b/reports/invariants.spec/split__order_preservation_across_destinations.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290663100,"lvl":"info","case":"split: order preservation across destinations","phase":"setup","evt":"case.begin"}
+{"ts":1760290663101,"lvl":"info","case":"split: order preservation across destinations","phase":"execution","evt":"test.run"}
+{"ts":1760290663102,"lvl":"info","case":"split: order preservation across destinations","phase":"teardown","evt":"case.end","payload":{"duration":182,"status":"passed"}}
diff --git a/reports/kernel.spec/connect_moves_data_1_1.jsonl b/reports/kernel.spec/connect_moves_data_1_1.jsonl
new file mode 100644
index 0000000..64cd4e1
--- /dev/null
+++ b/reports/kernel.spec/connect_moves_data_1_1.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661027,"lvl":"info","case":"connect moves data 1:1","phase":"setup","evt":"case.begin"}
+{"ts":1760290661028,"lvl":"info","case":"connect moves data 1:1","phase":"execution","evt":"test.run"}
+{"ts":1760290661029,"lvl":"info","case":"connect moves data 1:1","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl b/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
new file mode 100644
index 0000000..ed7ae35
--- /dev/null
+++ b/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661028,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"setup","evt":"case.begin"}
+{"ts":1760290661029,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"execution","evt":"test.run"}
+{"ts":1760290661030,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl b/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
new file mode 100644
index 0000000..451802d
--- /dev/null
+++ b/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661028,"lvl":"info","case":"register/lookup filters by capabilities","phase":"setup","evt":"case.begin"}
+{"ts":1760290661029,"lvl":"info","case":"register/lookup filters by capabilities","phase":"execution","evt":"test.run"}
+{"ts":1760290661030,"lvl":"info","case":"register/lookup filters by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl b/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
new file mode 100644
index 0000000..11ba29d
--- /dev/null
+++ b/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661028,"lvl":"info","case":"split fans out to multiple destinations","phase":"setup","evt":"case.begin"}
+{"ts":1760290661029,"lvl":"info","case":"split fans out to multiple destinations","phase":"execution","evt":"test.run"}
+{"ts":1760290661030,"lvl":"info","case":"split fans out to multiple destinations","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl b/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
new file mode 100644
index 0000000..e29ad07
--- /dev/null
+++ b/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661148,"lvl":"info","case":"should append to existing log file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661149,"lvl":"info","case":"should append to existing log file","phase":"execution","evt":"test.run"}
+{"ts":1760290661150,"lvl":"info","case":"should append to existing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl b/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
new file mode 100644
index 0000000..1acf167
--- /dev/null
+++ b/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661148,"lvl":"info","case":"should write all data to log file","phase":"setup","evt":"case.begin"}
+{"ts":1760290661149,"lvl":"info","case":"should write all data to log file","phase":"execution","evt":"test.run"}
+{"ts":1760290661150,"lvl":"info","case":"should write all data to log file","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl b/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
new file mode 100644
index 0000000..db92c7a
--- /dev/null
+++ b/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661148,"lvl":"info","case":"should handle ANSI escape sequences","phase":"setup","evt":"case.begin"}
+{"ts":1760290661149,"lvl":"info","case":"should handle ANSI escape sequences","phase":"execution","evt":"test.run"}
+{"ts":1760290661150,"lvl":"info","case":"should handle ANSI escape sequences","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl b/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
new file mode 100644
index 0000000..8815aa0
--- /dev/null
+++ b/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661148,"lvl":"info","case":"should render raw ANSI to stdout","phase":"setup","evt":"case.begin"}
+{"ts":1760290661149,"lvl":"info","case":"should render raw ANSI to stdout","phase":"execution","evt":"test.run"}
+{"ts":1760290661150,"lvl":"info","case":"should render raw ANSI to stdout","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/router.test/initialize.jsonl b/reports/router.test/initialize.jsonl
new file mode 100644
index 0000000..ecc2495
--- /dev/null
+++ b/reports/router.test/initialize.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661008,"lvl":"info","case":"initialize","phase":"setup","evt":"case.begin"}
+{"ts":1760290661009,"lvl":"info","case":"initialize","phase":"execution","evt":"test.run"}
+{"ts":1760290661010,"lvl":"info","case":"initialize","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/router.test/tools_resources_list_read.jsonl b/reports/router.test/tools_resources_list_read.jsonl
new file mode 100644
index 0000000..0841c49
--- /dev/null
+++ b/reports/router.test/tools_resources_list_read.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661009,"lvl":"info","case":"tools/resources list read","phase":"setup","evt":"case.begin"}
+{"ts":1760290661010,"lvl":"info","case":"tools/resources list read","phase":"execution","evt":"test.run"}
+{"ts":1760290661011,"lvl":"info","case":"tools/resources list read","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl b/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
new file mode 100644
index 0000000..9ae3490
--- /dev/null
+++ b/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661027,"lvl":"info","case":"should create and compare snapshots with masking","phase":"setup","evt":"case.begin"}
+{"ts":1760290661028,"lvl":"info","case":"should create and compare snapshots with masking","phase":"execution","evt":"test.run"}
+{"ts":1760290661029,"lvl":"info","case":"should create and compare snapshots with masking","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/sample.spec/should_detect_mismatches.jsonl b/reports/sample.spec/should_detect_mismatches.jsonl
new file mode 100644
index 0000000..da99131
--- /dev/null
+++ b/reports/sample.spec/should_detect_mismatches.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661027,"lvl":"info","case":"should detect mismatches","phase":"setup","evt":"case.begin"}
+{"ts":1760290661028,"lvl":"info","case":"should detect mismatches","phase":"execution","evt":"test.run"}
+{"ts":1760290661029,"lvl":"info","case":"should detect mismatches","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/sample.spec/should_support_custom_mask_rules.jsonl b/reports/sample.spec/should_support_custom_mask_rules.jsonl
new file mode 100644
index 0000000..6072199
--- /dev/null
+++ b/reports/sample.spec/should_support_custom_mask_rules.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661027,"lvl":"info","case":"should support custom mask rules","phase":"setup","evt":"case.begin"}
+{"ts":1760290661028,"lvl":"info","case":"should support custom mask rules","phase":"execution","evt":"test.run"}
+{"ts":1760290661029,"lvl":"info","case":"should support custom mask rules","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl b/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
new file mode 100644
index 0000000..08583c6
--- /dev/null
+++ b/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661146,"lvl":"info","case":"adds nodes and emits events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661147,"lvl":"info","case":"adds nodes and emits events","phase":"execution","evt":"test.run"}
+{"ts":1760290661148,"lvl":"info","case":"adds nodes and emits events","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/stateManager.spec/connects_and_emits_connected.jsonl b/reports/stateManager.spec/connects_and_emits_connected.jsonl
new file mode 100644
index 0000000..6a8dbea
--- /dev/null
+++ b/reports/stateManager.spec/connects_and_emits_connected.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661146,"lvl":"info","case":"connects and emits connected","phase":"setup","evt":"case.begin"}
+{"ts":1760290661147,"lvl":"info","case":"connects and emits connected","phase":"execution","evt":"test.run"}
+{"ts":1760290661148,"lvl":"info","case":"connects and emits connected","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/stateManager.spec/exporters_produce_strings.jsonl b/reports/stateManager.spec/exporters_produce_strings.jsonl
new file mode 100644
index 0000000..fde9b3d
--- /dev/null
+++ b/reports/stateManager.spec/exporters_produce_strings.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661147,"lvl":"info","case":"exporters produce strings","phase":"setup","evt":"case.begin"}
+{"ts":1760290661148,"lvl":"info","case":"exporters produce strings","phase":"execution","evt":"test.run"}
+{"ts":1760290661149,"lvl":"info","case":"exporters produce strings","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/stateManager.spec/split_and_merge_emit_events.jsonl b/reports/stateManager.spec/split_and_merge_emit_events.jsonl
new file mode 100644
index 0000000..28a3e87
--- /dev/null
+++ b/reports/stateManager.spec/split_and_merge_emit_events.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661147,"lvl":"info","case":"split and merge emit events","phase":"setup","evt":"case.begin"}
+{"ts":1760290661148,"lvl":"info","case":"split and merge emit events","phase":"execution","evt":"test.run"}
+{"ts":1760290661149,"lvl":"info","case":"split and merge emit events","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl b/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
new file mode 100644
index 0000000..fd6b622
--- /dev/null
+++ b/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661147,"lvl":"info","case":"validator enforces directionality when set","phase":"setup","evt":"case.begin"}
+{"ts":1760290661148,"lvl":"info","case":"validator enforces directionality when set","phase":"execution","evt":"test.run"}
+{"ts":1760290661149,"lvl":"info","case":"validator enforces directionality when set","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/summary.jsonl b/reports/summary.jsonl
index d28bbc0..eab1801 100644
--- a/reports/summary.jsonl
+++ b/reports/summary.jsonl
@@ -1,122 +1,151 @@
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_empty_input.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_duration_in_summary.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_location_in_summary.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/validates_Laminar_event_structure.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/preserves_timestamp_ordering.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_summary_jsonl_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_valid_JSONL_format.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_detect_mismatches.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_support_custom_mask_rules.jsonl"}
-{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/initialize.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/tools_resources_list_read.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_detect_mismatches.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_support_custom_mask_rules.jsonl"}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/connect_moves_data_1_1.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl"}
+{"status":"pass","duration":25,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl"}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl"}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_location_paths.jsonl"}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl"}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_begin_event.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_run_event.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_chronological_timestamps.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl"}
+{"status":"fail","duration":10,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl","error":"expected 1 to be greater than or equal to 121"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl"}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_consistent_status_values.jsonl"}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_for_passing_tests.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_when_disabled.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_correct_summary_statistics.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_JSON_file.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_when_disabled.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_correct_summary_statistics.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_JSON_file.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_markdown_file.jsonl"}
 {"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_error_level.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_specific_event_name.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_slice_action_with_window.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_redact_action_to_fields.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_slice_action_with_window.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_redact_action_to_fields.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/respects_priority_order.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_multiple_match_criteria.jsonl"}
-{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_byte_budget.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_line_budget.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_multiple_match_criteria.jsonl"}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_byte_budget.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_line_budget.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/keeps_all_events_when_within_budget.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_failure_events.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_correlated_events.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_events_close_to_failure_time.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/limits_suspects_to_top_5.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_empty_log_file.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_missing_log_file.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_empty_log_file.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_missing_log_file.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/skips_malformed_JSON_lines.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_events_without_optional_fields.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_empty_input.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_duration_in_summary.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_location_in_summary.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/validates_Laminar_event_structure.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/preserves_timestamp_ordering.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_summary_jsonl_file.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_valid_JSONL_format.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_regular_characters.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_newlines.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_carriage_return.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_reset.jsonl"}
-{"status":"pass","duration":23,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"}
+{"status":"pass","duration":22,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_wrapping.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_scrolling.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_wrapping.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_scrolling.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_tabs.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_backspace.jsonl"}
-{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/connect_moves_data_1_1.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/initialize.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/tools_resources_list_read.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_backspace.jsonl"}
 {"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/respects_debug_level_filtering.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_formatted_output_to_console.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/respects_debug_level_filtering.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_formatted_output_to_console.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/handles_emit_without_payload.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/connects_and_emits_connected.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/split_and_merge_emit_events.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/exporters_produce_strings.jsonl"}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"}
 {"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl"}
-{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/registers_and_queries_by_capabilities.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/marks_in-use_and_back_to_available.jsonl"}
+{"status":"pass","duration":39,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"}
+{"status":"pass","duration":24,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/registers_and_queries_by_capabilities.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/marks_in-use_and_back_to_available.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/evicts_after_missed_heartbeats.jsonl"}
 {"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/heartbeat_maintains_liveness.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/connects_and_emits_connected.jsonl"}
-{"status":"pass","duration":33,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/split_and_merge_emit_events.jsonl"}
-{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/exporters_produce_strings.jsonl"}
-{"status":"pass","duration":59,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"}
-{"status":"pass","duration":23,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_load_configuration.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_if_up___called_without_load__.jsonl"}
-{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl"}
-{"status":"pass","duration":36,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_wire_connections_via_StateManager.jsonl"}
+{"status":"pass","duration":40,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_load_configuration.jsonl"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_if_up___called_without_load__.jsonl"}
+{"status":"pass","duration":53,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl"}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_wire_connections_via_StateManager.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_support_restartNode.jsonl"}
 {"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl"}
-{"status":"pass","duration":94,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split__order_preservation_across_destinations.jsonl"}
-{"status":"pass","duration":37,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl"}
-{"status":"pass","duration":266,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl"}
-{"status":"pass","duration":1196,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl"}
+{"status":"pass","duration":130,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl"}
+{"status":"pass","duration":182,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split__order_preservation_across_destinations.jsonl"}
+{"status":"pass","duration":283,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl"}
+{"status":"pass","duration":150,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl"}
+{"status":"pass","duration":1111,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl"}
 {"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl"}
-{"status":"pass","duration":245,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl"}
-{"status":"pass","duration":41,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl"}
-{"status":"pass","duration":56,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl"}
-{"status":"pass","duration":553,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl"}
-{"status":"pass","duration":333,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl"}
-{"status":"pass","duration":527,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl"}
-{"status":"pass","duration":30,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_provide_process_info.jsonl"}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl"}
+{"status":"pass","duration":244,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl"}
+{"status":"pass","duration":123,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl"}
+{"status":"pass","duration":68,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl"}
+{"status":"pass","duration":534,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl"}
+{"status":"pass","duration":329,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl"}
+{"status":"pass","duration":529,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl"}
+{"status":"pass","duration":36,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_provide_process_info.jsonl"}
diff --git a/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl b/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
new file mode 100644
index 0000000..488b6a4
--- /dev/null
+++ b/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661029,"lvl":"info","case":"assert handshake event structure","phase":"setup","evt":"case.begin"}
+{"ts":1760290661030,"lvl":"info","case":"assert handshake event structure","phase":"execution","evt":"test.run"}
+{"ts":1760290661031,"lvl":"info","case":"assert handshake event structure","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl b/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
new file mode 100644
index 0000000..38b4b0c
--- /dev/null
+++ b/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661029,"lvl":"info","case":"round-trip a Buffer","phase":"setup","evt":"case.begin"}
+{"ts":1760290661030,"lvl":"info","case":"round-trip a Buffer","phase":"execution","evt":"test.run"}
+{"ts":1760290661031,"lvl":"info","case":"round-trip a Buffer","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl b/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
new file mode 100644
index 0000000..f8b4b6c
--- /dev/null
+++ b/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
@@ -0,0 +1,3 @@
+{"ts":1760290661028,"lvl":"info","case":"round-trip a control frame","phase":"setup","evt":"case.begin"}
+{"ts":1760290661029,"lvl":"info","case":"round-trip a control frame","phase":"execution","evt":"test.run"}
+{"ts":1760290661030,"lvl":"info","case":"round-trip a control frame","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/scripts/lam.ts b/scripts/lam.ts
index ac72ec5..3b96327 100644
--- a/scripts/lam.ts
+++ b/scripts/lam.ts
@@ -34,11 +34,49 @@ Examples:
 }
 
 function readSummary(): any[] {
+  const indexPath = 'reports/index.json';
+  if (fs.existsSync(indexPath)) {
+    try {
+      const index = JSON.parse(fs.readFileSync(indexPath, 'utf-8'));
+      return index.artifacts || [];
+    } catch (err) {
+      console.error('Failed to parse index.json, falling back to summary.jsonl');
+    }
+  }
+  
   const p = 'reports/summary.jsonl';
   if (!fs.existsSync(p)) return [];
   return fs.readFileSync(p, 'utf-8').trim().split(/\n+/).map(l => { try { return JSON.parse(l); } catch { return undefined; } }).filter(Boolean);
 }
 
+function findTestInIndex(caseId: string): any {
+  const indexPath = 'reports/index.json';
+  if (!fs.existsSync(indexPath)) return null;
+  
+  try {
+    const index = JSON.parse(fs.readFileSync(indexPath, 'utf-8'));
+    const artifacts = index.artifacts || [];
+    
+    // Normalize caseId: suite/test_name format
+    const parts = caseId.split('/');
+    if (parts.length !== 2) return null;
+    
+    const [suite, testName] = parts;
+    const normalized = testName.replace(/_/g, ' ');
+    
+    return artifacts.find((a: any) => {
+      const entryLocation = a.location || '';
+      const entryTestName = a.testName || '';
+      return entryLocation.includes(suite) && (
+        entryTestName === normalized ||
+        entryTestName.replace(/\s+/g, '_') === testName
+      );
+    });
+  } catch (err) {
+    return null;
+  }
+}
+
 async function main() {
   const [,, cmd, ...rest] = process.argv;
   const args = new Map<string,string|true>();
@@ -80,7 +118,28 @@ async function main() {
       const entries = readSummary();
       if (!entries.length) { console.log('No summary found. Run `lam run` first.'); break; }
       for (const e of entries) {
-        console.log(`${e.status.toUpperCase()} ${e.duration}ms ${e.location} → ${e.artifactURI||''}`);
+        const status = (e.status || 'unknown').toUpperCase();
+        const duration = e.duration || 0;
+        const location = e.location || '';
+        const testName = e.testName || '';
+        
+        // Check for digest file
+        let digestLink = '';
+        if (e.artifacts?.digestFile && fs.existsSync(e.artifacts.digestFile)) {
+          digestLink = ` [digest: ${e.artifacts.digestFile}]`;
+        } else {
+          // Try to find digest file based on caseFile path
+          const caseFile = e.artifacts?.caseFile || e.artifactURI || '';
+          if (caseFile.endsWith('.jsonl')) {
+            const digestPath = caseFile.replace('.jsonl', '.digest.md');
+            if (fs.existsSync(digestPath)) {
+              digestLink = ` [digest: ${digestPath}]`;
+            }
+          }
+        }
+        
+        const artifactURI = e.artifactURI || e.artifacts?.caseFile || '';
+        console.log(`${status} ${duration}ms ${location} → ${artifactURI}${digestLink}`);
       }
       break;
     }
@@ -90,14 +149,58 @@ async function main() {
       const around = (args.get('around') as string) || 'assert.fail';
       const window = (args.get('window') as string) || '50';
       
-      const digestPath = `reports/${caseId}.digest.md`;
-      if (fs.existsSync(digestPath)) {
+      // Find test in index.json to get digest path and case file
+      const testEntry = findTestInIndex(caseId);
+      let digestPath: string | undefined;
+      let caseFile: string | undefined;
+      
+      if (testEntry?.artifacts?.caseFile) {
+        caseFile = testEntry.artifacts.caseFile;
+      } else {
+        // Fallback: construct from caseId
+        const parts = caseId.split('/');
+        if (parts.length === 2) {
+          const [suite, test] = parts;
+          caseFile = `reports/${suite}/${test}.jsonl`;
+        }
+      }
+      
+      // Try to find digest file
+      if (testEntry?.artifacts?.digestFile && fs.existsSync(testEntry.artifacts.digestFile)) {
+        digestPath = testEntry.artifacts.digestFile;
+      } else if (caseFile && caseFile.endsWith('.jsonl')) {
+        // Derive digest path from case file
+        const derived = caseFile.replace('.jsonl', '.digest.md');
+        if (fs.existsSync(derived)) {
+          digestPath = derived;
+        }
+      }
+      
+      if (!digestPath) {
+        // Final fallback: try common patterns
+        const parts = caseId.split('/');
+        if (parts.length === 2) {
+          const [suite, test] = parts;
+          const candidates = [
+            `reports/${suite}/${test}.digest.md`,
+            `reports/${caseId}.digest.md`,
+          ];
+          digestPath = candidates.find(p => fs.existsSync(p));
+        }
+      }
+      
+      if (digestPath && fs.existsSync(digestPath)) {
         console.log('=== DIGEST ===');
         console.log(fs.readFileSync(digestPath, 'utf-8'));
         console.log('\n=== FULL LOG ===');
       }
       
-      sh('npm', ['run','logq','--','case', caseId, '--around', around, '--window', window]);
+      if (!caseFile || !fs.existsSync(caseFile)) {
+        console.error(`Case file not found for ${caseId}`);
+        process.exit(1);
+      }
+      
+      sh('npm', ['run','logq','--','--around', around, '--window', window, caseFile]);
       break;
     }
     case 'digest': {
diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
index cc304e2..5cbcd5a 100644
--- a/src/test/reporter/jsonlReporter.ts
+++ b/src/test/reporter/jsonlReporter.ts
@@ -10,11 +10,33 @@ interface TestSummary {
   error?: string;
 }
 
+interface ArtifactIndexEntry {
+  testName: string;
+  status: 'pass' | 'fail' | 'skip';
+  duration: number;
+  location: string;
+  timestamp: string;
+  artifacts: {
+    summary: string;
+    caseFile?: string;
+    digestFile?: string;
+  };
+}
+
+interface ArtifactIndex {
+  generated: string;
+  totalTests: number;
+  artifacts: ArtifactIndexEntry[];
+}
+
 export default class JSONLReporter implements Reporter {
   private ctx!: Vitest;
   private summaryPath = 'reports/summary.jsonl';
+  private indexPath = 'reports/index.json';
   private summaryStream?: fs.WriteStream;
   private processedTests = new Set<string>();
+  private indexEntries: ArtifactIndexEntry[] = [];
+  private caseStreams = new Map<string, fs.WriteStream>();
 
   onInit(ctx: Vitest): void {
     this.ctx = ctx;
@@ -24,6 +46,7 @@ export default class JSONLReporter implements Reporter {
       fs.unlinkSync(this.summaryPath);
     }
     this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
+    this.indexEntries = [];
   }
 
   onCollected(): void {
@@ -38,6 +61,12 @@ export default class JSONLReporter implements Reporter {
     if (this.summaryStream) {
       this.summaryStream.end();
     }
+    // Close all per-case streams
+    for (const stream of this.caseStreams.values()) {
+      stream.end();
+    }
+    this.caseStreams.clear();
+    this.generateIndex();
   }
 
   private processFiles(files: File[]): void {
@@ -84,6 +113,9 @@ export default class JSONLReporter implements Reporter {
     const caseName = task.name.replace(/[^a-zA-Z0-9-_]/g, '_');
     const artifactURI = `reports/${suiteName}/${caseName}.jsonl`;
 
+    // Write per-case JSONL file with test lifecycle events
+    this.writePerCaseJSONL(artifactURI, task.name, state, duration, result.errors);
+
     const summary: TestSummary = {
       status: state,
       duration,
@@ -98,5 +130,101 @@ export default class JSONLReporter implements Reporter {
     if (this.summaryStream) {
       this.summaryStream.write(JSON.stringify(summary) + '\n');
     }
+
+    const suitePath = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
+    const digestPath = `reports/${suitePath}/digest.jsonl`;
+    
+    this.indexEntries.push({
+      testName: task.name,
+      status: state,
+      duration,
+      location,
+      timestamp: new Date().toISOString(),
+      artifacts: {
+        summary: this.summaryPath,
+        caseFile: artifactURI,
+        digestFile: fs.existsSync(digestPath) ? digestPath : undefined,
+      },
+    });
+  }
+
+  private writePerCaseJSONL(
+    artifactPath: string,
+    caseName: string,
+    state: 'pass' | 'fail' | 'skip',
+    duration: number,
+    errors?: any[]
+  ): void {
+    const dir = path.dirname(artifactPath);
+    fs.mkdirSync(dir, { recursive: true });
+
+    // Remove existing file if it exists
+    if (fs.existsSync(artifactPath)) {
+      fs.unlinkSync(artifactPath);
+    }
+
+    const stream = fs.createWriteStream(artifactPath, { flags: 'a' });
+    const ts = Date.now();
+
+    // Write test lifecycle events
+    // 1. Test begin event
+    stream.write(JSON.stringify({
+      ts,
+      lvl: 'info',
+      case: caseName,
+      phase: 'setup',
+      evt: 'case.begin'
+    }) + '\n');
+
+    // 2. Test execution event
+    stream.write(JSON.stringify({
+      ts: ts + 1,
+      lvl: 'info',
+      case: caseName,
+      phase: 'execution',
+      evt: 'test.run'
+    }) + '\n');
+
+    // 3. If there are errors, write error events
+    if (errors && errors.length > 0) {
+      errors.forEach((error, idx) => {
+        stream.write(JSON.stringify({
+          ts: ts + 2 + idx,
+          lvl: 'error',
+          case: caseName,
+          phase: 'execution',
+          evt: 'test.error',
+          payload: {
+            message: error.message || String(error),
+            stack: error.stack
+          }
+        }) + '\n');
+      });
+    }
+
+    // 4. Test end event with result
+    stream.write(JSON.stringify({
+      ts: ts + 2 + (errors?.length || 0),
+      lvl: state === 'fail' ? 'error' : 'info',
+      case: caseName,
+      phase: 'teardown',
+      evt: 'case.end',
+      payload: {
+        duration,
+        status: state === 'pass' ? 'passed' : state === 'fail' ? 'failed' : 'skipped'
+      }
+    }) + '\n');
+
+    stream.end();
+  }
+
+  private generateIndex(): void {
+    const index: ArtifactIndex = {
+      generated: new Date().toISOString(),
+      totalTests: this.indexEntries.length,
+      artifacts: this.indexEntries,
+    };
+
+    fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
   }
 }
diff --git a/tests/laminar/coreReporter.spec.ts b/tests/laminar/coreReporter.spec.ts
new file mode 100644
index 0000000..21b6020
--- /dev/null
+++ b/tests/laminar/coreReporter.spec.ts
@@ -0,0 +1,316 @@
+import { describe, it, expect, beforeAll } from 'vitest';
+import * as fs from 'fs';
+import * as path from 'path';
+
+const REPORTS_DIR = 'reports';
+const INDEX_PATH = path.join(REPORTS_DIR, 'index.json');
+const SUMMARY_PATH = path.join(REPORTS_DIR, 'summary.jsonl');
+
+interface ArtifactIndexEntry {
+  testName: string;
+  status: 'pass' | 'fail' | 'skip';
+  duration: number;
+  location: string;
+  timestamp: string;
+  artifacts: {
+    summary: string;
+    caseFile?: string;
+    digestFile?: string;
+  };
+}
+
+interface ArtifactIndex {
+  generated: string;
+  totalTests: number;
+  artifacts: ArtifactIndexEntry[];
+}
+
+describe('Laminar Core Reporter - Per-case JSONL and Index', () => {
+  let indexData: ArtifactIndex;
+
+  beforeAll(() => {
+    expect(fs.existsSync(INDEX_PATH), 'index.json should exist').toBe(true);
+    const indexContent = fs.readFileSync(INDEX_PATH, 'utf-8');
+    indexData = JSON.parse(indexContent);
+  });
+
+  describe('index.json generation', () => {
+    it('should generate index.json with valid structure', () => {
+      expect(indexData).toBeDefined();
+      expect(indexData.generated).toBeDefined();
+      expect(indexData.totalTests).toBeGreaterThan(0);
+      expect(Array.isArray(indexData.artifacts)).toBe(true);
+    });
+
+    it('should have valid timestamp format', () => {
+      const timestamp = new Date(indexData.generated);
+      expect(timestamp.toString()).not.toBe('Invalid Date');
+    });
+
+    it('should have totalTests matching artifacts length', () => {
+      expect(indexData.totalTests).toBe(indexData.artifacts.length);
+    });
+
+    it('should have at least one artifact entry', () => {
+      expect(indexData.artifacts.length).toBeGreaterThan(0);
+    });
+  });
+
+  describe('index.json artifact entries', () => {
+    it('should have valid structure for each artifact entry', () => {
+      indexData.artifacts.forEach((entry, idx) => {
+        expect(entry.testName, `artifact[${idx}].testName`).toBeDefined();
+        expect(entry.status, `artifact[${idx}].status`).toMatch(/^(pass|fail|skip)$/);
+        expect(typeof entry.duration, `artifact[${idx}].duration type`).toBe('number');
+        expect(entry.location, `artifact[${idx}].location`).toBeDefined();
+        expect(entry.timestamp, `artifact[${idx}].timestamp`).toBeDefined();
+        expect(entry.artifacts, `artifact[${idx}].artifacts`).toBeDefined();
+      });
+    });
+
+    it('should have valid timestamps for each entry', () => {
+      indexData.artifacts.forEach((entry, idx) => {
+        const timestamp = new Date(entry.timestamp);
+        expect(timestamp.toString(), `artifact[${idx}] timestamp`).not.toBe('Invalid Date');
+      });
+    });
+
+    it('should reference summary.jsonl in artifacts', () => {
+      indexData.artifacts.forEach((entry, idx) => {
+        expect(entry.artifacts.summary, `artifact[${idx}].artifacts.summary`).toBe('reports/summary.jsonl');
+      });
+    });
+
+    it('should have caseFile path for each entry', () => {
+      indexData.artifacts.forEach((entry, idx) => {
+        expect(entry.artifacts.caseFile, `artifact[${idx}].artifacts.caseFile`).toBeDefined();
+        expect(entry.artifacts.caseFile, `artifact[${idx}].artifacts.caseFile`).toMatch(/^reports\/.+\.jsonl$/);
+      });
+    });
+
+    it('should have valid location paths', () => {
+      indexData.artifacts.forEach((entry, idx) => {
+        expect(entry.location, `artifact[${idx}].location`).toMatch(/\.ts:\d+$/);
+      });
+    });
+  });
+
+  describe('per-case JSONL files existence', () => {
+    it('should create JSONL file for each test case', () => {
+      indexData.artifacts.forEach((entry) => {
+        if (entry.artifacts.caseFile) {
+          const caseFilePath = path.join(entry.artifacts.caseFile);
+          expect(
+            fs.existsSync(caseFilePath),
+            `Case file should exist: ${caseFilePath}`
+          ).toBe(true);
+        }
+      });
+    });
+
+    it('should organize case files in suite directories', () => {
+      indexData.artifacts.forEach((entry) => {
+        if (entry.artifacts.caseFile) {
+          const parts = entry.artifacts.caseFile.split('/');
+          expect(parts.length, `${entry.artifacts.caseFile} should have suite directory`).toBeGreaterThanOrEqual(3);
+          expect(parts[0]).toBe('reports');
+          expect(parts[1]).toMatch(/\.(spec|test)$/);
+        }
+      });
+    });
+  });
+
+  describe('per-case JSONL file structure', () => {
+    it('should contain valid JSONL format', () => {
+      const sampleEntry = indexData.artifacts.find(e => e.status === 'pass');
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n');
+        
+        lines.forEach((line, idx) => {
+          expect(() => JSON.parse(line), `Line ${idx} should be valid JSON`).not.toThrow();
+        });
+      }
+    });
+
+    it('should include case.begin event', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        const beginEvent = lines.find(e => e.evt === 'case.begin');
+        expect(beginEvent, 'case.begin event should exist').toBeDefined();
+        expect(beginEvent?.phase).toBe('setup');
+        expect(beginEvent?.lvl).toBe('info');
+        expect(beginEvent?.case).toBeDefined();
+      }
+    });
+
+    it('should include test.run event', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        const runEvent = lines.find(e => e.evt === 'test.run');
+        expect(runEvent, 'test.run event should exist').toBeDefined();
+        expect(runEvent?.phase).toBe('execution');
+        expect(runEvent?.lvl).toBe('info');
+      }
+    });
+
+    it('should include case.end event with payload', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        const endEvent = lines.find(e => e.evt === 'case.end');
+        expect(endEvent, 'case.end event should exist').toBeDefined();
+        expect(endEvent?.phase).toBe('teardown');
+        expect(endEvent?.payload).toBeDefined();
+        expect(endEvent?.payload?.duration).toBeGreaterThanOrEqual(0);
+        expect(endEvent?.payload?.status).toMatch(/^(passed|failed|skipped)$/);
+      }
+    });
+
+    it('should have timestamps for all events', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        lines.forEach((event, idx) => {
+          expect(event.ts, `Event ${idx} should have timestamp`).toBeDefined();
+          expect(typeof event.ts, `Event ${idx} ts should be number`).toBe('number');
+        });
+      }
+    });
+
+    it('should have chronological timestamps', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        for (let i = 1; i < lines.length; i++) {
+          expect(lines[i].ts, `Event ${i} timestamp should be >= previous`).toBeGreaterThanOrEqual(lines[i - 1].ts);
+        }
+      }
+    });
+  });
+
+  describe('failed test case JSONL structure', () => {
+    it('should include test.error events for failed tests', () => {
+      const failedEntry = indexData.artifacts.find(e => e.status === 'fail');
+      if (failedEntry?.artifacts.caseFile && fs.existsSync(failedEntry.artifacts.caseFile)) {
+        const content = fs.readFileSync(failedEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        const errorEvent = lines.find(e => e.evt === 'test.error');
+        expect(errorEvent, 'test.error event should exist for failed test').toBeDefined();
+        expect(errorEvent?.lvl).toBe('error');
+        expect(errorEvent?.payload).toBeDefined();
+        expect(errorEvent?.payload?.message).toBeDefined();
+      }
+    });
+
+    it('should have error-level log for case.end of failed tests', () => {
+      const failedEntry = indexData.artifacts.find(e => e.status === 'fail');
+      if (failedEntry?.artifacts.caseFile && fs.existsSync(failedEntry.artifacts.caseFile)) {
+        const content = fs.readFileSync(failedEntry.artifacts.caseFile, 'utf-8');
+        const lines = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        const endEvent = lines.find(e => e.evt === 'case.end');
+        expect(endEvent?.lvl).toBe('error');
+        expect(endEvent?.payload?.status).toBe('failed');
+      }
+    });
+  });
+
+  describe('cross-references validation', () => {
+    it('should have summary.jsonl file', () => {
+      expect(fs.existsSync(SUMMARY_PATH), 'summary.jsonl should exist').toBe(true);
+    });
+
+    it('should have matching test count between index and summary', () => {
+      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');
+      const summaryLines = summaryContent.trim().split('\n');
+      expect(summaryLines.length).toBeGreaterThanOrEqual(indexData.totalTests);
+    });
+
+    it('should have valid JSONL in summary file', () => {
+      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');
+      const summaryLines = summaryContent.trim().split('\n').filter(l => l.length > 0);
+      
+      summaryLines.forEach((line, idx) => {
+        expect(() => JSON.parse(line), `Summary line ${idx} should be valid JSON`).not.toThrow();
+      });
+    });
+
+    it('should cross-reference between index and case files', () => {
+      indexData.artifacts.slice(0, 5).forEach((entry) => {
+        if (entry.artifacts.caseFile) {
+          expect(fs.existsSync(entry.artifacts.caseFile)).toBe(true);
+          
+          const caseContent = fs.readFileSync(entry.artifacts.caseFile, 'utf-8');
+          const events = caseContent.trim().split('\n').map(l => JSON.parse(l));
+          
+          const endEvent = events.find(e => e.evt === 'case.end');
+          expect(endEvent?.payload?.duration).toBe(entry.duration);
+        }
+      });
+    });
+
+    it('should have case name in JSONL events matching test name', () => {
+      const sampleEntry = indexData.artifacts[0];
+      if (sampleEntry?.artifacts.caseFile) {
+        const content = fs.readFileSync(sampleEntry.artifacts.caseFile, 'utf-8');
+        const events = content.trim().split('\n').map(l => JSON.parse(l));
+        
+        events.forEach((event) => {
+          expect(event.case).toBe(sampleEntry.testName);
+        });
+      }
+    });
+  });
+
+  describe('edge cases and robustness', () => {
+    it('should handle test names with special characters', () => {
+      const specialCharsEntry = indexData.artifacts.find(e => 
+        e.testName.includes('-') || e.testName.includes('/')
+      );
+      
+      if (specialCharsEntry?.artifacts.caseFile) {
+        const fileName = path.basename(specialCharsEntry.artifacts.caseFile);
+        expect(fileName).toMatch(/^[a-zA-Z0-9_-]+\.jsonl$/);
+        expect(fs.existsSync(specialCharsEntry.artifacts.caseFile)).toBe(true);
+      }
+    });
+
+    it('should have unique case file paths', () => {
+      const casePaths = indexData.artifacts
+        .map(e => e.artifacts.caseFile)
+        .filter(Boolean);
+      
+      const uniquePaths = new Set(casePaths);
+      expect(uniquePaths.size).toBe(casePaths.length);
+    });
+
+    it('should have all case files in reports directory', () => {
+      indexData.artifacts.forEach((entry) => {
+        if (entry.artifacts.caseFile) {
+          expect(entry.artifacts.caseFile).toMatch(/^reports\//);
+        }
+      });
+    });
+
+    it('should have consistent status values', () => {
+      indexData.artifacts.forEach((entry) => {
+        const validStatuses = ['pass', 'fail', 'skip'];
+        expect(validStatuses).toContain(entry.status);
+      });
+    });
+  });
+});
-- 
2.43.0

