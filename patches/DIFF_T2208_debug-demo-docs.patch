diff --git a/README.md b/README.md
index 5401143..8a1487f 100644
--- a/README.md
+++ b/README.md
@@ -138,6 +138,12 @@ npm run test:ci
 
 **CI Note:** The `test:ci` script uses `--pool=threads` to avoid tinypool concurrency issues on Node 20 and 24. Tested on both LTS versions.
 
+**Auto-Debug Rerun:** For CI pipelines with fast triage, use:
+```bash
+npm run laminar:run || true
+```
+This runs tests normally first, then automatically reruns failures with `LAMINAR_DEBUG=1` to capture debug output. Failed test logs are written to `reports/<suite>/<case>.jsonl` for analysis.
+
 ### Test Event Logging
 
 The project includes structured test event logging in JSONL format:
@@ -147,6 +153,29 @@ The project includes structured test event logging in JSONL format:
 
 **Agent Integration**: When working with agents via ampcode.log, include pointers to `reports/summary.jsonl` and case files in task reports. Keep console output compact; rely on report files for detailed metrics and traces.
 
+### Debug Instrumentation
+
+Runtime-configurable debug output with near-zero overhead when disabled:
+
+```bash
+# Enable all debug output
+DEBUG=1 npm run dev
+
+# Enable specific modules
+MK_DEBUG_MODULES=kernel,pipes npm run dev
+
+# Set debug level (error, warn, info, debug, trace)
+MK_DEBUG_LEVEL=trace npm run dev
+
+# Combine options
+DEBUG=1 MK_DEBUG_MODULES=executor MK_DEBUG_LEVEL=debug npm run dev
+```
+
+**Implementation:**
+- [src/debug/config.ts](src/debug/config.ts) - Parse environment variables at startup
+- [src/debug/api.ts](src/debug/api.ts) - `debug.on(module)` and `debug.emit(module, event, payload, level)` API
+- **Laminar Integration:** When `LAMINAR_DEBUG=1` is set, debug events emit as `TestEventEnvelope` for structured logging
+
 ### CLI Tools
 
 #### logq - Query JSONL test logs
diff --git a/docs/testing/laminar.md b/docs/testing/laminar.md
index 40333e6..e2486c4 100644
--- a/docs/testing/laminar.md
+++ b/docs/testing/laminar.md
@@ -48,6 +48,30 @@ Optional hooks emit events from:
 
 These hooks are no‑ops in production code paths unless a logger is attached during tests.
 
+## Debug Output
+
+### Environment Variables
+- `DEBUG=1` — enable all debug output to console
+- `MK_DEBUG_MODULES=kernel,pipes` — enable specific modules only
+- `MK_DEBUG_LEVEL=trace` — set level (error|warn|info|debug|trace, default: info)
+- `LAMINAR_DEBUG=1` — write debug events as JSONL to `reports/` instead of console
+
+### Console Mode (default)
+```bash
+DEBUG=1 node dist/examples/debug-demo.js
+```
+Prints timestamped debug events to stdout:
+```
+[2025-10-12T14:30:45.123Z] [DEBUG] [kernel] pipe.create: {"pipeId":"p-1"}
+[2025-10-12T14:30:45.124Z] [DEBUG] [kernel] pipe.connect: {"fromId":"p-1","toId":"p-2"}
+```
+
+### Test Mode (JSONL artifacts)
+```bash
+LAMINAR_DEBUG=1 npm test
+```
+Writes debug events to `reports/<suite>/<case>.jsonl` alongside test events, using the same envelope schema.
+
 ## Test Types
 - Unit: adapters and small modules
 - Component: module + adapters (inproc/worker/process)
diff --git a/src/examples/debug-demo.ts b/src/examples/debug-demo.ts
new file mode 100644
index 0000000..dc8e005
--- /dev/null
+++ b/src/examples/debug-demo.ts
@@ -0,0 +1,30 @@
+import { Kernel } from '../kernel/Kernel.js';
+import { TimerSource } from '../modules/timer.js';
+import { UppercaseTransform } from '../modules/uppercase.js';
+import { ConsoleSink } from '../modules/consoleSink.js';
+
+console.log('=== Debug Demo ===\n');
+
+console.log('Environment:');
+console.log(`  DEBUG=${process.env.DEBUG || '(not set)'}`);
+console.log(`  MK_DEBUG_MODULES=${process.env.MK_DEBUG_MODULES || '(not set)'}`);
+console.log(`  MK_DEBUG_LEVEL=${process.env.MK_DEBUG_LEVEL || '(not set)'}\n`);
+
+console.log('Creating kernel and modules...\n');
+
+const kernel = new Kernel();
+const timer = new TimerSource(kernel, 300);
+const upper = new UppercaseTransform(kernel);
+const sink = new ConsoleSink('[debug-demo]');
+
+kernel.connect(timer.outputPipe, upper.inputPipe);
+kernel.connect(upper.outputPipe, sink.inputPipe);
+
+timer.start();
+
+setTimeout(() => {
+  timer.stop();
+  console.log('\nDone.');
+  console.log('\nNote: When DEBUG=1, debug events appear in console above.');
+  console.log('In test mode (LAMINAR_DEBUG=1), events are written to reports/ as JSONL.');
+}, 2500);
