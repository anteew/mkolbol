diff --git a/src/controller/TopologyController.ts b/src/controller/TopologyController.ts
index 5b54a75..331a3b9 100644
--- a/src/controller/TopologyController.ts
+++ b/src/controller/TopologyController.ts
@@ -1,6 +1,7 @@
 import { Kernel } from '../kernel/Kernel.js';
 import { StateManager } from '../state/StateManager.js';
 import { ControlBus } from '../control/ControlBus.js';
+import { TestEventEnvelope } from '../logging/TestEvent.js';
 
 type FrameKind = 'cmd' | 'event' | 'ack' | 'err';
 
@@ -18,12 +19,14 @@ interface FrameBase {
 export interface TopologyControllerOptions {
   commandsTopic?: string;
   eventsTopic?: string;
+  loggerHook?: (evt: TestEventEnvelope) => void;
 }
 
 export class TopologyController {
   private unsub?: () => void;
   private readonly commandsTopic: string;
   private readonly eventsTopic: string;
+  private readonly loggerHook?: (evt: TestEventEnvelope) => void;
 
   constructor(
     private kernel: Kernel,
@@ -33,6 +36,7 @@ export class TopologyController {
   ) {
     this.commandsTopic = opts.commandsTopic ?? 'topology.commands';
     this.eventsTopic = opts.eventsTopic ?? 'topology.events';
+    this.loggerHook = opts.loggerHook;
   }
 
   start(): void {
@@ -62,38 +66,103 @@ export class TopologyController {
   private handleCommand(frame: FrameBase) {
     try {
       const { type, payload, id } = frame;
+      this.loggerHook?.({
+        ts: Date.now(),
+        lvl: 'debug',
+        case: 'topology-controller',
+        evt: 'cmd-received',
+        id,
+        corr: frame.correlationId,
+        payload: { type, payload }
+      });
       switch (type) {
         case 'declare-node': {
           this.state.addNode(payload);
           this.ack(id);
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'debug',
+            case: 'topology-controller',
+            evt: 'cmd-applied',
+            id,
+            payload: { type, node: payload }
+          });
           break;
         }
         case 'connect': {
           this.state.connect(payload.from, payload.to);
           this.ack(id);
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'debug',
+            case: 'topology-controller',
+            evt: 'cmd-applied',
+            id,
+            payload: { type, from: payload.from, to: payload.to }
+          });
           break;
         }
         case 'split': {
           this.state.split(payload.source, payload.destinations);
           this.ack(id);
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'debug',
+            case: 'topology-controller',
+            evt: 'cmd-applied',
+            id,
+            payload: { type, source: payload.source, destinations: payload.destinations }
+          });
           break;
         }
         case 'merge': {
           this.state.merge(payload.sources, payload.destination);
           this.ack(id);
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'debug',
+            case: 'topology-controller',
+            evt: 'cmd-applied',
+            id,
+            payload: { type, sources: payload.sources, destination: payload.destination }
+          });
           break;
         }
         case 'snapshot': {
           const topo = this.state.getTopology();
           this.bus.publish(this.eventsTopic, { kind: 'event', type: 'topology.snapshot', ts: Date.now(), correlationId: id, payload: topo });
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'debug',
+            case: 'topology-controller',
+            evt: 'snapshot',
+            id,
+            payload: topo
+          });
           break;
         }
         default: {
           this.err(id, `Unknown command type: ${type}`);
+          this.loggerHook?.({
+            ts: Date.now(),
+            lvl: 'error',
+            case: 'topology-controller',
+            evt: 'error',
+            id,
+            payload: { message: `Unknown command type: ${type}` }
+          });
         }
       }
     } catch (e: any) {
       this.err(frame.id, e?.message ?? String(e));
+      this.loggerHook?.({
+        ts: Date.now(),
+        lvl: 'error',
+        case: 'topology-controller',
+        evt: 'error',
+        id: frame.id,
+        payload: { message: e?.message ?? String(e) }
+      });
     }
   }
 }
