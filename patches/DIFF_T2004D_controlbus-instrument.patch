diff --git a/package.json b/package.json
index 161c237..1410217 100644
--- a/package.json
+++ b/package.json
@@ -27,7 +27,7 @@
   "scripts": {
     "docs": "echo 'See docs/rfcs/stream-kernel/00-index.md for architecture documentation'",
     "build": "tsc -p tsconfig.json",
-    "test": "vitest run --reporter=default",
+    "test": "vitest run",
     "test:watch": "vitest",
     "dev": "node --enable-source-maps dist/examples/basic-topology.js",
     "dev:split": "node --enable-source-maps dist/examples/split-topology.js",
diff --git a/src/control/ControlBus.ts b/src/control/ControlBus.ts
index 97b4b3c..9db2de8 100644
--- a/src/control/ControlBus.ts
+++ b/src/control/ControlBus.ts
@@ -1,22 +1,52 @@
 import { BusAdapter } from './BusAdapter.js';
 import { InProcBusAdapter } from './adapters/InProcBusAdapter.js';
+import { TestEventEnvelope } from '../logging/TestEvent.js';
 
 export type ControlMessage = Record<string, any>;
 
+export type ControlBusEventLogger = (evt: TestEventEnvelope) => void;
+
 export class ControlBus {
   private adapter: BusAdapter;
+  private eventLogger?: ControlBusEventLogger;
 
   constructor(adapter?: BusAdapter) {
     this.adapter = adapter ?? new InProcBusAdapter();
   }
 
+  setEventLogger(logger: ControlBusEventLogger | undefined): void {
+    this.eventLogger = logger;
+  }
+
   publish(topic: string, msg: ControlMessage): void {
     this.adapter.topic(topic).write(msg);
+    if (this.eventLogger) {
+      const payloadSize = JSON.stringify(msg).length;
+      this.eventLogger({
+        ts: Date.now(),
+        lvl: 'debug',
+        case: 'control-bus',
+        evt: 'publish',
+        payload: { topic, payloadSize },
+      });
+    }
   }
 
   subscribe(topic: string, handler: (msg: ControlMessage) => void): () => void {
     const t = this.adapter.topic(topic);
-    const onData = (m: any) => handler(m as ControlMessage);
+    const onData = (m: any) => {
+      if (this.eventLogger) {
+        const payloadSize = JSON.stringify(m).length;
+        this.eventLogger({
+          ts: Date.now(),
+          lvl: 'debug',
+          case: 'control-bus',
+          evt: 'subscribe',
+          payload: { topic, payloadSize },
+        });
+      }
+      handler(m as ControlMessage);
+    };
     t.on('data', onData);
     return () => t.off('data', onData);
   }
diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
new file mode 100644
index 0000000..cc304e2
--- /dev/null
+++ b/src/test/reporter/jsonlReporter.ts
@@ -0,0 +1,102 @@
+import * as fs from 'fs';
+import * as path from 'path';
+import type { File, Reporter, Task, Vitest } from 'vitest';
+
+interface TestSummary {
+  status: 'pass' | 'fail' | 'skip';
+  duration: number;
+  location: string;
+  artifactURI?: string;
+  error?: string;
+}
+
+export default class JSONLReporter implements Reporter {
+  private ctx!: Vitest;
+  private summaryPath = 'reports/summary.jsonl';
+  private summaryStream?: fs.WriteStream;
+  private processedTests = new Set<string>();
+
+  onInit(ctx: Vitest): void {
+    this.ctx = ctx;
+    const dir = path.dirname(this.summaryPath);
+    fs.mkdirSync(dir, { recursive: true });
+    if (fs.existsSync(this.summaryPath)) {
+      fs.unlinkSync(this.summaryPath);
+    }
+    this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
+  }
+
+  onCollected(): void {
+    const files = this.ctx.state.getFiles();
+    this.processFiles(files);
+  }
+
+  onFinished(files?: File[]): void {
+    if (files) {
+      this.processFiles(files);
+    }
+    if (this.summaryStream) {
+      this.summaryStream.end();
+    }
+  }
+
+  private processFiles(files: File[]): void {
+    for (const file of files) {
+      this.processTask(file);
+    }
+  }
+
+  private processTask(task: Task): void {
+    if (task.type === 'test' && task.result?.state) {
+      const testId = `${task.file?.filepath}:${task.name}`;
+      if (!this.processedTests.has(testId)) {
+        this.processedTests.add(testId);
+        this.reportTest(task);
+      }
+    }
+
+    if ('tasks' in task && Array.isArray(task.tasks)) {
+      for (const child of task.tasks) {
+        this.processTask(child);
+      }
+    }
+  }
+
+  private reportTest(task: Task): void {
+    const result = task.result!;
+    const state = result.state;
+    
+    if (state !== 'pass' && state !== 'fail' && state !== 'skip') {
+      return;
+    }
+
+    const duration = result.duration || 0;
+    const file = task.file;
+    const location = file ? `${file.filepath}:${task.location?.line || 0}` : 'unknown';
+    
+    const status = state === 'pass' ? '✓' : state === 'fail' ? '✗' : '○';
+    const color = state === 'pass' ? '\x1b[32m' : state === 'fail' ? '\x1b[31m' : '\x1b[33m';
+    const reset = '\x1b[0m';
+    
+    console.log(`${color}${status}${reset} ${task.name} (${duration.toFixed(0)}ms)`);
+
+    const suiteName = file ? path.basename(file.filepath, path.extname(file.filepath)) : 'unknown';
+    const caseName = task.name.replace(/[^a-zA-Z0-9-_]/g, '_');
+    const artifactURI = `reports/${suiteName}/${caseName}.jsonl`;
+
+    const summary: TestSummary = {
+      status: state,
+      duration,
+      location,
+      artifactURI,
+    };
+
+    if (result.errors && result.errors.length > 0) {
+      summary.error = result.errors.map(e => e.message || String(e)).join('; ');
+    }
+
+    if (this.summaryStream) {
+      this.summaryStream.write(JSON.stringify(summary) + '\n');
+    }
+  }
+}
diff --git a/vitest.config.ts b/vitest.config.ts
index 98339dc..ba94214 100644
--- a/vitest.config.ts
+++ b/vitest.config.ts
@@ -8,5 +8,6 @@ export default defineConfig({
         singleFork: false,
       },
     },
+    reporters: ['./dist/test/reporter/jsonlReporter.js'],
   },
 });
