diff --git a/dist/digest/codeframe.d.ts b/dist/digest/codeframe.d.ts
new file mode 100644
index 0000000..4be1d11
--- /dev/null
+++ b/dist/digest/codeframe.d.ts
@@ -0,0 +1,29 @@
+export interface CodeFrame {
+    file: string;
+    line: number;
+    column?: number;
+    source: string[];
+    context: {
+        before: string[];
+        focus: string;
+        after: string[];
+    };
+}
+export interface StackFrame {
+    file?: string;
+    line?: number;
+    column?: number;
+    function?: string;
+}
+export declare class CodeFrameExtractor {
+    private contextLines;
+    private sourcemapCache;
+    constructor(contextLines?: number);
+    extractFromStack(stack: string): CodeFrame[];
+    private parseStackTrace;
+    private parseStackLine;
+    private resolveSourceMap;
+    private extractCodeFrame;
+    formatCodeFrame(codeFrame: CodeFrame): string;
+}
+//# sourceMappingURL=codeframe.d.ts.map
\ No newline at end of file
diff --git a/dist/digest/codeframe.d.ts.map b/dist/digest/codeframe.d.ts.map
new file mode 100644
index 0000000..fb8ad3b
--- /dev/null
+++ b/dist/digest/codeframe.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"codeframe.d.ts","sourceRoot":"","sources":["../../src/digest/codeframe.ts"],"names":[],"mappings":"AAGA,MAAM,WAAW,SAAS;IACxB,IAAI,EAAE,MAAM,CAAC;IACb,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,MAAM,EAAE,MAAM,EAAE,CAAC;IACjB,OAAO,EAAE;QACP,MAAM,EAAE,MAAM,EAAE,CAAC;QACjB,KAAK,EAAE,MAAM,CAAC;QACd,KAAK,EAAE,MAAM,EAAE,CAAC;KACjB,CAAC;CACH;AAED,MAAM,WAAW,UAAU;IACzB,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAED,qBAAa,kBAAkB;IAC7B,OAAO,CAAC,YAAY,CAAa;IACjC,OAAO,CAAC,cAAc,CAA+B;gBAEzC,YAAY,GAAE,MAAU;IAIpC,gBAAgB,CAAC,KAAK,EAAE,MAAM,GAAG,SAAS,EAAE;IAqB5C,OAAO,CAAC,eAAe;IAcvB,OAAO,CAAC,cAAc;IA8BtB,OAAO,CAAC,gBAAgB;IAoCxB,OAAO,CAAC,gBAAgB;IA+CxB,eAAe,CAAC,SAAS,EAAE,SAAS,GAAG,MAAM;CAgC9C"}
\ No newline at end of file
diff --git a/dist/digest/codeframe.js b/dist/digest/codeframe.js
new file mode 100644
index 0000000..dd219e3
--- /dev/null
+++ b/dist/digest/codeframe.js
@@ -0,0 +1,159 @@
+import * as fs from 'node:fs';
+import * as path from 'node:path';
+export class CodeFrameExtractor {
+    contextLines = 2;
+    sourcemapCache = new Map();
+    constructor(contextLines = 2) {
+        this.contextLines = contextLines;
+    }
+    extractFromStack(stack) {
+        const frames = [];
+        const parsedFrames = this.parseStackTrace(stack);
+        for (const frame of parsedFrames) {
+            if (!frame.file || !frame.line) {
+                continue;
+            }
+            const resolvedFrame = this.resolveSourceMap(frame);
+            const codeFrame = this.extractCodeFrame(resolvedFrame);
+            if (codeFrame) {
+                frames.push(codeFrame);
+                if (frames.length >= 3)
+                    break;
+            }
+        }
+        return frames;
+    }
+    parseStackTrace(stack) {
+        const frames = [];
+        const lines = stack.split('\n');
+        for (const line of lines) {
+            const frame = this.parseStackLine(line);
+            if (frame) {
+                frames.push(frame);
+            }
+        }
+        return frames;
+    }
+    parseStackLine(line) {
+        const patterns = [
+            /at\s+(?:(.+?)\s+\()?(.+?):(\d+):(\d+)\)?/,
+            /^\s*(.+?)@(.+?):(\d+):(\d+)/,
+            /^\s*at\s+(.+?):(\d+):(\d+)/,
+        ];
+        for (const pattern of patterns) {
+            const match = line.match(pattern);
+            if (match) {
+                if (match.length === 5) {
+                    return {
+                        function: match[1]?.trim(),
+                        file: match[2],
+                        line: parseInt(match[3], 10),
+                        column: parseInt(match[4], 10),
+                    };
+                }
+                else if (match.length === 4) {
+                    return {
+                        file: match[1],
+                        line: parseInt(match[2], 10),
+                        column: parseInt(match[3], 10),
+                    };
+                }
+            }
+        }
+        return null;
+    }
+    resolveSourceMap(frame) {
+        if (!frame.file)
+            return frame;
+        const mapFile = `${frame.file}.map`;
+        if (!fs.existsSync(mapFile)) {
+            const tsFile = frame.file.replace(/\.js$/, '.ts');
+            if (fs.existsSync(tsFile)) {
+                return { ...frame, file: tsFile };
+            }
+            return frame;
+        }
+        try {
+            let sourceMap = this.sourcemapCache.get(mapFile);
+            if (!sourceMap) {
+                const mapContent = fs.readFileSync(mapFile, 'utf-8');
+                sourceMap = JSON.parse(mapContent);
+                this.sourcemapCache.set(mapFile, sourceMap);
+            }
+            if (sourceMap.sources && sourceMap.sources.length > 0) {
+                const originalFile = path.resolve(path.dirname(frame.file), sourceMap.sources[0]);
+                if (fs.existsSync(originalFile)) {
+                    return { ...frame, file: originalFile };
+                }
+            }
+        }
+        catch (e) {
+        }
+        return frame;
+    }
+    extractCodeFrame(frame) {
+        if (!frame.file || !frame.line)
+            return null;
+        try {
+            if (!fs.existsSync(frame.file)) {
+                return null;
+            }
+            const content = fs.readFileSync(frame.file, 'utf-8');
+            const lines = content.split('\n');
+            if (frame.line > lines.length || frame.line < 1) {
+                return null;
+            }
+            const focusLine = frame.line - 1;
+            const startLine = Math.max(0, focusLine - this.contextLines);
+            const endLine = Math.min(lines.length - 1, focusLine + this.contextLines);
+            const before = [];
+            for (let i = startLine; i < focusLine; i++) {
+                before.push(lines[i]);
+            }
+            const focus = lines[focusLine];
+            const after = [];
+            for (let i = focusLine + 1; i <= endLine; i++) {
+                after.push(lines[i]);
+            }
+            return {
+                file: frame.file,
+                line: frame.line,
+                column: frame.column,
+                source: lines.slice(startLine, endLine + 1),
+                context: {
+                    before,
+                    focus,
+                    after,
+                },
+            };
+        }
+        catch (e) {
+            return null;
+        }
+    }
+    formatCodeFrame(codeFrame) {
+        const lines = [];
+        const lineNumWidth = String(codeFrame.line + this.contextLines).length;
+        lines.push(`  at ${codeFrame.file}:${codeFrame.line}${codeFrame.column ? `:${codeFrame.column}` : ''}`);
+        let currentLine = codeFrame.line - codeFrame.context.before.length;
+        for (const line of codeFrame.context.before) {
+            const lineNum = String(currentLine).padStart(lineNumWidth, ' ');
+            lines.push(`  ${lineNum} | ${line}`);
+            currentLine++;
+        }
+        const focusLineNum = String(currentLine).padStart(lineNumWidth, ' ');
+        lines.push(`> ${focusLineNum} | ${codeFrame.context.focus}`);
+        if (codeFrame.column) {
+            const indicator = ' '.repeat(lineNumWidth + 3 + (codeFrame.column - 1)) + '^';
+            lines.push(indicator);
+        }
+        currentLine++;
+        for (const line of codeFrame.context.after) {
+            const lineNum = String(currentLine).padStart(lineNumWidth, ' ');
+            lines.push(`  ${lineNum} | ${line}`);
+            currentLine++;
+        }
+        return lines.join('\n');
+    }
+}
+//# sourceMappingURL=codeframe.js.map
\ No newline at end of file
diff --git a/dist/digest/codeframe.js.map b/dist/digest/codeframe.js.map
new file mode 100644
index 0000000..67db309
--- /dev/null
+++ b/dist/digest/codeframe.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"codeframe.js","sourceRoot":"","sources":["../../src/digest/codeframe.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/digest/generator.d.ts b/dist/digest/generator.d.ts
index b460462..683bfc8 100644
--- a/dist/digest/generator.d.ts
+++ b/dist/digest/generator.d.ts
@@ -1,3 +1,4 @@
+import { CodeFrame } from './codeframe.js';
 export interface DigestConfig {
     budget?: {
         kb?: number;
@@ -18,9 +19,10 @@ export interface DigestRule {
     priority?: number;
 }
 export interface DigestAction {
-    type: 'include' | 'slice' | 'redact';
+    type: 'include' | 'slice' | 'redact' | 'codeframe';
     window?: number;
     field?: string | string[];
+    contextLines?: number;
 }
 export interface DigestEvent {
     ts: number;
@@ -51,10 +53,12 @@ export interface DigestOutput {
         budgetLimit: number;
     };
     suspects?: SuspectEvent[];
+    codeframes?: CodeFrame[];
     events: DigestEvent[];
 }
 export declare class DigestGenerator {
     private config;
+    private codeframeExtractor;
     constructor(config?: DigestConfig);
     static loadConfig(configPath?: string): DigestConfig;
     generateDigest(caseName: string, status: 'pass' | 'fail' | 'skip', duration: number, location: string, artifactURI: string, error?: string): Promise<DigestOutput | null>;
@@ -63,6 +67,7 @@ export declare class DigestGenerator {
     private matchEvent;
     private matchPattern;
     private enforceBudget;
+    private extractCodeFrames;
     private identifySuspects;
     private calculateSuspectScore;
     writeDigest(digest: DigestOutput, outputDir?: string): Promise<void>;
diff --git a/dist/digest/generator.d.ts.map b/dist/digest/generator.d.ts.map
index 2c0e6f3..d255cab 100644
--- a/dist/digest/generator.d.ts.map
+++ b/dist/digest/generator.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"generator.d.ts","sourceRoot":"","sources":["../../src/digest/generator.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"generator.d.ts","sourceRoot":"","sources":["../../src/digest/generator.ts"],"names":[],"mappings":"AAEA,OAAO,EAAsB,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE/D,MAAM,WAAW,YAAY;IAC3B,MAAM,CAAC,EAAE;QACP,EAAE,CAAC,EAAE,MAAM,CAAC;QACZ,KAAK,CAAC,EAAE,MAAM,CAAC;KAChB,CAAC;IACF,KAAK,CAAC,EAAE,UAAU,EAAE,CAAC;IACrB,OAAO,CAAC,EAAE,OAAO,CAAC;CACnB;AAED,MAAM,WAAW,UAAU;IACzB,KAAK,EAAE;QACL,GAAG,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;QACxB,GAAG,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;QACxB,KAAK,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;QAC1B,IAAI,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;QACzB,IAAI,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;KAC1B,CAAC;IACF,OAAO,EAAE,YAAY,EAAE,CAAC;IACxB,QAAQ,CAAC,EAAE,MAAM,CAAC;CACnB;AAED,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,SAAS,GAAG,OAAO,GAAG,QAAQ,GAAG,WAAW,CAAC;IACnD,MAAM,CAAC,EAAE,MAAM,CAAC;IAChB,KAAK,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAC1B,YAAY,CAAC,EAAE,MAAM,CAAC;CACvB;AAED,MAAM,WAAW,WAAW;IAC1B,EAAE,EAAE,MAAM,CAAC;IACX,GAAG,EAAE,MAAM,CAAC;IACZ,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,GAAG,EAAE,MAAM,CAAC;IACZ,EAAE,CAAC,EAAE,MAAM,CAAC;IACZ,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,IAAI,CAAC,EAAE,MAAM,CAAC;IACd,OAAO,CAAC,EAAE,OAAO,CAAC;CACnB;AAED,MAAM,WAAW,YAAa,SAAQ,WAAW;IAC/C,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,EAAE,CAAC;CACnB;AAED,MAAM,WAAW,YAAY;IAC3B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;IACjB,QAAQ,EAAE,MAAM,CAAC;IACjB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,OAAO,EAAE;QACP,WAAW,EAAE,MAAM,CAAC;QACpB,cAAc,EAAE,MAAM,CAAC;QACvB,cAAc,EAAE,MAAM,CAAC;QACvB,UAAU,EAAE,MAAM,CAAC;QACnB,WAAW,EAAE,MAAM,CAAC;KACrB,CAAC;IACF,QAAQ,CAAC,EAAE,YAAY,EAAE,CAAC;IAC1B,UAAU,CAAC,EAAE,SAAS,EAAE,CAAC;IACzB,MAAM,EAAE,WAAW,EAAE,CAAC;CACvB;AAgCD,qBAAa,eAAe;IAC1B,OAAO,CAAC,MAAM,CAAe;IAC7B,OAAO,CAAC,kBAAkB,CAAqB;gBAEnC,MAAM,CAAC,EAAE,YAAY;IAKjC,MAAM,CAAC,UAAU,CAAC,UAAU,GAAE,MAA8B,GAAG,YAAY;IAYrE,cAAc,CAClB,QAAQ,EAAE,MAAM,EAChB,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,EAChC,QAAQ,EAAE,MAAM,EAChB,QAAQ,EAAE,MAAM,EAChB,WAAW,EAAE,MAAM,EACnB,KAAK,CAAC,EAAE,MAAM,GACb,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC;IAyC/B,OAAO,CAAC,UAAU;IAoBlB,OAAO,CAAC,UAAU;IAwDlB,OAAO,CAAC,UAAU;IA6BlB,OAAO,CAAC,YAAY;IAUpB,OAAO,CAAC,aAAa;IAwBrB,OAAO,CAAC,iBAAiB;IAoCzB,OAAO,CAAC,gBAAgB;IAuCxB,OAAO,CAAC,qBAAqB;IAgCvB,WAAW,CAAC,MAAM,EAAE,YAAY,EAAE,SAAS,GAAE,MAAkB,GAAG,OAAO,CAAC,IAAI,CAAC;IAYrF,OAAO,CAAC,cAAc;CAqDvB;AAED,wBAAsB,kBAAkB,CAAC,UAAU,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAyC7E;AAED,wBAAsB,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,UAAU,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CA4CnG"}
\ No newline at end of file
diff --git a/dist/digest/generator.js b/dist/digest/generator.js
index 7b04eea..eac3fef 100644
--- a/dist/digest/generator.js
+++ b/dist/digest/generator.js
@@ -1,5 +1,6 @@
 import * as fs from 'node:fs';
 import * as path from 'node:path';
+import { CodeFrameExtractor } from './codeframe.js';
 /**
  * Default digest configuration.
  *
@@ -19,20 +20,22 @@ const DEFAULT_CONFIG = {
     rules: [
         {
             match: { lvl: 'error' },
-            actions: [{ type: 'include' }],
+            actions: [{ type: 'include' }, { type: 'codeframe', contextLines: 2 }],
             priority: 10,
         },
         {
             match: { evt: 'assert.fail' },
-            actions: [{ type: 'include' }, { type: 'slice', window: 10 }],
+            actions: [{ type: 'include' }, { type: 'slice', window: 10 }, { type: 'codeframe', contextLines: 2 }],
             priority: 9,
         },
     ],
 };
 export class DigestGenerator {
     config;
+    codeframeExtractor;
     constructor(config) {
         this.config = config || DEFAULT_CONFIG;
+        this.codeframeExtractor = new CodeFrameExtractor(2);
     }
     static loadConfig(configPath = 'laminar.config.json') {
         if (fs.existsSync(configPath)) {
@@ -57,8 +60,12 @@ export class DigestGenerator {
         const processedEvents = this.applyRules(events);
         const budgetedEvents = this.enforceBudget(processedEvents);
         const suspects = this.identifySuspects(events);
+        const codeframes = this.extractCodeFrames(events);
         const budgetLimit = (this.config.budget?.kb || 10) * 1024;
-        const budgetUsed = JSON.stringify(budgetedEvents).length;
+        let budgetUsed = JSON.stringify(budgetedEvents).length;
+        if (codeframes && codeframes.length > 0) {
+            budgetUsed += JSON.stringify(codeframes).length;
+        }
         return {
             case: caseName,
             status: 'fail',
@@ -73,6 +80,7 @@ export class DigestGenerator {
                 budgetLimit,
             },
             suspects,
+            codeframes: codeframes && codeframes.length > 0 ? codeframes : undefined,
             events: budgetedEvents,
         };
     }
@@ -203,6 +211,31 @@ export class DigestGenerator {
         }
         return currentEvents;
     }
+    extractCodeFrames(events) {
+        if (!this.config.rules) {
+            return [];
+        }
+        const shouldExtractCodeframes = this.config.rules.some(rule => rule.actions.some(action => action.type === 'codeframe'));
+        if (!shouldExtractCodeframes) {
+            return [];
+        }
+        const codeframes = [];
+        const errorEvents = events.filter(e => e.lvl === 'error' &&
+            e.payload &&
+            typeof e.payload === 'object' &&
+            'stack' in e.payload);
+        for (const event of errorEvents) {
+            const payload = event.payload;
+            if (payload.stack) {
+                const frames = this.codeframeExtractor.extractFromStack(payload.stack);
+                codeframes.push(...frames);
+                if (codeframes.length >= 5) {
+                    break;
+                }
+            }
+        }
+        return codeframes.slice(0, 5);
+    }
     identifySuspects(events) {
         if (events.length === 0) {
             return [];
@@ -291,6 +324,15 @@ export class DigestGenerator {
             }
             lines.push('');
         }
+        if (digest.codeframes && digest.codeframes.length > 0) {
+            lines.push('## Code Frames');
+            for (const frame of digest.codeframes) {
+                lines.push('```');
+                lines.push(this.codeframeExtractor.formatCodeFrame(frame));
+                lines.push('```');
+                lines.push('');
+            }
+        }
         if (digest.events.length > 0) {
             lines.push('## Events');
             lines.push('```json');
diff --git a/dist/digest/generator.js.map b/dist/digest/generator.js.map
index c2cc6ed..0ec1921 100644
--- a/dist/digest/generator.js.map
+++ b/dist/digest/generator.js.map
@@ -1 +1 @@
-{"version":3,"file":"generator.js","sourceRoot":"","sources":["../../src/digest/generator.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AAC9B,OAAO,KAAK,IAAI,MAAM,WAAW,CAAC;AA+DlC;;;;;;;;;GASG;AACH,MAAM,cAAc,GAAiB;IACnC,MAAM,EAAE;QACN,EAAE,EAAE,EAAE;QACN,KAAK,EAAE,GAAG;KACX;IACD,OAAO,EAAE,IAAI;IACb,KAAK,EAAE;QACL;YACE,KAAK,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE;YACvB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;YAC9B,QAAQ,EAAE,EAAE;SACb;QACD;YACE,KAAK,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE;YAC7B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;YAC7D,QAAQ,EAAE,CAAC;SACZ;KACF;CACF,CAAC;AAEF,MAAM,OAAO,eAAe;IAClB,MAAM,CAAe;IAE7B,YAAY,MAAqB;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,cAAc,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,aAAqB,qBAAqB;QAC1D,IAAI,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC;YAC9B,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBACrD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7B,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,kBAAkB,UAAU,mBAAmB,EAAE,CAAC,CAAC,CAAC;YACnE,CAAC;QACH,CAAC;QACD,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,cAAc,CAClB,QAAgB,EAChB,MAAgC,EAChC,QAAgB,EAChB,QAAgB,EAChB,WAAmB,EACnB,KAAc;QAEd,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChD,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAE/C,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC;QAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC;QAEzD,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,MAAM;YACd,QAAQ;YACR,QAAQ;YACR,KAAK;YACL,OAAO,EAAE;gBACP,WAAW,EAAE,MAAM,CAAC,MAAM;gBAC1B,cAAc,EAAE,cAAc,CAAC,MAAM;gBACrC,cAAc,EAAE,CAAC;gBACjB,UAAU;gBACV,WAAW;aACZ;YACD,QAAQ;YACR,MAAM,EAAE,cAAc;SACvB,CAAC;IACJ,CAAC;IAEO,UAAU,CAAC,WAAmB;QACpC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;YAChC,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACzD,MAAM,MAAM,GAAkB,EAAE,CAAC;QAEjC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,IAAI,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAChC,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,OAAO,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,MAAqB;QACtC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACzD,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;QACnC,MAAM,cAAc,GAAG,IAAI,GAAG,EAAuB,CAAC;QACtD,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;QAE3F,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBAC3C,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;wBAClC,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;4BAC9B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,CAAC;6BAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;4BACpD,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;4BAC7B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gCACvF,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,CAAC;wBACH,CAAC;6BAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;4BACpD,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BAC3E,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gCAC3B,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;4BACnC,CAAC;4BACD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;wBACrD,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;aAChC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;aACrB,GAAG,CAAC,GAAG,CAAC,EAAE;YACT,MAAM,KAAK,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;YACjC,IAAI,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC5B,MAAM,cAAc,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;gBAChD,KAAK,MAAM,KAAK,IAAI,cAAc,EAAE,CAAC;oBACnC,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;wBACzC,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;oBAC/B,CAAC;yBAAM,IAAI,KAAK,IAAI,KAAK,EAAE,CAAC;wBACzB,KAAa,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;oBACvC,CAAC;gBACH,CAAC;YACH,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QAEL,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,UAAU,CAAC,KAAkB,EAAE,KAA0B;QAC/D,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;YACd,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC;gBAAE,OAAO,KAAK,CAAC;QAC5D,CAAC;QAED,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;YACd,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC;gBAAE,OAAO,KAAK,CAAC;QAC5D,CAAC;QAED,IAAI,KAAK,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC5E,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC;gBAAE,OAAO,KAAK,CAAC;QAChF,CAAC;QAED,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACxE,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;gBAAE,OAAO,KAAK,CAAC;QAC9D,CAAC;QAED,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACxE,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;gBAAE,OAAO,KAAK,CAAC;QAC7E,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,YAAY,CAAC,KAAa,EAAE,QAAkB;QACpD,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YAC7B,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC1B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBACnE,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;YACD,OAAO,KAAK,KAAK,OAAO,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,aAAa,CAAC,MAAqB;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC;QAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,IAAI,GAAG,CAAC;QACrD,MAAM,WAAW,GAAG,QAAQ,GAAG,IAAI,CAAC;QAEpC,IAAI,MAAM,CAAC,MAAM,IAAI,WAAW,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;YAC3C,IAAI,IAAI,IAAI,WAAW,EAAE,CAAC;gBACxB,OAAO,MAAM,CAAC;YAChB,CAAC;QACH,CAAC;QAED,IAAI,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;QAC1E,OAAO,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAChC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC;YAClD,IAAI,IAAI,IAAI,WAAW,EAAE,CAAC;gBACxB,MAAM;YACR,CAAC;YACD,aAAa,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE,CAAC;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAEO,gBAAgB,CAAC,MAAqB;QAC5C,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACxB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;QACtF,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/B,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClE,MAAM,mBAAmB,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAK,CAAC,CAAC,CAAC;QAEzF,MAAM,YAAY,GAAmB,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACtD,MAAM,KAAK,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,eAAe,EAAE,mBAAmB,CAAC,CAAC;YAC9F,MAAM,OAAO,GAAa,EAAE,CAAC;YAE7B,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;gBAC1B,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC9B,CAAC;YACD,IAAI,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC/B,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,KAAK,CAAC,IAAI,IAAI,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;gBACtD,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YAC1C,CAAC;YACD,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,eAAe,CAAC,GAAG,IAAI,EAAE,CAAC;gBAChD,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;YAC7C,CAAC;YAED,OAAO,EAAE,GAAG,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY;aAChB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;aACxB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;aACjC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB,CAAC;IAEO,qBAAqB,CAC3B,KAAkB,EAClB,SAAwB,EACxB,WAAmB,EACnB,mBAAgC;QAEhC,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,EAAE,CAAC;YAC1B,KAAK,IAAI,EAAE,CAAC;QACd,CAAC;aAAM,IAAI,KAAK,CAAC,GAAG,KAAK,MAAM,EAAE,CAAC;YAChC,KAAK,IAAI,EAAE,CAAC;QACd,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC;QAClD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;QAChE,KAAK,IAAI,cAAc,CAAC;QAExB,IAAI,KAAK,CAAC,IAAI,IAAI,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YACtD,KAAK,IAAI,EAAE,CAAC;QACd,CAAC;QAED,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CACzC,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,GAAG,IAAI,CACxD,CAAC;QACF,IAAI,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,KAAK,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,MAAoB,EAAE,YAAoB,SAAS;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,MAAM,CAAC,IAAI,cAAc,CAAC,CAAC;QAC1E,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,MAAM,CAAC,IAAI,YAAY,CAAC,CAAC;QAEtE,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7C,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAElE,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QACvC,EAAE,CAAC,aAAa,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAEO,cAAc,CAAC,MAAoB;QACzC,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,KAAK,CAAC,IAAI,CAAC,aAAa,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QACvC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACf,KAAK,CAAC,IAAI,CAAC,eAAe,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3C,KAAK,CAAC,IAAI,CAAC,iBAAiB,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;QACjD,KAAK,CAAC,IAAI,CAAC,iBAAiB,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/C,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,KAAK,CAAC,IAAI,CAAC,cAAc,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAC3C,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACzB,KAAK,CAAC,IAAI,CAAC,mBAAmB,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5D,KAAK,CAAC,IAAI,CAAC,sBAAsB,MAAM,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;QAClE,KAAK,CAAC,IAAI,CAAC,kBAAkB,MAAM,CAAC,OAAO,CAAC,UAAU,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;QAChG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEf,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAClD,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1B,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACtC,KAAK,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,OAAO,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;gBACzF,KAAK,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACzD,KAAK,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;gBAC9D,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC;oBACjB,KAAK,CAAC,IAAI,CAAC,oBAAoB,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;gBACjD,CAAC;YACH,CAAC;YACD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACjB,CAAC;QAED,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACxB,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAChC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,CAAC;YACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;CACF;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,UAAmB;IAC1D,MAAM,WAAW,GAAG,uBAAuB,CAAC;IAC5C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAM,MAAM,GAAG,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;IAE9C,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACtD,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEzD,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;gBACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;gBAC5D,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAc,CAC3C,QAAQ,EACR,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACZ,CAAC;gBAEF,IAAI,MAAM,EAAE,CAAC;oBACX,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBAClD,MAAM,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;oBAC/C,OAAO,CAAC,GAAG,CAAC,0BAA0B,QAAQ,EAAE,CAAC,CAAC;oBAClD,KAAK,EAAE,CAAC;gBACV,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,0BAA0B,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,KAAe,EAAE,UAAmB;IAChF,MAAM,WAAW,GAAG,uBAAuB,CAAC;IAC5C,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;QAChC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAM,MAAM,GAAG,eAAe,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACtD,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC;IAE9C,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACtD,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAEzD,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;IAC/B,IAAI,KAAK,GAAG,CAAC,CAAC;IAEd,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/B,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAErF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;gBAC1E,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAc,CAC3C,QAAQ,EACR,KAAK,CAAC,MAAM,EACZ,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,QAAQ,EACd,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACZ,CAAC;gBAEF,IAAI,MAAM,EAAE,CAAC;oBACX,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBAClD,MAAM,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;oBAC/C,OAAO,CAAC,GAAG,CAAC,0BAA0B,QAAQ,EAAE,CAAC,CAAC;oBAClD,KAAK,EAAE,CAAC;gBACV,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,OAAO,CAAC,IAAI,CAAC,0BAA0B,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QACpD,CAAC;IACH,CAAC;IAED,OAAO,KAAK,CAAC;AACf,CAAC"}
\ No newline at end of file
+{"version":3,"file":"generator.js","sourceRoot":"","sources":["../../src/digest/generator.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/test/reporter/jsonlReporter.d.ts b/dist/test/reporter/jsonlReporter.d.ts
index fffaf33..2248608 100644
--- a/dist/test/reporter/jsonlReporter.d.ts
+++ b/dist/test/reporter/jsonlReporter.d.ts
@@ -7,6 +7,10 @@ export default class JSONLReporter implements Reporter {
     private processedTests;
     private indexEntries;
     private caseStreams;
+    private environment;
+    private testSeed;
+    constructor();
+    private captureEnvironment;
     onInit(ctx: Vitest): void;
     onCollected(): void;
     onFinished(files?: File[]): void;
diff --git a/dist/test/reporter/jsonlReporter.d.ts.map b/dist/test/reporter/jsonlReporter.d.ts.map
index e3d2b8b..aa78946 100644
--- a/dist/test/reporter/jsonlReporter.d.ts.map
+++ b/dist/test/reporter/jsonlReporter.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"jsonlReporter.d.ts","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAQ,MAAM,EAAE,MAAM,QAAQ,CAAC;AA6B3D,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,QAAQ;IACpD,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,WAAW,CAA2B;IAC9C,OAAO,CAAC,SAAS,CAAwB;IACzC,OAAO,CAAC,aAAa,CAAC,CAAiB;IACvC,OAAO,CAAC,cAAc,CAAqB;IAC3C,OAAO,CAAC,YAAY,CAA4B;IAChD,OAAO,CAAC,WAAW,CAAqC;IAExD,MAAM,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;IAWzB,WAAW,IAAI,IAAI;IAKnB,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,IAAI;IAehC,OAAO,CAAC,YAAY;IAMpB,OAAO,CAAC,WAAW;IAgBnB,OAAO,CAAC,UAAU;IAyDlB,OAAO,CAAC,iBAAiB;IAsEzB,OAAO,CAAC,aAAa;CAStB"}
\ No newline at end of file
+{"version":3,"file":"jsonlReporter.d.ts","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAQ,MAAM,EAAE,MAAM,QAAQ,CAAC;AAyC3D,MAAM,CAAC,OAAO,OAAO,aAAc,YAAW,QAAQ;IACpD,OAAO,CAAC,GAAG,CAAU;IACrB,OAAO,CAAC,WAAW,CAA2B;IAC9C,OAAO,CAAC,SAAS,CAAwB;IACzC,OAAO,CAAC,aAAa,CAAC,CAAiB;IACvC,OAAO,CAAC,cAAc,CAAqB;IAC3C,OAAO,CAAC,YAAY,CAA4B;IAChD,OAAO,CAAC,WAAW,CAAqC;IACxD,OAAO,CAAC,WAAW,CAAqB;IACxC,OAAO,CAAC,QAAQ,CAAS;;IAWzB,OAAO,CAAC,kBAAkB;IAoB1B,MAAM,CAAC,GAAG,EAAE,MAAM,GAAG,IAAI;IAmBzB,WAAW,IAAI,IAAI;IAKnB,UAAU,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,GAAG,IAAI;IAehC,OAAO,CAAC,YAAY;IAMpB,OAAO,CAAC,WAAW;IAgBnB,OAAO,CAAC,UAAU;IA0DlB,OAAO,CAAC,iBAAiB;IAwEzB,OAAO,CAAC,aAAa;CAUtB"}
\ No newline at end of file
diff --git a/dist/test/reporter/jsonlReporter.js b/dist/test/reporter/jsonlReporter.js
index efb604e..74a503d 100644
--- a/dist/test/reporter/jsonlReporter.js
+++ b/dist/test/reporter/jsonlReporter.js
@@ -1,5 +1,6 @@
 import * as fs from 'fs';
 import * as path from 'path';
+import * as os from 'os';
 export default class JSONLReporter {
     ctx;
     summaryPath = 'reports/summary.jsonl';
@@ -8,6 +9,32 @@ export default class JSONLReporter {
     processedTests = new Set();
     indexEntries = [];
     caseStreams = new Map();
+    environment;
+    testSeed;
+    constructor() {
+        // Fixed seed for determinism (can be overridden via env var)
+        this.testSeed = process.env.TEST_SEED
+            ? parseInt(process.env.TEST_SEED, 10)
+            : 42;
+        this.environment = this.captureEnvironment();
+    }
+    captureEnvironment() {
+        const relevantEnvVars = {};
+        const envKeys = ['CI', 'NODE_ENV', 'TEST_SEED', 'LAMINAR_DEBUG', 'LAMINAR_SUITE', 'LAMINAR_CASE'];
+        for (const key of envKeys) {
+            if (process.env[key]) {
+                relevantEnvVars[key] = process.env[key];
+            }
+        }
+        return {
+            nodeVersion: process.version,
+            platform: process.platform,
+            arch: process.arch,
+            os: `${os.type()} ${os.release()}`,
+            seed: this.testSeed,
+            envVars: Object.keys(relevantEnvVars).length > 0 ? relevantEnvVars : undefined,
+        };
+    }
     onInit(ctx) {
         this.ctx = ctx;
         const dir = path.dirname(this.summaryPath);
@@ -17,6 +44,13 @@ export default class JSONLReporter {
         }
         this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
         this.indexEntries = [];
+        // Write environment info to summary on init
+        if (this.summaryStream) {
+            this.summaryStream.write(JSON.stringify({
+                type: 'environment',
+                ...this.environment
+            }) + '\n');
+        }
     }
     onCollected() {
         const files = this.ctx.state.getFiles();
@@ -78,6 +112,7 @@ export default class JSONLReporter {
             duration,
             location,
             artifactURI,
+            seed: this.testSeed,
         };
         if (result.errors && result.errors.length > 0) {
             summary.error = result.errors.map(e => e.message || String(e)).join('; ');
@@ -110,13 +145,15 @@ export default class JSONLReporter {
         const stream = fs.createWriteStream(artifactPath, { flags: 'a' });
         const ts = Date.now();
         // Write test lifecycle events
-        // 1. Test begin event
+        // 1. Test begin event with environment and seed
         stream.write(JSON.stringify({
             ts,
             lvl: 'info',
             case: caseName,
             phase: 'setup',
-            evt: 'case.begin'
+            evt: 'case.begin',
+            env: this.environment,
+            seed: this.testSeed
         }) + '\n');
         // 2. Test execution event
         stream.write(JSON.stringify({
@@ -161,6 +198,7 @@ export default class JSONLReporter {
             generated: new Date().toISOString(),
             totalTests: this.indexEntries.length,
             artifacts: this.indexEntries,
+            environment: this.environment,
         };
         fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
     }
diff --git a/dist/test/reporter/jsonlReporter.js.map b/dist/test/reporter/jsonlReporter.js.map
index 80b792f..e265974 100644
--- a/dist/test/reporter/jsonlReporter.js.map
+++ b/dist/test/reporter/jsonlReporter.js.map
@@ -1 +1 @@
-{"version":3,"file":"jsonlReporter.js","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"jsonlReporter.js","sourceRoot":"","sources":["../../../src/test/reporter/jsonlReporter.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/patches/DIFF_T2601_env-seed-capture.patch b/patches/DIFF_T2601_env-seed-capture.patch
new file mode 100644
index 0000000..c8b79a6
--- /dev/null
+++ b/patches/DIFF_T2601_env-seed-capture.patch
@@ -0,0 +1,297 @@
+diff --git a/scripts/laminar-run.ts b/scripts/laminar-run.ts
+index 6aad0c3..55cf24a 100644
+--- a/scripts/laminar-run.ts
++++ b/scripts/laminar-run.ts
+@@ -10,11 +10,24 @@ type SummaryEntry = {
+   error?: string;
+ };
+ 
++type StabilityResult = {
++  location: string;
++  runs: number;
++  passes: number;
++  fails: number;
++  score: number; // percentage 0-100
++};
++
+ function run(cmd: string, args: string[], env?: Record<string,string>) {
+   const res = spawnSync(cmd, args, { stdio: 'inherit', env: { ...process.env, ...env } });
+   return res.status ?? 0;
+ }
+ 
++function runSilent(cmd: string, args: string[], env?: Record<string,string>) {
++  const res = spawnSync(cmd, args, { stdio: 'pipe', env: { ...process.env, ...env } });
++  return res.status ?? 0;
++}
++
+ function parseSummary(): SummaryEntry[] {
+   const path = 'reports/summary.jsonl';
+   if (!fs.existsSync(path)) return [];
+@@ -38,12 +51,127 @@ function caseFromArtifact(uri?: string): string {
+   return m ? m[1] : 'debug.case';
+ }
+ 
++async function runFlakeDetection(reruns: number = 5) {
++  console.log(`\n=== FLAKE DETECTION MODE (${reruns} runs per test) ===\n`);
++  
++  fs.mkdirSync('reports', { recursive: true });
++  
++  // Use fixed seed for reproducibility
++  const seed = '42';
++  const env = { TEST_SEED: seed };
++  
++  const stabilityMap = new Map<string, StabilityResult>();
++  
++  for (let i = 1; i <= reruns; i++) {
++    console.log(`\nRun ${i}/${reruns} (seed: ${seed})...`);
++    
++    // Clean summary before each run
++    if (fs.existsSync('reports/summary.jsonl')) fs.unlinkSync('reports/summary.jsonl');
++    
++    // Run tests silently after first run
++    if (i === 1) {
++      run('npm', ['run', 'test:ci'], env);
++    } else {
++      runSilent('npm', ['run', 'test:ci'], env);
++    }
++    
++    const entries = parseSummary();
++    
++    // Track stability for each test
++    for (const entry of entries) {
++      if (entry.status === 'skip') continue;
++      
++      const loc = entry.location;
++      if (!stabilityMap.has(loc)) {
++        stabilityMap.set(loc, { location: loc, runs: 0, passes: 0, fails: 0, score: 0 });
++      }
++      
++      const stat = stabilityMap.get(loc)!;
++      stat.runs++;
++      if (entry.status === 'pass') {
++        stat.passes++;
++      } else if (entry.status === 'fail') {
++        stat.fails++;
++      }
++    }
++  }
++  
++  // Calculate final scores
++  const results: StabilityResult[] = [];
++  for (const stat of stabilityMap.values()) {
++    stat.score = Math.round((stat.passes / stat.runs) * 100);
++    results.push(stat);
++  }
++  
++  // Sort by score (flakiest first)
++  results.sort((a, b) => a.score - b.score);
++  
++  // Report findings
++  console.log('\n=== STABILITY REPORT ===\n');
++  
++  const flakyTests = results.filter(r => r.score < 100 && r.score > 0);
++  const alwaysFail = results.filter(r => r.score === 0);
++  const stable = results.filter(r => r.score === 100);
++  
++  if (flakyTests.length > 0) {
++    console.log('FLAKY TESTS:');
++    for (const t of flakyTests) {
++      console.log(`  ${t.score}% stable - ${t.location} (${t.passes}/${t.runs} passed)`);
++    }
++    console.log('');
++  }
++  
++  if (alwaysFail.length > 0) {
++    console.log('ALWAYS FAIL:');
++    for (const t of alwaysFail) {
++      console.log(`  ${t.location} (0/${t.runs} passed)`);
++    }
++    console.log('');
++  }
++  
++  console.log(`SUMMARY: ${stable.length} stable, ${flakyTests.length} flaky, ${alwaysFail.length} always fail`);
++  
++  // Save detailed report
++  const reportPath = 'reports/stability-report.json';
++  fs.writeFileSync(reportPath, JSON.stringify({ 
++    seed,
++    reruns,
++    timestamp: new Date().toISOString(),
++    results 
++  }, null, 2));
++  console.log(`\nDetailed report saved to ${reportPath}`);
++  
++  // Exit with error if any flaky tests found
++  if (flakyTests.length > 0 || alwaysFail.length > 0) {
++    process.exit(1);
++  }
++  
++  process.exit(0);
++}
++
+ async function main() {
++  // Check for flake detection mode
++  const args = process.argv.slice(2);
++  const flakeDetectIdx = args.findIndex(a => a === '--flake-detect' || a === '--flake');
++  
++  if (flakeDetectIdx !== -1) {
++    // Parse N reruns (default 5)
++    let reruns = 5;
++    if (flakeDetectIdx + 1 < args.length && /^\d+$/.test(args[flakeDetectIdx + 1])) {
++      reruns = parseInt(args[flakeDetectIdx + 1], 10);
++    }
++    await runFlakeDetection(reruns);
++    return;
++  }
++  
+   // First pass: fast lane
+   fs.mkdirSync('reports', { recursive: true });
+   // Clean previous summary
+   if (fs.existsSync('reports/summary.jsonl')) fs.unlinkSync('reports/summary.jsonl');
+-  const status1 = run('npm', ['run', 'test:ci']);
++  
++  // Set deterministic seed if not already set
++  const testEnv = process.env.TEST_SEED ? {} : { TEST_SEED: '42' };
++  const status1 = run('npm', ['run', 'test:ci'], testEnv);
+ 
+   const entries = parseSummary();
+   const fails = entries.filter(e => e.status === 'fail');
+@@ -58,7 +186,12 @@ async function main() {
+     const isPty = /ptyServerWrapper\.spec\.ts|multiModalOutput\.spec\.ts/.test(file);
+     const suite = suiteFromLocation(f.location);
+     const caseName = caseFromArtifact(f.artifactURI);
+-    const env = { LAMINAR_DEBUG: '1', LAMINAR_SUITE: suite, LAMINAR_CASE: caseName };
++    const env = { 
++      LAMINAR_DEBUG: '1', 
++      LAMINAR_SUITE: suite, 
++      LAMINAR_CASE: caseName,
++      ...(process.env.TEST_SEED ? {} : { TEST_SEED: '42' })
++    };
+     if (isPty) {
+       // Rerun pty lane for that file
+       overall = run('vitest', ['run', '--pool=forks', '--poolOptions.forks.singleFork=true', file, '--reporter=./dist/test/reporter/jsonlReporter.js'], env) || overall;
+diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
+index 5cbcd5a..c698146 100644
+--- a/src/test/reporter/jsonlReporter.ts
++++ b/src/test/reporter/jsonlReporter.ts
+@@ -1,13 +1,25 @@
+ import * as fs from 'fs';
+ import * as path from 'path';
++import * as os from 'os';
+ import type { File, Reporter, Task, Vitest } from 'vitest';
+ 
++interface RuntimeEnvironment {
++  nodeVersion: string;
++  platform: string;
++  arch: string;
++  os: string;
++  seed?: number;
++  envVars?: Record<string, string>;
++}
++
+ interface TestSummary {
+   status: 'pass' | 'fail' | 'skip';
+   duration: number;
+   location: string;
+   artifactURI?: string;
+   error?: string;
++  seed?: number;
++  env?: RuntimeEnvironment;
+ }
+ 
+ interface ArtifactIndexEntry {
+@@ -27,6 +39,7 @@ interface ArtifactIndex {
+   generated: string;
+   totalTests: number;
+   artifacts: ArtifactIndexEntry[];
++  environment: RuntimeEnvironment;
+ }
+ 
+ export default class JSONLReporter implements Reporter {
+@@ -37,6 +50,37 @@ export default class JSONLReporter implements Reporter {
+   private processedTests = new Set<string>();
+   private indexEntries: ArtifactIndexEntry[] = [];
+   private caseStreams = new Map<string, fs.WriteStream>();
++  private environment: RuntimeEnvironment;
++  private testSeed: number;
++
++  constructor() {
++    // Fixed seed for determinism (can be overridden via env var)
++    this.testSeed = process.env.TEST_SEED 
++      ? parseInt(process.env.TEST_SEED, 10)
++      : 42;
++    
++    this.environment = this.captureEnvironment();
++  }
++
++  private captureEnvironment(): RuntimeEnvironment {
++    const relevantEnvVars: Record<string, string> = {};
++    const envKeys = ['CI', 'NODE_ENV', 'TEST_SEED', 'LAMINAR_DEBUG', 'LAMINAR_SUITE', 'LAMINAR_CASE'];
++    
++    for (const key of envKeys) {
++      if (process.env[key]) {
++        relevantEnvVars[key] = process.env[key]!;
++      }
++    }
++
++    return {
++      nodeVersion: process.version,
++      platform: process.platform,
++      arch: process.arch,
++      os: `${os.type()} ${os.release()}`,
++      seed: this.testSeed,
++      envVars: Object.keys(relevantEnvVars).length > 0 ? relevantEnvVars : undefined,
++    };
++  }
+ 
+   onInit(ctx: Vitest): void {
+     this.ctx = ctx;
+@@ -47,6 +91,14 @@ export default class JSONLReporter implements Reporter {
+     }
+     this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
+     this.indexEntries = [];
++    
++    // Write environment info to summary on init
++    if (this.summaryStream) {
++      this.summaryStream.write(JSON.stringify({
++        type: 'environment',
++        ...this.environment
++      }) + '\n');
++    }
+   }
+ 
+   onCollected(): void {
+@@ -121,6 +173,7 @@ export default class JSONLReporter implements Reporter {
+       duration,
+       location,
+       artifactURI,
++      seed: this.testSeed,
+     };
+ 
+     if (result.errors && result.errors.length > 0) {
+@@ -167,13 +220,15 @@ export default class JSONLReporter implements Reporter {
+     const ts = Date.now();
+ 
+     // Write test lifecycle events
+-    // 1. Test begin event
++    // 1. Test begin event with environment and seed
+     stream.write(JSON.stringify({
+       ts,
+       lvl: 'info',
+       case: caseName,
+       phase: 'setup',
+-      evt: 'case.begin'
++      evt: 'case.begin',
++      env: this.environment,
++      seed: this.testSeed
+     }) + '\n');
+ 
+     // 2. Test execution event
+@@ -223,6 +278,7 @@ export default class JSONLReporter implements Reporter {
+       generated: new Date().toISOString(),
+       totalTests: this.indexEntries.length,
+       artifacts: this.indexEntries,
++      environment: this.environment,
+     };
+ 
+     fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
diff --git a/patches/DIFF_T2602_flake-runner.patch b/patches/DIFF_T2602_flake-runner.patch
new file mode 100644
index 0000000..371df32
--- /dev/null
+++ b/patches/DIFF_T2602_flake-runner.patch
@@ -0,0 +1,149 @@
+diff --git a/scripts/laminar-run.ts b/scripts/laminar-run.ts
+index 6aad0c3..b726ab1 100644
+--- a/scripts/laminar-run.ts
++++ b/scripts/laminar-run.ts
+@@ -10,11 +10,24 @@ type SummaryEntry = {
+   error?: string;
+ };
+ 
++type StabilityResult = {
++  location: string;
++  runs: number;
++  passes: number;
++  fails: number;
++  score: number; // percentage 0-100
++};
++
+ function run(cmd: string, args: string[], env?: Record<string,string>) {
+   const res = spawnSync(cmd, args, { stdio: 'inherit', env: { ...process.env, ...env } });
+   return res.status ?? 0;
+ }
+ 
++function runSilent(cmd: string, args: string[], env?: Record<string,string>) {
++  const res = spawnSync(cmd, args, { stdio: 'pipe', env: { ...process.env, ...env } });
++  return res.status ?? 0;
++}
++
+ function parseSummary(): SummaryEntry[] {
+   const path = 'reports/summary.jsonl';
+   if (!fs.existsSync(path)) return [];
+@@ -38,7 +51,119 @@ function caseFromArtifact(uri?: string): string {
+   return m ? m[1] : 'debug.case';
+ }
+ 
++async function runFlakeDetection(reruns: number = 5) {
++  console.log(`\n=== FLAKE DETECTION MODE (${reruns} runs per test) ===\n`);
++  
++  fs.mkdirSync('reports', { recursive: true });
++  
++  // Use fixed seed for reproducibility
++  const seed = '42';
++  const env = { VITEST_SEED: seed };
++  
++  const stabilityMap = new Map<string, StabilityResult>();
++  
++  for (let i = 1; i <= reruns; i++) {
++    console.log(`\nRun ${i}/${reruns} (seed: ${seed})...`);
++    
++    // Clean summary before each run
++    if (fs.existsSync('reports/summary.jsonl')) fs.unlinkSync('reports/summary.jsonl');
++    
++    // Run tests silently after first run
++    if (i === 1) {
++      run('npm', ['run', 'test:ci'], env);
++    } else {
++      runSilent('npm', ['run', 'test:ci'], env);
++    }
++    
++    const entries = parseSummary();
++    
++    // Track stability for each test
++    for (const entry of entries) {
++      if (entry.status === 'skip') continue;
++      
++      const loc = entry.location;
++      if (!stabilityMap.has(loc)) {
++        stabilityMap.set(loc, { location: loc, runs: 0, passes: 0, fails: 0, score: 0 });
++      }
++      
++      const stat = stabilityMap.get(loc)!;
++      stat.runs++;
++      if (entry.status === 'pass') {
++        stat.passes++;
++      } else if (entry.status === 'fail') {
++        stat.fails++;
++      }
++    }
++  }
++  
++  // Calculate final scores
++  const results: StabilityResult[] = [];
++  for (const stat of stabilityMap.values()) {
++    stat.score = Math.round((stat.passes / stat.runs) * 100);
++    results.push(stat);
++  }
++  
++  // Sort by score (flakiest first)
++  results.sort((a, b) => a.score - b.score);
++  
++  // Report findings
++  console.log('\n=== STABILITY REPORT ===\n');
++  
++  const flakyTests = results.filter(r => r.score < 100 && r.score > 0);
++  const alwaysFail = results.filter(r => r.score === 0);
++  const stable = results.filter(r => r.score === 100);
++  
++  if (flakyTests.length > 0) {
++    console.log('FLAKY TESTS:');
++    for (const t of flakyTests) {
++      console.log(`  ${t.score}% stable - ${t.location} (${t.passes}/${t.runs} passed)`);
++    }
++    console.log('');
++  }
++  
++  if (alwaysFail.length > 0) {
++    console.log('ALWAYS FAIL:');
++    for (const t of alwaysFail) {
++      console.log(`  ${t.location} (0/${t.runs} passed)`);
++    }
++    console.log('');
++  }
++  
++  console.log(`SUMMARY: ${stable.length} stable, ${flakyTests.length} flaky, ${alwaysFail.length} always fail`);
++  
++  // Save detailed report
++  const reportPath = 'reports/stability-report.json';
++  fs.writeFileSync(reportPath, JSON.stringify({ 
++    seed,
++    reruns,
++    timestamp: new Date().toISOString(),
++    results 
++  }, null, 2));
++  console.log(`\nDetailed report saved to ${reportPath}`);
++  
++  // Exit with error if any flaky tests found
++  if (flakyTests.length > 0 || alwaysFail.length > 0) {
++    process.exit(1);
++  }
++  
++  process.exit(0);
++}
++
+ async function main() {
++  // Check for flake detection mode
++  const args = process.argv.slice(2);
++  const flakeDetectIdx = args.findIndex(a => a === '--flake-detect' || a === '--flake');
++  
++  if (flakeDetectIdx !== -1) {
++    // Parse N reruns (default 5)
++    let reruns = 5;
++    if (flakeDetectIdx + 1 < args.length && /^\d+$/.test(args[flakeDetectIdx + 1])) {
++      reruns = parseInt(args[flakeDetectIdx + 1], 10);
++    }
++    await runFlakeDetection(reruns);
++    return;
++  }
++  
+   // First pass: fast lane
+   fs.mkdirSync('reports', { recursive: true });
+   // Clean previous summary
diff --git a/patches/T2602_SUMMARY.md b/patches/T2602_SUMMARY.md
new file mode 100644
index 0000000..7dbaa68
--- /dev/null
+++ b/patches/T2602_SUMMARY.md
@@ -0,0 +1,91 @@
+# T2602: Flake Runner - N Reruns with Same Seed
+
+## Implementation Summary
+
+Added flake detection capability to `laminar-run.ts` to identify unstable tests by running them multiple times with the same seed.
+
+## Changes Made
+
+### scripts/laminar-run.ts
+- Added `StabilityResult` type to track test stability metrics
+- Added `runSilent()` function to run tests without output (after first run)
+- Added `runFlakeDetection()` function that:
+  - Runs tests N times (default 5) with fixed seed (42)
+  - Tracks pass/fail counts per test location
+  - Calculates stability scores (0-100%)
+  - Reports flaky tests, always-fail tests, and stable tests
+  - Saves detailed JSON report to `reports/stability-report.json`
+  - Exits with error code if flaky or failing tests found
+- Updated `main()` to handle `--flake-detect` or `--flake` flags with optional N parameter
+
+## Usage
+
+```bash
+# Default: 5 runs per test
+npm run laminar:run -- --flake-detect
+
+# Custom number of runs
+npm run laminar:run -- --flake 10
+
+# Short form
+npm run laminar:run -- --flake 3
+```
+
+## Output
+
+The flake detection produces:
+1. Console output showing:
+   - Progress of each run
+   - Flaky tests with stability percentage
+   - Always-failing tests
+   - Summary counts
+2. JSON report saved to `reports/stability-report.json` containing:
+   - Seed used
+   - Number of reruns
+   - Timestamp
+   - Detailed results for each test
+
+## Features Delivered
+
+✅ `--flake-detect` flag (also accepts `--flake`)  
+✅ N reruns with identical seed (default 5, configurable)  
+✅ Stability score calculation (% successful runs)  
+✅ Reports flaky tests (stability < 100%)  
+✅ Stability scores in summary output  
+✅ Normal `npm run laminar:run` still works  
+✅ Detailed JSON report for further analysis
+
+## Example Output
+
+```
+=== FLAKE DETECTION MODE (5 runs per test) ===
+
+Run 1/5 (seed: 42)...
+[test output]
+
+Run 2/5 (seed: 42)...
+[silent]
+
+=== STABILITY REPORT ===
+
+FLAKY TESTS:
+  60% stable - tests/feature.spec.ts:45 (3/5 passed)
+  80% stable - tests/timing.spec.ts:12 (4/5 passed)
+
+ALWAYS FAIL:
+  tests/broken.spec.ts:8 (0/5 passed)
+
+SUMMARY: 142 stable, 2 flaky, 1 always fail
+
+Detailed report saved to reports/stability-report.json
+```
+
+## Files Modified
+
+- `scripts/laminar-run.ts` - Added flake detection logic
+
+## Exit Behavior
+
+- Exits with code 0 if all tests are stable (100% pass rate)
+- Exits with code 1 if any flaky or always-failing tests detected
+- This allows CI integration to fail on flaky tests
diff --git a/reports/ansiParser.spec/should_handle_backspace.jsonl b/reports/ansiParser.spec/should_handle_backspace.jsonl
index 5b6fe99..b901370 100644
--- a/reports/ansiParser.spec/should_handle_backspace.jsonl
+++ b/reports/ansiParser.spec/should_handle_backspace.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle backspace","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle backspace","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle backspace","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"should handle backspace","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"should handle backspace","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"should handle backspace","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_carriage_return.jsonl b/reports/ansiParser.spec/should_handle_carriage_return.jsonl
index ad6964a..3aa6a69 100644
--- a/reports/ansiParser.spec/should_handle_carriage_return.jsonl
+++ b/reports/ansiParser.spec/should_handle_carriage_return.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940179,"lvl":"info","case":"should handle carriage return","phase":"setup","evt":"case.begin"}
-{"ts":1760291940180,"lvl":"info","case":"should handle carriage return","phase":"execution","evt":"test.run"}
-{"ts":1760291940181,"lvl":"info","case":"should handle carriage return","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should handle carriage return","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should handle carriage return","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should handle carriage return","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl b/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
index 616ca58..cdc3103 100644
--- a/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
+++ b/reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle color codes (SGR)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle color codes (SGR)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle color codes (SGR)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should handle color codes (SGR)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should handle color codes (SGR)","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should handle color codes (SGR)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_color_reset.jsonl b/reports/ansiParser.spec/should_handle_color_reset.jsonl
index fface41..ee65056 100644
--- a/reports/ansiParser.spec/should_handle_color_reset.jsonl
+++ b/reports/ansiParser.spec/should_handle_color_reset.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle color reset","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle color reset","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle color reset","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should handle color reset","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should handle color reset","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should handle color reset","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl b/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
index d6f7ddb..23d49e3 100644
--- a/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
+++ b/reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle cursor back (CUB)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle cursor back (CUB)","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle cursor back (CUB)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle cursor back (CUB)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle cursor back (CUB)","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle cursor back (CUB)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl b/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
index 09ea18c..f885348 100644
--- a/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
+++ b/reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle cursor down (CUD)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle cursor down (CUD)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle cursor down (CUD)","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle cursor down (CUD)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle cursor down (CUD)","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle cursor down (CUD)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl b/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
index aa52749..bdaf67e 100644
--- a/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
+++ b/reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle cursor forward (CUF)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl b/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
index 11083bb..fd10563 100644
--- a/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
+++ b/reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle cursor up (CUU)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle cursor up (CUU)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle cursor up (CUU)","phase":"teardown","evt":"case.end","payload":{"duration":14,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle cursor up (CUU)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle cursor up (CUU)","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle cursor up (CUU)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl b/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
index 7e03904..a9c822a 100644
--- a/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
+++ b/reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle line clearing (EL)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle line clearing (EL)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle line clearing (EL)","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle line clearing (EL)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle line clearing (EL)","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle line clearing (EL)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_line_wrapping.jsonl b/reports/ansiParser.spec/should_handle_line_wrapping.jsonl
index 77b89cf..733070a 100644
--- a/reports/ansiParser.spec/should_handle_line_wrapping.jsonl
+++ b/reports/ansiParser.spec/should_handle_line_wrapping.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle line wrapping","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle line wrapping","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle line wrapping","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle line wrapping","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle line wrapping","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle line wrapping","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_newlines.jsonl b/reports/ansiParser.spec/should_handle_newlines.jsonl
index 92ca812..9e1e575 100644
--- a/reports/ansiParser.spec/should_handle_newlines.jsonl
+++ b/reports/ansiParser.spec/should_handle_newlines.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940179,"lvl":"info","case":"should handle newlines","phase":"setup","evt":"case.begin"}
-{"ts":1760291940180,"lvl":"info","case":"should handle newlines","phase":"execution","evt":"test.run"}
-{"ts":1760291940181,"lvl":"info","case":"should handle newlines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should handle newlines","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should handle newlines","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should handle newlines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl b/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
index 1ca87f1..770751d 100644
--- a/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
+++ b/reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940180,"lvl":"info","case":"should handle screen clearing (ED)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940181,"lvl":"info","case":"should handle screen clearing (ED)","phase":"execution","evt":"test.run"}
-{"ts":1760291940182,"lvl":"info","case":"should handle screen clearing (ED)","phase":"teardown","evt":"case.end","payload":{"duration":48,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should handle screen clearing (ED)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should handle screen clearing (ED)","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should handle screen clearing (ED)","phase":"teardown","evt":"case.end","payload":{"duration":23,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_scrolling.jsonl b/reports/ansiParser.spec/should_handle_scrolling.jsonl
index ceee7fc..8c202cc 100644
--- a/reports/ansiParser.spec/should_handle_scrolling.jsonl
+++ b/reports/ansiParser.spec/should_handle_scrolling.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle scrolling","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle scrolling","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle scrolling","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486561,"lvl":"info","case":"should handle scrolling","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486562,"lvl":"info","case":"should handle scrolling","phase":"execution","evt":"test.run"}
+{"ts":1760292486563,"lvl":"info","case":"should handle scrolling","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_handle_tabs.jsonl b/reports/ansiParser.spec/should_handle_tabs.jsonl
index 64abd42..f103d54 100644
--- a/reports/ansiParser.spec/should_handle_tabs.jsonl
+++ b/reports/ansiParser.spec/should_handle_tabs.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle tabs","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle tabs","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle tabs","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"should handle tabs","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"should handle tabs","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"should handle tabs","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl b/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
index 88596f5..dfedba6 100644
--- a/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
+++ b/reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940179,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"setup","evt":"case.begin"}
-{"ts":1760291940180,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"execution","evt":"test.run"}
-{"ts":1760291940181,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should parse ANSI cursor movement (CUP)","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/ansiParser.spec/should_parse_regular_characters.jsonl b/reports/ansiParser.spec/should_parse_regular_characters.jsonl
index 9d73ad0..c6a6243 100644
--- a/reports/ansiParser.spec/should_parse_regular_characters.jsonl
+++ b/reports/ansiParser.spec/should_parse_regular_characters.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940179,"lvl":"info","case":"should parse regular characters","phase":"setup","evt":"case.begin"}
-{"ts":1760291940180,"lvl":"info","case":"should parse regular characters","phase":"execution","evt":"test.run"}
-{"ts":1760291940181,"lvl":"info","case":"should parse regular characters","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486560,"lvl":"info","case":"should parse regular characters","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486561,"lvl":"info","case":"should parse regular characters","phase":"execution","evt":"test.run"}
+{"ts":1760292486562,"lvl":"info","case":"should parse regular characters","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl b/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
index a6c665b..0b4ef01 100644
--- a/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
+++ b/reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should contain valid JSONL format","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should contain valid JSONL format","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should contain valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should contain valid JSONL format","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should contain valid JSONL format","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should contain valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl b/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
index 0fbc084..b9304f3 100644
--- a/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
+++ b/reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940048,"lvl":"info","case":"should create JSONL file for each test case","phase":"setup","evt":"case.begin"}
-{"ts":1760291940049,"lvl":"info","case":"should create JSONL file for each test case","phase":"execution","evt":"test.run"}
-{"ts":1760291940050,"lvl":"info","case":"should create JSONL file for each test case","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should create JSONL file for each test case","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should create JSONL file for each test case","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should create JSONL file for each test case","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl b/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
index 1ef7b22..49c262c 100644
--- a/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
+++ b/reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should cross-reference between index and case files","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should cross-reference between index and case files","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should cross-reference between index and case files","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486669,"lvl":"info","case":"should cross-reference between index and case files","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should cross-reference between index and case files","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"info","case":"should cross-reference between index and case files","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl b/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
index 8e28be1..458cc17 100644
--- a/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
+++ b/reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940046,"lvl":"info","case":"should generate index.json with valid structure","phase":"setup","evt":"case.begin"}
-{"ts":1760291940047,"lvl":"info","case":"should generate index.json with valid structure","phase":"execution","evt":"test.run"}
-{"ts":1760291940048,"lvl":"info","case":"should generate index.json with valid structure","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486666,"lvl":"info","case":"should generate index.json with valid structure","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486667,"lvl":"info","case":"should generate index.json with valid structure","phase":"execution","evt":"test.run"}
+{"ts":1760292486668,"lvl":"info","case":"should generate index.json with valid structure","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl b/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
index 7b3cad7..5102c9e 100644
--- a/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
+++ b/reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should handle test names with special characters","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should handle test names with special characters","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should handle test names with special characters","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486669,"lvl":"info","case":"should handle test names with special characters","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should handle test names with special characters","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"info","case":"should handle test names with special characters","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl b/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
index 54509ee..a6109a8 100644
--- a/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
+++ b/reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should have all case files in reports directory","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should have all case files in reports directory","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should have all case files in reports directory","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"should have all case files in reports directory","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"should have all case files in reports directory","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"should have all case files in reports directory","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl b/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
index 6bca3cf..aaae323 100644
--- a/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
+++ b/reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940047,"lvl":"info","case":"should have at least one artifact entry","phase":"setup","evt":"case.begin"}
-{"ts":1760291940048,"lvl":"info","case":"should have at least one artifact entry","phase":"execution","evt":"test.run"}
-{"ts":1760291940049,"lvl":"info","case":"should have at least one artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486666,"lvl":"info","case":"should have at least one artifact entry","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486667,"lvl":"info","case":"should have at least one artifact entry","phase":"execution","evt":"test.run"}
+{"ts":1760292486668,"lvl":"info","case":"should have at least one artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl b/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
index a3d6b89..73cbea9 100644
--- a/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
+++ b/reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940048,"lvl":"info","case":"should have caseFile path for each entry","phase":"setup","evt":"case.begin"}
-{"ts":1760291940049,"lvl":"info","case":"should have caseFile path for each entry","phase":"execution","evt":"test.run"}
-{"ts":1760291940050,"lvl":"info","case":"should have caseFile path for each entry","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should have caseFile path for each entry","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should have caseFile path for each entry","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should have caseFile path for each entry","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl b/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
index 8c4eea2..53bdce7 100644
--- a/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
+++ b/reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486669,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"info","case":"should have case name in JSONL events matching test name","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl b/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
index c6784ce..7484d06 100644
--- a/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
+++ b/reports/coreReporter.spec/should_have_chronological_timestamps.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940050,"lvl":"info","case":"should have chronological timestamps","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should have chronological timestamps","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"info","case":"should have chronological timestamps","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should have chronological timestamps","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should have chronological timestamps","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should have chronological timestamps","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_consistent_status_values.jsonl b/reports/coreReporter.spec/should_have_consistent_status_values.jsonl
index 01510cd..060ebba 100644
--- a/reports/coreReporter.spec/should_have_consistent_status_values.jsonl
+++ b/reports/coreReporter.spec/should_have_consistent_status_values.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should have consistent status values","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should have consistent status values","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should have consistent status values","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"should have consistent status values","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"should have consistent status values","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"should have consistent status values","phase":"teardown","evt":"case.end","payload":{"duration":30,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl b/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
index e64bb27..9c5f745 100644
--- a/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
+++ b/reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940050,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should have error-level log for case.end of failed tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.json b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.json
new file mode 100644
index 0000000..75b7add
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.json
@@ -0,0 +1,130 @@
+{
+  "case": "should_have_matching_test_count_between_index_and_summary",
+  "status": "fail",
+  "duration": 8,
+  "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+  "error": "expected 1 to be greater than or equal to 150",
+  "summary": {
+    "totalEvents": 4,
+    "includedEvents": 2,
+    "redactedFields": 0,
+    "budgetUsed": 1981,
+    "budgetLimit": 10240
+  },
+  "suspects": [
+    {
+      "ts": 1760292439774,
+      "lvl": "error",
+      "case": "should have matching test count between index and summary",
+      "phase": "teardown",
+      "evt": "case.end",
+      "payload": {
+        "duration": 8,
+        "status": "failed"
+      },
+      "score": 80,
+      "reasons": [
+        "error level",
+        "close proximity to failure"
+      ]
+    },
+    {
+      "ts": 1760292439773,
+      "lvl": "error",
+      "case": "should have matching test count between index and summary",
+      "phase": "execution",
+      "evt": "test.error",
+      "payload": {
+        "message": "expected 1 to be greater than or equal to 150",
+        "stack": "AssertionError: expected 1 to be greater than or equal to 150\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"
+      },
+      "score": 79.99,
+      "reasons": [
+        "error level",
+        "close proximity to failure"
+      ]
+    },
+    {
+      "ts": 1760292439772,
+      "lvl": "info",
+      "case": "should have matching test count between index and summary",
+      "phase": "execution",
+      "evt": "test.run",
+      "score": 29.98,
+      "reasons": [
+        "close proximity to failure"
+      ]
+    },
+    {
+      "ts": 1760292439771,
+      "lvl": "info",
+      "case": "should have matching test count between index and summary",
+      "phase": "setup",
+      "evt": "case.begin",
+      "env": {
+        "nodeVersion": "v24.9.0",
+        "platform": "linux",
+        "arch": "x64",
+        "os": "Linux 6.8.0-85-generic",
+        "seed": 42,
+        "envVars": {
+          "NODE_ENV": "test"
+        }
+      },
+      "seed": 42,
+      "score": 29.97,
+      "reasons": [
+        "close proximity to failure"
+      ]
+    }
+  ],
+  "codeframes": [
+    {
+      "file": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts",
+      "line": 240,
+      "column": 35,
+      "source": [
+        "      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');",
+        "      const summaryLines = summaryContent.trim().split('\\n');",
+        "      expect(summaryLines.length).toBeGreaterThanOrEqual(indexData.totalTests);",
+        "    });",
+        ""
+      ],
+      "context": {
+        "before": [
+          "      const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');",
+          "      const summaryLines = summaryContent.trim().split('\\n');"
+        ],
+        "focus": "      expect(summaryLines.length).toBeGreaterThanOrEqual(indexData.totalTests);",
+        "after": [
+          "    });",
+          ""
+        ]
+      }
+    }
+  ],
+  "events": [
+    {
+      "ts": 1760292439773,
+      "lvl": "error",
+      "case": "should have matching test count between index and summary",
+      "phase": "execution",
+      "evt": "test.error",
+      "payload": {
+        "message": "expected 1 to be greater than or equal to 150",
+        "stack": "AssertionError: expected 1 to be greater than or equal to 150\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"
+      }
+    },
+    {
+      "ts": 1760292439774,
+      "lvl": "error",
+      "case": "should have matching test count between index and summary",
+      "phase": "teardown",
+      "evt": "case.end",
+      "payload": {
+        "duration": 8,
+        "status": "failed"
+      }
+    }
+  ]
+}
\ No newline at end of file
diff --git a/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.md b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.md
new file mode 100644
index 0000000..3ca755d
--- /dev/null
+++ b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.digest.md
@@ -0,0 +1,42 @@
+# Digest: should_have_matching_test_count_between_index_and_summary
+
+**Status**: fail
+**Duration**: 8ms
+**Location**: /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0
+**Error**: expected 1 to be greater than or equal to 150
+
+## Summary
+- Total Events: 4
+- Included Events: 2
+- Budget Used: 1981 / 10240 bytes
+
+## Suspects
+- **Score: 80.0** - case.end (error)
+  - Reasons: error level, close proximity to failure
+  - Time: 2025-10-12T18:07:19.774Z
+- **Score: 80.0** - test.error (error)
+  - Reasons: error level, close proximity to failure
+  - Time: 2025-10-12T18:07:19.773Z
+- **Score: 30.0** - test.run (info)
+  - Reasons: close proximity to failure
+  - Time: 2025-10-12T18:07:19.772Z
+- **Score: 30.0** - case.begin (info)
+  - Reasons: close proximity to failure
+  - Time: 2025-10-12T18:07:19.771Z
+
+## Code Frames
+```
+  at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35
+  238 |       const summaryContent = fs.readFileSync(SUMMARY_PATH, 'utf-8');
+  239 |       const summaryLines = summaryContent.trim().split('\n');
+> 240 |       expect(summaryLines.length).toBeGreaterThanOrEqual(indexData.totalTests);
+                                        ^
+  241 |     });
+  242 | 
+```
+
+## Events
+```json
+{"ts":1760292439773,"lvl":"error","case":"should have matching test count between index and summary","phase":"execution","evt":"test.error","payload":{"message":"expected 1 to be greater than or equal to 150","stack":"AssertionError: expected 1 to be greater than or equal to 150\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"}}
+{"ts":1760292439774,"lvl":"error","case":"should have matching test count between index and summary","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"failed"}}
+```
\ No newline at end of file
diff --git a/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
index 39c9b16..34bf431 100644
--- a/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
+++ b/reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl
@@ -1,4 +1,4 @@
-{"ts":1760291940050,"lvl":"info","case":"should have matching test count between index and summary","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should have matching test count between index and summary","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"error","case":"should have matching test count between index and summary","phase":"execution","evt":"test.error","payload":{"message":"expected 1 to be greater than or equal to 151","stack":"AssertionError: expected 1 to be greater than or equal to 151\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"}}
-{"ts":1760291940053,"lvl":"error","case":"should have matching test count between index and summary","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"failed"}}
+{"ts":1760292486669,"lvl":"info","case":"should have matching test count between index and summary","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should have matching test count between index and summary","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"error","case":"should have matching test count between index and summary","phase":"execution","evt":"test.error","payload":{"message":"expected 6 to be greater than or equal to 149","stack":"AssertionError: expected 6 to be greater than or equal to 149\n    at /srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:240:35\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:135:14\n    at file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:60:26\n    at runTest (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:781:17)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runSuite (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:909:15)\n    at runFiles (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:958:5)\n    at startTests (file:///srv/repos0/mkolbol/node_modules/@vitest/runner/dist/index.js:967:3)\n    at file:///srv/repos0/mkolbol/node_modules/vitest/dist/chunks/runtime-runBaseTests.oAvMKtQC.js:116:7"}}
+{"ts":1760292486672,"lvl":"error","case":"should have matching test count between index and summary","phase":"teardown","evt":"case.end","payload":{"duration":11,"status":"failed"}}
diff --git a/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl b/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
index 1e7b5e6..4afee98 100644
--- a/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
+++ b/reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940050,"lvl":"info","case":"should have summary.jsonl file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should have summary.jsonl file","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"info","case":"should have summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486669,"lvl":"info","case":"should have summary.jsonl file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should have summary.jsonl file","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"info","case":"should have summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl b/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
index 4abbf34..7927f25 100644
--- a/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
+++ b/reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should have timestamps for all events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should have timestamps for all events","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should have timestamps for all events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should have timestamps for all events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should have timestamps for all events","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should have timestamps for all events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl b/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
index c7c82b2..c37cfd7 100644
--- a/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
+++ b/reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940047,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"setup","evt":"case.begin"}
-{"ts":1760291940048,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"execution","evt":"test.run"}
-{"ts":1760291940049,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486666,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486667,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"execution","evt":"test.run"}
+{"ts":1760292486668,"lvl":"info","case":"should have totalTests matching artifacts length","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl b/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
index 76d4e53..69eec7f 100644
--- a/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
+++ b/reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940051,"lvl":"info","case":"should have unique case file paths","phase":"setup","evt":"case.begin"}
-{"ts":1760291940052,"lvl":"info","case":"should have unique case file paths","phase":"execution","evt":"test.run"}
-{"ts":1760291940053,"lvl":"info","case":"should have unique case file paths","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"should have unique case file paths","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"should have unique case file paths","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"should have unique case file paths","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl b/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
index 1214440..a695791 100644
--- a/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
+++ b/reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940050,"lvl":"info","case":"should have valid JSONL in summary file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should have valid JSONL in summary file","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"info","case":"should have valid JSONL in summary file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486669,"lvl":"info","case":"should have valid JSONL in summary file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486670,"lvl":"info","case":"should have valid JSONL in summary file","phase":"execution","evt":"test.run"}
+{"ts":1760292486671,"lvl":"info","case":"should have valid JSONL in summary file","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_location_paths.jsonl b/reports/coreReporter.spec/should_have_valid_location_paths.jsonl
index 339e4d8..0e9bb85 100644
--- a/reports/coreReporter.spec/should_have_valid_location_paths.jsonl
+++ b/reports/coreReporter.spec/should_have_valid_location_paths.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940048,"lvl":"info","case":"should have valid location paths","phase":"setup","evt":"case.begin"}
-{"ts":1760291940049,"lvl":"info","case":"should have valid location paths","phase":"execution","evt":"test.run"}
-{"ts":1760291940050,"lvl":"info","case":"should have valid location paths","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should have valid location paths","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should have valid location paths","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should have valid location paths","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl b/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
index 269b7ca..08da49c 100644
--- a/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
+++ b/reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940047,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"setup","evt":"case.begin"}
-{"ts":1760291940048,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"execution","evt":"test.run"}
-{"ts":1760291940049,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":27,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should have valid structure for each artifact entry","phase":"teardown","evt":"case.end","payload":{"duration":35,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl b/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
index 2230e7b..17a3721 100644
--- a/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
+++ b/reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940047,"lvl":"info","case":"should have valid timestamp format","phase":"setup","evt":"case.begin"}
-{"ts":1760291940048,"lvl":"info","case":"should have valid timestamp format","phase":"execution","evt":"test.run"}
-{"ts":1760291940049,"lvl":"info","case":"should have valid timestamp format","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486666,"lvl":"info","case":"should have valid timestamp format","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486667,"lvl":"info","case":"should have valid timestamp format","phase":"execution","evt":"test.run"}
+{"ts":1760292486668,"lvl":"info","case":"should have valid timestamp format","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl b/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
index 5002297..682f343 100644
--- a/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
+++ b/reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940048,"lvl":"info","case":"should have valid timestamps for each entry","phase":"setup","evt":"case.begin"}
-{"ts":1760291940049,"lvl":"info","case":"should have valid timestamps for each entry","phase":"execution","evt":"test.run"}
-{"ts":1760291940050,"lvl":"info","case":"should have valid timestamps for each entry","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should have valid timestamps for each entry","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should have valid timestamps for each entry","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should have valid timestamps for each entry","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_case_begin_event.jsonl b/reports/coreReporter.spec/should_include_case_begin_event.jsonl
index aaa5cf1..b1da42b 100644
--- a/reports/coreReporter.spec/should_include_case_begin_event.jsonl
+++ b/reports/coreReporter.spec/should_include_case_begin_event.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should include case.begin event","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should include case.begin event","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should include case.begin event","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should include case.begin event","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should include case.begin event","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should include case.begin event","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl b/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
index c221bd9..4e795ee 100644
--- a/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
+++ b/reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should include case.end event with payload","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should include case.end event with payload","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should include case.end event with payload","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should include case.end event with payload","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should include case.end event with payload","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should include case.end event with payload","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl b/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
index 90d7798..10234c5 100644
--- a/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
+++ b/reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940050,"lvl":"info","case":"should include test.error events for failed tests","phase":"setup","evt":"case.begin"}
-{"ts":1760291940051,"lvl":"info","case":"should include test.error events for failed tests","phase":"execution","evt":"test.run"}
-{"ts":1760291940052,"lvl":"info","case":"should include test.error events for failed tests","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should include test.error events for failed tests","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should include test.error events for failed tests","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should include test.error events for failed tests","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_include_test_run_event.jsonl b/reports/coreReporter.spec/should_include_test_run_event.jsonl
index 657543d..2a3e7ef 100644
--- a/reports/coreReporter.spec/should_include_test_run_event.jsonl
+++ b/reports/coreReporter.spec/should_include_test_run_event.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should include test.run event","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should include test.run event","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should include test.run event","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486668,"lvl":"info","case":"should include test.run event","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486669,"lvl":"info","case":"should include test.run event","phase":"execution","evt":"test.run"}
+{"ts":1760292486670,"lvl":"info","case":"should include test.run event","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl b/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
index 94ff44c..9f9a2f9 100644
--- a/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
+++ b/reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940049,"lvl":"info","case":"should organize case files in suite directories","phase":"setup","evt":"case.begin"}
-{"ts":1760291940050,"lvl":"info","case":"should organize case files in suite directories","phase":"execution","evt":"test.run"}
-{"ts":1760291940051,"lvl":"info","case":"should organize case files in suite directories","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should organize case files in suite directories","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should organize case files in suite directories","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should organize case files in suite directories","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl b/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
index cf2f414..cfb2fa5 100644
--- a/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
+++ b/reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940048,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"setup","evt":"case.begin"}
-{"ts":1760291940049,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"execution","evt":"test.run"}
-{"ts":1760291940050,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486667,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486668,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"execution","evt":"test.run"}
+{"ts":1760292486669,"lvl":"info","case":"should reference summary.jsonl in artifacts","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl b/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
index 80662e5..9009a41 100644
--- a/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
+++ b/reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"checks module against config.modules when enabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"checks module against config.modules when enabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"checks module against config.modules when enabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"checks module against config.modules when enabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"checks module against config.modules when enabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"checks module against config.modules when enabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl b/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
index 45db04c..bd8a5b3 100644
--- a/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
+++ b/reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"does not emit when on() returns false","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"does not emit when on() returns false","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"does not emit when on() returns false","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"does not emit when on() returns false","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"does not emit when on() returns false","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"does not emit when on() returns false","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl b/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
index 58f574c..80705f7 100644
--- a/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
+++ b/reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"emit returns immediately when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/emits_formatted_output_to_console.jsonl b/reports/debug-api.spec/emits_formatted_output_to_console.jsonl
index f239d33..a8d800d 100644
--- a/reports/debug-api.spec/emits_formatted_output_to_console.jsonl
+++ b/reports/debug-api.spec/emits_formatted_output_to_console.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940120,"lvl":"info","case":"emits formatted output to console","phase":"setup","evt":"case.begin"}
-{"ts":1760291940121,"lvl":"info","case":"emits formatted output to console","phase":"execution","evt":"test.run"}
-{"ts":1760291940122,"lvl":"info","case":"emits formatted output to console","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486573,"lvl":"info","case":"emits formatted output to console","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486574,"lvl":"info","case":"emits formatted output to console","phase":"execution","evt":"test.run"}
+{"ts":1760292486575,"lvl":"info","case":"emits formatted output to console","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl b/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
index 40bbd04..48daa88 100644
--- a/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
+++ b/reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"emits to console when module is enabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"emits to console when module is enabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"emits to console when module is enabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"emits to console when module is enabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"emits to console when module is enabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"emits to console when module is enabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/handles_emit_without_payload.jsonl b/reports/debug-api.spec/handles_emit_without_payload.jsonl
index 4c47adf..5386699 100644
--- a/reports/debug-api.spec/handles_emit_without_payload.jsonl
+++ b/reports/debug-api.spec/handles_emit_without_payload.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940120,"lvl":"info","case":"handles emit without payload","phase":"setup","evt":"case.begin"}
-{"ts":1760291940121,"lvl":"info","case":"handles emit without payload","phase":"execution","evt":"test.run"}
-{"ts":1760291940122,"lvl":"info","case":"handles emit without payload","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486573,"lvl":"info","case":"handles emit without payload","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486574,"lvl":"info","case":"handles emit without payload","phase":"execution","evt":"test.run"}
+{"ts":1760292486575,"lvl":"info","case":"handles emit without payload","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/debug-api.spec/respects_debug_level_filtering.jsonl b/reports/debug-api.spec/respects_debug_level_filtering.jsonl
index 64d4038..1a3abef 100644
--- a/reports/debug-api.spec/respects_debug_level_filtering.jsonl
+++ b/reports/debug-api.spec/respects_debug_level_filtering.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940120,"lvl":"info","case":"respects debug level filtering","phase":"setup","evt":"case.begin"}
-{"ts":1760291940121,"lvl":"info","case":"respects debug level filtering","phase":"execution","evt":"test.run"}
-{"ts":1760291940122,"lvl":"info","case":"respects debug level filtering","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486573,"lvl":"info","case":"respects debug level filtering","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486574,"lvl":"info","case":"respects debug level filtering","phase":"execution","evt":"test.run"}
+{"ts":1760292486575,"lvl":"info","case":"respects debug level filtering","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl b/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
index 0d85b28..6e6e6d9 100644
--- a/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
+++ b/reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"returns consistent value for same module","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"returns consistent value for same module","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"returns consistent value for same module","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"returns consistent value for same module","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"returns consistent value for same module","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"returns consistent value for same module","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl b/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
index 8659d0b..0d01e80 100644
--- a/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
+++ b/reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"returns false when config is disabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"returns false when config is disabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"returns false when config is disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"returns false when config is disabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"returns false when config is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"returns false when config is disabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl b/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
index 395d71f..0326ab0 100644
--- a/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
+++ b/reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940118,"lvl":"info","case":"returns false when module is not enabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940119,"lvl":"info","case":"returns false when module is not enabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940120,"lvl":"info","case":"returns false when module is not enabled","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486571,"lvl":"info","case":"returns false when module is not enabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486572,"lvl":"info","case":"returns false when module is not enabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486573,"lvl":"info","case":"returns false when module is not enabled","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl b/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
index 35e046d..893c87f 100644
--- a/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
+++ b/reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940120,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"setup","evt":"case.begin"}
-{"ts":1760291940121,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"execution","evt":"test.run"}
-{"ts":1760291940122,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486573,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486574,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"execution","evt":"test.run"}
+{"ts":1760292486575,"lvl":"info","case":"shouldEmit respects level hierarchy","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl b/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
index 7be6b17..d652d9a 100644
--- a/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
+++ b/reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940119,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940120,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940121,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486572,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486573,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486574,"lvl":"info","case":"shouldEmit returns false when module is disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/applies_redact_action_to_fields.jsonl b/reports/digest.spec/applies_redact_action_to_fields.jsonl
index 6bc3402..6338f9f 100644
--- a/reports/digest.spec/applies_redact_action_to_fields.jsonl
+++ b/reports/digest.spec/applies_redact_action_to_fields.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"applies redact action to fields","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"applies redact action to fields","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"applies redact action to fields","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486688,"lvl":"info","case":"applies redact action to fields","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486689,"lvl":"info","case":"applies redact action to fields","phase":"execution","evt":"test.run"}
+{"ts":1760292486690,"lvl":"info","case":"applies redact action to fields","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/applies_slice_action_with_window.jsonl b/reports/digest.spec/applies_slice_action_with_window.jsonl
index b068add..2c8c366 100644
--- a/reports/digest.spec/applies_slice_action_with_window.jsonl
+++ b/reports/digest.spec/applies_slice_action_with_window.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"applies slice action with window","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"applies slice action with window","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"applies slice action with window","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486688,"lvl":"info","case":"applies slice action with window","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486689,"lvl":"info","case":"applies slice action with window","phase":"execution","evt":"test.run"}
+{"ts":1760292486690,"lvl":"info","case":"applies slice action with window","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/enforces_byte_budget.jsonl b/reports/digest.spec/enforces_byte_budget.jsonl
index d27e354..b4cc4c5 100644
--- a/reports/digest.spec/enforces_byte_budget.jsonl
+++ b/reports/digest.spec/enforces_byte_budget.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"enforces byte budget","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"enforces byte budget","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"enforces byte budget","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
+{"ts":1760292486690,"lvl":"info","case":"enforces byte budget","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486691,"lvl":"info","case":"enforces byte budget","phase":"execution","evt":"test.run"}
+{"ts":1760292486692,"lvl":"info","case":"enforces byte budget","phase":"teardown","evt":"case.end","payload":{"duration":28,"status":"passed"}}
diff --git a/reports/digest.spec/enforces_line_budget.jsonl b/reports/digest.spec/enforces_line_budget.jsonl
index 5c5e55a..d0c6148 100644
--- a/reports/digest.spec/enforces_line_budget.jsonl
+++ b/reports/digest.spec/enforces_line_budget.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"enforces line budget","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"enforces line budget","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"enforces line budget","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486690,"lvl":"info","case":"enforces line budget","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486691,"lvl":"info","case":"enforces line budget","phase":"execution","evt":"test.run"}
+{"ts":1760292486692,"lvl":"info","case":"enforces line budget","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl b/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
index 98edfdc..9ebb0e0 100644
--- a/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
+++ b/reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940100,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"setup","evt":"case.begin"}
-{"ts":1760291940101,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"execution","evt":"test.run"}
-{"ts":1760291940102,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"generates digest from synthetic logs with failures","phase":"teardown","evt":"case.end","payload":{"duration":9,"status":"passed"}}
diff --git a/reports/digest.spec/handles_empty_log_file.jsonl b/reports/digest.spec/handles_empty_log_file.jsonl
index 2b9ca2d..3d17e35 100644
--- a/reports/digest.spec/handles_empty_log_file.jsonl
+++ b/reports/digest.spec/handles_empty_log_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"handles empty log file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"handles empty log file","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"handles empty log file","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"handles empty log file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"handles empty log file","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"handles empty log file","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/handles_events_without_optional_fields.jsonl b/reports/digest.spec/handles_events_without_optional_fields.jsonl
index 3600b19..92fc42f 100644
--- a/reports/digest.spec/handles_events_without_optional_fields.jsonl
+++ b/reports/digest.spec/handles_events_without_optional_fields.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"handles events without optional fields","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"handles events without optional fields","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"handles events without optional fields","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486693,"lvl":"info","case":"handles events without optional fields","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486694,"lvl":"info","case":"handles events without optional fields","phase":"execution","evt":"test.run"}
+{"ts":1760292486695,"lvl":"info","case":"handles events without optional fields","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/handles_missing_log_file.jsonl b/reports/digest.spec/handles_missing_log_file.jsonl
index 91061ca..76df31c 100644
--- a/reports/digest.spec/handles_missing_log_file.jsonl
+++ b/reports/digest.spec/handles_missing_log_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"handles missing log file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"handles missing log file","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"handles missing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"handles missing log file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"handles missing log file","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"handles missing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl b/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
index 1cc6e44..b160f3e 100644
--- a/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
+++ b/reports/digest.spec/identifies_error-level_events_as_suspects.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"identifies error-level events as suspects","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"identifies error-level events as suspects","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"identifies error-level events as suspects","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486691,"lvl":"info","case":"identifies error-level events as suspects","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486692,"lvl":"info","case":"identifies error-level events as suspects","phase":"execution","evt":"test.run"}
+{"ts":1760292486693,"lvl":"info","case":"identifies error-level events as suspects","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/includes_correct_summary_statistics.jsonl b/reports/digest.spec/includes_correct_summary_statistics.jsonl
index 416be0b..8b6cf45 100644
--- a/reports/digest.spec/includes_correct_summary_statistics.jsonl
+++ b/reports/digest.spec/includes_correct_summary_statistics.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"includes correct summary statistics","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"includes correct summary statistics","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"includes correct summary statistics","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"includes correct summary statistics","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"includes correct summary statistics","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"includes correct summary statistics","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/includes_events_matching_error_level.jsonl b/reports/digest.spec/includes_events_matching_error_level.jsonl
index 7fe0331..acfcfbd 100644
--- a/reports/digest.spec/includes_events_matching_error_level.jsonl
+++ b/reports/digest.spec/includes_events_matching_error_level.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"includes events matching error level","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"includes events matching error level","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"includes events matching error level","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486671,"lvl":"info","case":"includes events matching error level","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486672,"lvl":"info","case":"includes events matching error level","phase":"execution","evt":"test.run"}
+{"ts":1760292486673,"lvl":"info","case":"includes events matching error level","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/digest.spec/includes_events_matching_specific_event_name.jsonl b/reports/digest.spec/includes_events_matching_specific_event_name.jsonl
index 2245f89..deec809 100644
--- a/reports/digest.spec/includes_events_matching_specific_event_name.jsonl
+++ b/reports/digest.spec/includes_events_matching_specific_event_name.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"includes events matching specific event name","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"includes events matching specific event name","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"includes events matching specific event name","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486687,"lvl":"info","case":"includes events matching specific event name","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486688,"lvl":"info","case":"includes events matching specific event name","phase":"execution","evt":"test.run"}
+{"ts":1760292486689,"lvl":"info","case":"includes events matching specific event name","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/keeps_all_events_when_within_budget.jsonl b/reports/digest.spec/keeps_all_events_when_within_budget.jsonl
index e05db21..aa30331 100644
--- a/reports/digest.spec/keeps_all_events_when_within_budget.jsonl
+++ b/reports/digest.spec/keeps_all_events_when_within_budget.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"keeps all events when within budget","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"keeps all events when within budget","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"keeps all events when within budget","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486691,"lvl":"info","case":"keeps all events when within budget","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486692,"lvl":"info","case":"keeps all events when within budget","phase":"execution","evt":"test.run"}
+{"ts":1760292486693,"lvl":"info","case":"keeps all events when within budget","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/limits_suspects_to_top_5.jsonl b/reports/digest.spec/limits_suspects_to_top_5.jsonl
index 049bd07..29f990c 100644
--- a/reports/digest.spec/limits_suspects_to_top_5.jsonl
+++ b/reports/digest.spec/limits_suspects_to_top_5.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"limits suspects to top 5","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"limits suspects to top 5","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"limits suspects to top 5","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"limits suspects to top 5","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"limits suspects to top 5","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"limits suspects to top 5","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl b/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
index dd90b8a..265e4eb 100644
--- a/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
+++ b/reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486693,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486694,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"execution","evt":"test.run"}
+{"ts":1760292486695,"lvl":"info","case":"processes ingested Go test failures transparently","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl b/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
index 15ff43e..c9d3e9b 100644
--- a/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
+++ b/reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486693,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486694,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"execution","evt":"test.run"}
+{"ts":1760292486695,"lvl":"info","case":"recognizes Go test.fail events in rules","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/respects_priority_order.jsonl b/reports/digest.spec/respects_priority_order.jsonl
index ae6e510..c609aa4 100644
--- a/reports/digest.spec/respects_priority_order.jsonl
+++ b/reports/digest.spec/respects_priority_order.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"respects priority order","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"respects priority order","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"respects priority order","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486689,"lvl":"info","case":"respects priority order","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486690,"lvl":"info","case":"respects priority order","phase":"execution","evt":"test.run"}
+{"ts":1760292486691,"lvl":"info","case":"respects priority order","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl b/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
index 081bbe3..ad9ebe5 100644
--- a/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
+++ b/reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"returns empty suspects for no failure events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"returns empty suspects for no failure events","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"returns empty suspects for no failure events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"returns empty suspects for no failure events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"returns empty suspects for no failure events","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"returns empty suspects for no failure events","phase":"teardown","evt":"case.end","payload":{"duration":17,"status":"passed"}}
diff --git a/reports/digest.spec/returns_null_for_passing_tests.jsonl b/reports/digest.spec/returns_null_for_passing_tests.jsonl
index 02e0c4b..7cc4ae8 100644
--- a/reports/digest.spec/returns_null_for_passing_tests.jsonl
+++ b/reports/digest.spec/returns_null_for_passing_tests.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940100,"lvl":"info","case":"returns null for passing tests","phase":"setup","evt":"case.begin"}
-{"ts":1760291940101,"lvl":"info","case":"returns null for passing tests","phase":"execution","evt":"test.run"}
-{"ts":1760291940102,"lvl":"info","case":"returns null for passing tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"returns null for passing tests","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"returns null for passing tests","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"returns null for passing tests","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/returns_null_when_disabled.jsonl b/reports/digest.spec/returns_null_when_disabled.jsonl
index c2fd610..99783bb 100644
--- a/reports/digest.spec/returns_null_when_disabled.jsonl
+++ b/reports/digest.spec/returns_null_when_disabled.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"returns null when disabled","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"returns null when disabled","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"returns null when disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"returns null when disabled","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"returns null when disabled","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"returns null when disabled","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/scores_correlated_events.jsonl b/reports/digest.spec/scores_correlated_events.jsonl
index e821951..27d8432 100644
--- a/reports/digest.spec/scores_correlated_events.jsonl
+++ b/reports/digest.spec/scores_correlated_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"scores correlated events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"scores correlated events","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"scores correlated events","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486691,"lvl":"info","case":"scores correlated events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486692,"lvl":"info","case":"scores correlated events","phase":"execution","evt":"test.run"}
+{"ts":1760292486693,"lvl":"info","case":"scores correlated events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/scores_events_close_to_failure_time.jsonl b/reports/digest.spec/scores_events_close_to_failure_time.jsonl
index 8cb9dc0..daea519 100644
--- a/reports/digest.spec/scores_events_close_to_failure_time.jsonl
+++ b/reports/digest.spec/scores_events_close_to_failure_time.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"scores events close to failure time","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"scores events close to failure time","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"scores events close to failure time","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"scores events close to failure time","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"scores events close to failure time","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"scores events close to failure time","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/scores_failure_events.jsonl b/reports/digest.spec/scores_failure_events.jsonl
index 336ce0f..c2c8d3a 100644
--- a/reports/digest.spec/scores_failure_events.jsonl
+++ b/reports/digest.spec/scores_failure_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940103,"lvl":"info","case":"scores failure events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940104,"lvl":"info","case":"scores failure events","phase":"execution","evt":"test.run"}
-{"ts":1760291940105,"lvl":"info","case":"scores failure events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486691,"lvl":"info","case":"scores failure events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486692,"lvl":"info","case":"scores failure events","phase":"execution","evt":"test.run"}
+{"ts":1760292486693,"lvl":"info","case":"scores failure events","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/digest.spec/skips_malformed_JSON_lines.jsonl b/reports/digest.spec/skips_malformed_JSON_lines.jsonl
index 5fd0ab3..d20ab46 100644
--- a/reports/digest.spec/skips_malformed_JSON_lines.jsonl
+++ b/reports/digest.spec/skips_malformed_JSON_lines.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"skips malformed JSON lines","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"skips malformed JSON lines","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"skips malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486692,"lvl":"info","case":"skips malformed JSON lines","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486693,"lvl":"info","case":"skips malformed JSON lines","phase":"execution","evt":"test.run"}
+{"ts":1760292486694,"lvl":"info","case":"skips malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/supports_multiple_match_criteria.jsonl b/reports/digest.spec/supports_multiple_match_criteria.jsonl
index d286e01..904c315 100644
--- a/reports/digest.spec/supports_multiple_match_criteria.jsonl
+++ b/reports/digest.spec/supports_multiple_match_criteria.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"supports multiple match criteria","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"supports multiple match criteria","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"supports multiple match criteria","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486690,"lvl":"info","case":"supports multiple match criteria","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486691,"lvl":"info","case":"supports multiple match criteria","phase":"execution","evt":"test.run"}
+{"ts":1760292486692,"lvl":"info","case":"supports multiple match criteria","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
index da45afa..be8d17e 100644
--- a/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
+++ b/reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940102,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"setup","evt":"case.begin"}
-{"ts":1760291940103,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"execution","evt":"test.run"}
-{"ts":1760291940104,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486689,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486690,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"execution","evt":"test.run"}
+{"ts":1760292486691,"lvl":"info","case":"supports wildcard patterns in event matching","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/digest.spec/writes_valid_JSON_file.jsonl b/reports/digest.spec/writes_valid_JSON_file.jsonl
index 8e503d6..d812db3 100644
--- a/reports/digest.spec/writes_valid_JSON_file.jsonl
+++ b/reports/digest.spec/writes_valid_JSON_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"writes valid JSON file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"writes valid JSON file","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"writes valid JSON file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486670,"lvl":"info","case":"writes valid JSON file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486671,"lvl":"info","case":"writes valid JSON file","phase":"execution","evt":"test.run"}
+{"ts":1760292486672,"lvl":"info","case":"writes valid JSON file","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/digest.spec/writes_valid_markdown_file.jsonl b/reports/digest.spec/writes_valid_markdown_file.jsonl
index 8400071..189cee9 100644
--- a/reports/digest.spec/writes_valid_markdown_file.jsonl
+++ b/reports/digest.spec/writes_valid_markdown_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940101,"lvl":"info","case":"writes valid markdown file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940102,"lvl":"info","case":"writes valid markdown file","phase":"execution","evt":"test.run"}
-{"ts":1760291940103,"lvl":"info","case":"writes valid markdown file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486671,"lvl":"info","case":"writes valid markdown file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486672,"lvl":"info","case":"writes valid markdown file","phase":"execution","evt":"test.run"}
+{"ts":1760292486673,"lvl":"info","case":"writes valid markdown file","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl b/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
index 492f591..e7a3f2c 100644
--- a/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
+++ b/reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942219,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"setup","evt":"case.begin"}
-{"ts":1760291942220,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"execution","evt":"test.run"}
-{"ts":1760291942221,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
+{"ts":1760292488616,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488617,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"execution","evt":"test.run"}
+{"ts":1760292488618,"lvl":"info","case":"should instantiate modules and register with hostess","phase":"teardown","evt":"case.end","payload":{"duration":35,"status":"passed"}}
diff --git a/reports/executor.spec/should_load_configuration.jsonl b/reports/executor.spec/should_load_configuration.jsonl
index 0cfd945..44d99e5 100644
--- a/reports/executor.spec/should_load_configuration.jsonl
+++ b/reports/executor.spec/should_load_configuration.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942218,"lvl":"info","case":"should load configuration","phase":"setup","evt":"case.begin"}
-{"ts":1760291942219,"lvl":"info","case":"should load configuration","phase":"execution","evt":"test.run"}
-{"ts":1760291942220,"lvl":"info","case":"should load configuration","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
+{"ts":1760292488615,"lvl":"info","case":"should load configuration","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488616,"lvl":"info","case":"should load configuration","phase":"execution","evt":"test.run"}
+{"ts":1760292488617,"lvl":"info","case":"should load configuration","phase":"teardown","evt":"case.end","payload":{"duration":33,"status":"passed"}}
diff --git a/reports/executor.spec/should_support_restartNode.jsonl b/reports/executor.spec/should_support_restartNode.jsonl
index 74d60bc..f4a441f 100644
--- a/reports/executor.spec/should_support_restartNode.jsonl
+++ b/reports/executor.spec/should_support_restartNode.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942220,"lvl":"info","case":"should support restartNode","phase":"setup","evt":"case.begin"}
-{"ts":1760291942221,"lvl":"info","case":"should support restartNode","phase":"execution","evt":"test.run"}
-{"ts":1760291942222,"lvl":"info","case":"should support restartNode","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292488616,"lvl":"info","case":"should support restartNode","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488617,"lvl":"info","case":"should support restartNode","phase":"execution","evt":"test.run"}
+{"ts":1760292488618,"lvl":"info","case":"should support restartNode","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl b/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
index 3b17331..bc51473 100644
--- a/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
+++ b/reports/executor.spec/should_throw_if_up___called_without_load__.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942219,"lvl":"info","case":"should throw if up() called without load()","phase":"setup","evt":"case.begin"}
-{"ts":1760291942220,"lvl":"info","case":"should throw if up() called without load()","phase":"execution","evt":"test.run"}
-{"ts":1760291942221,"lvl":"info","case":"should throw if up() called without load()","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292488615,"lvl":"info","case":"should throw if up() called without load()","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488616,"lvl":"info","case":"should throw if up() called without load()","phase":"execution","evt":"test.run"}
+{"ts":1760292488617,"lvl":"info","case":"should throw if up() called without load()","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl b/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
index a2a4657..2b3f7a7 100644
--- a/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
+++ b/reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942220,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"setup","evt":"case.begin"}
-{"ts":1760291942221,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"execution","evt":"test.run"}
-{"ts":1760291942222,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292488616,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488617,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"execution","evt":"test.run"}
+{"ts":1760292488618,"lvl":"info","case":"should throw on restartNode for non-existent node","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/executor.spec/should_wire_connections_via_StateManager.jsonl b/reports/executor.spec/should_wire_connections_via_StateManager.jsonl
index 0ef0449..285d39e 100644
--- a/reports/executor.spec/should_wire_connections_via_StateManager.jsonl
+++ b/reports/executor.spec/should_wire_connections_via_StateManager.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942219,"lvl":"info","case":"should wire connections via StateManager","phase":"setup","evt":"case.begin"}
-{"ts":1760291942220,"lvl":"info","case":"should wire connections via StateManager","phase":"execution","evt":"test.run"}
-{"ts":1760291942221,"lvl":"info","case":"should wire connections via StateManager","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292488616,"lvl":"info","case":"should wire connections via StateManager","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488617,"lvl":"info","case":"should wire connections via StateManager","phase":"execution","evt":"test.run"}
+{"ts":1760292488618,"lvl":"info","case":"should wire connections via StateManager","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl b/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
index 8872b03..8ee87f0 100644
--- a/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
+++ b/reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942223,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"setup","evt":"case.begin"}
-{"ts":1760291942224,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"execution","evt":"test.run"}
-{"ts":1760291942225,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"teardown","evt":"case.end","payload":{"duration":33,"status":"passed"}}
+{"ts":1760292488620,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488621,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"execution","evt":"test.run"}
+{"ts":1760292488622,"lvl":"info","case":"should gracefully shutdown with SIGTERM","phase":"teardown","evt":"case.end","payload":{"duration":76,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl b/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
index f233505..b4ac322 100644
--- a/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
+++ b/reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942222,"lvl":"info","case":"should handle environment variables","phase":"setup","evt":"case.begin"}
-{"ts":1760291942223,"lvl":"info","case":"should handle environment variables","phase":"execution","evt":"test.run"}
-{"ts":1760291942224,"lvl":"info","case":"should handle environment variables","phase":"teardown","evt":"case.end","payload":{"duration":235,"status":"passed"}}
+{"ts":1760292488619,"lvl":"info","case":"should handle environment variables","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488620,"lvl":"info","case":"should handle environment variables","phase":"execution","evt":"test.run"}
+{"ts":1760292488621,"lvl":"info","case":"should handle environment variables","phase":"teardown","evt":"case.end","payload":{"duration":244,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl b/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
index 4e04154..a479c2b 100644
--- a/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
+++ b/reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942223,"lvl":"info","case":"should not restart with \"never\" policy","phase":"setup","evt":"case.begin"}
-{"ts":1760291942224,"lvl":"info","case":"should not restart with \"never\" policy","phase":"execution","evt":"test.run"}
-{"ts":1760291942225,"lvl":"info","case":"should not restart with \"never\" policy","phase":"teardown","evt":"case.end","payload":{"duration":331,"status":"passed"}}
+{"ts":1760292488620,"lvl":"info","case":"should not restart with \"never\" policy","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488621,"lvl":"info","case":"should not restart with \"never\" policy","phase":"execution","evt":"test.run"}
+{"ts":1760292488622,"lvl":"info","case":"should not restart with \"never\" policy","phase":"teardown","evt":"case.end","payload":{"duration":337,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_provide_process_info.jsonl b/reports/externalServerWrapper.spec/should_provide_process_info.jsonl
index bc1889e..95c5b05 100644
--- a/reports/externalServerWrapper.spec/should_provide_process_info.jsonl
+++ b/reports/externalServerWrapper.spec/should_provide_process_info.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942224,"lvl":"info","case":"should provide process info","phase":"setup","evt":"case.begin"}
-{"ts":1760291942225,"lvl":"info","case":"should provide process info","phase":"execution","evt":"test.run"}
-{"ts":1760291942226,"lvl":"info","case":"should provide process info","phase":"teardown","evt":"case.end","payload":{"duration":28,"status":"passed"}}
+{"ts":1760292488621,"lvl":"info","case":"should provide process info","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488622,"lvl":"info","case":"should provide process info","phase":"execution","evt":"test.run"}
+{"ts":1760292488623,"lvl":"info","case":"should provide process info","phase":"teardown","evt":"case.end","payload":{"duration":34,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl b/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
index 65a2eba..30dda3b 100644
--- a/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
+++ b/reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942222,"lvl":"info","case":"should register with Hostess on spawn","phase":"setup","evt":"case.begin"}
-{"ts":1760291942223,"lvl":"info","case":"should register with Hostess on spawn","phase":"execution","evt":"test.run"}
-{"ts":1760291942224,"lvl":"info","case":"should register with Hostess on spawn","phase":"teardown","evt":"case.end","payload":{"duration":56,"status":"passed"}}
+{"ts":1760292488619,"lvl":"info","case":"should register with Hostess on spawn","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488620,"lvl":"info","case":"should register with Hostess on spawn","phase":"execution","evt":"test.run"}
+{"ts":1760292488621,"lvl":"info","case":"should register with Hostess on spawn","phase":"teardown","evt":"case.end","payload":{"duration":76,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl b/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
index d49f5de..7be2ecf 100644
--- a/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
+++ b/reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942223,"lvl":"info","case":"should respect maxRestarts limit","phase":"setup","evt":"case.begin"}
-{"ts":1760291942224,"lvl":"info","case":"should respect maxRestarts limit","phase":"execution","evt":"test.run"}
-{"ts":1760291942225,"lvl":"info","case":"should respect maxRestarts limit","phase":"teardown","evt":"case.end","payload":{"duration":536,"status":"passed"}}
+{"ts":1760292488621,"lvl":"info","case":"should respect maxRestarts limit","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488622,"lvl":"info","case":"should respect maxRestarts limit","phase":"execution","evt":"test.run"}
+{"ts":1760292488623,"lvl":"info","case":"should respect maxRestarts limit","phase":"teardown","evt":"case.end","payload":{"duration":537,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl b/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
index 2c50505..8159ba2 100644
--- a/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
+++ b/reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942223,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"setup","evt":"case.begin"}
-{"ts":1760291942224,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"execution","evt":"test.run"}
-{"ts":1760291942225,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"teardown","evt":"case.end","payload":{"duration":546,"status":"passed"}}
+{"ts":1760292488620,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488621,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"execution","evt":"test.run"}
+{"ts":1760292488622,"lvl":"info","case":"should restart on failure with \"on-failure\" policy","phase":"teardown","evt":"case.end","payload":{"duration":539,"status":"passed"}}
diff --git a/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl b/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
index 077a9d5..9407e31 100644
--- a/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
+++ b/reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940377,"lvl":"info","case":"should spawn a simple process","phase":"setup","evt":"case.begin"}
-{"ts":1760291940378,"lvl":"info","case":"should spawn a simple process","phase":"execution","evt":"test.run"}
-{"ts":1760291940379,"lvl":"info","case":"should spawn a simple process","phase":"teardown","evt":"case.end","payload":{"duration":94,"status":"passed"}}
+{"ts":1760292486694,"lvl":"info","case":"should spawn a simple process","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486695,"lvl":"info","case":"should spawn a simple process","phase":"execution","evt":"test.run"}
+{"ts":1760292486696,"lvl":"info","case":"should spawn a simple process","phase":"teardown","evt":"case.end","payload":{"duration":39,"status":"passed"}}
diff --git a/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl b/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
index bb9c524..807f3af 100644
--- a/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
+++ b/reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"converts Go events to Laminar format","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"converts Go events to Laminar format","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"converts Go events to Laminar format","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486557,"lvl":"info","case":"converts Go events to Laminar format","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486558,"lvl":"info","case":"converts Go events to Laminar format","phase":"execution","evt":"test.run"}
+{"ts":1760292486559,"lvl":"info","case":"converts Go events to Laminar format","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl b/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
index 1be8266..3c9dfd8 100644
--- a/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
+++ b/reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"creates test.fail events with error level","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"creates test.fail events with error level","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"creates test.fail events with error level","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"creates test.fail events with error level","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"creates test.fail events with error level","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"creates test.fail events with error level","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl b/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
index f1522f9..3240edc 100644
--- a/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
+++ b/reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"creates test.output events for output actions","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"creates test.output events for output actions","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"creates test.output events for output actions","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486557,"lvl":"info","case":"creates test.output events for output actions","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486558,"lvl":"info","case":"creates test.output events for output actions","phase":"execution","evt":"test.run"}
+{"ts":1760292486559,"lvl":"info","case":"creates test.output events for output actions","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl b/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
index 55058cb..fc188a1 100644
--- a/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
+++ b/reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"creates test.pass events with correct status","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"creates test.pass events with correct status","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"creates test.pass events with correct status","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"creates test.pass events with correct status","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"creates test.pass events with correct status","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"creates test.pass events with correct status","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl b/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
index 58bebc9..ba43c61 100644
--- a/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
+++ b/reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"creates test.skip events for skipped tests","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl b/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
index e6a4d58..90a4a17 100644
--- a/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
+++ b/reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"creates test.start events for run actions","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"creates test.start events for run actions","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"creates test.start events for run actions","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486557,"lvl":"info","case":"creates test.start events for run actions","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486558,"lvl":"info","case":"creates test.start events for run actions","phase":"execution","evt":"test.run"}
+{"ts":1760292486559,"lvl":"info","case":"creates test.start events for run actions","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl b/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
index a2258a8..7c99e32 100644
--- a/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
+++ b/reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"generates summary with correct test results","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"generates summary with correct test results","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"generates summary with correct test results","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"generates summary with correct test results","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"generates summary with correct test results","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"generates summary with correct test results","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl b/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
index 30a91b4..9b0e659 100644
--- a/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
+++ b/reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940091,"lvl":"info","case":"groups events by test case correctly","phase":"setup","evt":"case.begin"}
-{"ts":1760291940092,"lvl":"info","case":"groups events by test case correctly","phase":"execution","evt":"test.run"}
-{"ts":1760291940093,"lvl":"info","case":"groups events by test case correctly","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"groups events by test case correctly","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"groups events by test case correctly","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"groups events by test case correctly","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/handles_empty_input.jsonl b/reports/goIngest.spec/handles_empty_input.jsonl
index 1332450..5cf53ec 100644
--- a/reports/goIngest.spec/handles_empty_input.jsonl
+++ b/reports/goIngest.spec/handles_empty_input.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"handles empty input","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"handles empty input","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"handles empty input","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486557,"lvl":"info","case":"handles empty input","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486558,"lvl":"info","case":"handles empty input","phase":"execution","evt":"test.run"}
+{"ts":1760292486559,"lvl":"info","case":"handles empty input","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl b/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
index 55afbce..6f342bf 100644
--- a/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
+++ b/reports/goIngest.spec/handles_malformed_JSON_lines.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940089,"lvl":"info","case":"handles malformed JSON lines","phase":"setup","evt":"case.begin"}
-{"ts":1760291940090,"lvl":"info","case":"handles malformed JSON lines","phase":"execution","evt":"test.run"}
-{"ts":1760291940091,"lvl":"info","case":"handles malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486557,"lvl":"info","case":"handles malformed JSON lines","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486558,"lvl":"info","case":"handles malformed JSON lines","phase":"execution","evt":"test.run"}
+{"ts":1760292486559,"lvl":"info","case":"handles malformed JSON lines","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl b/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
index de0bc1c..d2c1269 100644
--- a/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
+++ b/reports/goIngest.spec/includes_artifactURI_in_summary.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"includes artifactURI in summary","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"includes artifactURI in summary","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"includes artifactURI in summary","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"includes artifactURI in summary","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"includes artifactURI in summary","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"includes artifactURI in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_duration_in_summary.jsonl b/reports/goIngest.spec/includes_duration_in_summary.jsonl
index df20c28..bcff660 100644
--- a/reports/goIngest.spec/includes_duration_in_summary.jsonl
+++ b/reports/goIngest.spec/includes_duration_in_summary.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"includes duration in summary","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"includes duration in summary","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"includes duration in summary","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"includes duration in summary","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"includes duration in summary","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"includes duration in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/includes_location_in_summary.jsonl b/reports/goIngest.spec/includes_location_in_summary.jsonl
index fbba4a7..485c925 100644
--- a/reports/goIngest.spec/includes_location_in_summary.jsonl
+++ b/reports/goIngest.spec/includes_location_in_summary.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"includes location in summary","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"includes location in summary","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"includes location in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486558,"lvl":"info","case":"includes location in summary","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486559,"lvl":"info","case":"includes location in summary","phase":"execution","evt":"test.run"}
+{"ts":1760292486560,"lvl":"info","case":"includes location in summary","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl b/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
index 4d2fa30..62f0f85 100644
--- a/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
+++ b/reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940088,"lvl":"info","case":"parses go test -json fixture data","phase":"setup","evt":"case.begin"}
-{"ts":1760291940089,"lvl":"info","case":"parses go test -json fixture data","phase":"execution","evt":"test.run"}
-{"ts":1760291940090,"lvl":"info","case":"parses go test -json fixture data","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486556,"lvl":"info","case":"parses go test -json fixture data","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486557,"lvl":"info","case":"parses go test -json fixture data","phase":"execution","evt":"test.run"}
+{"ts":1760292486558,"lvl":"info","case":"parses go test -json fixture data","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl b/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
index 488048c..0397f93 100644
--- a/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
+++ b/reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940088,"lvl":"info","case":"parses individual event fields correctly","phase":"setup","evt":"case.begin"}
-{"ts":1760291940089,"lvl":"info","case":"parses individual event fields correctly","phase":"execution","evt":"test.run"}
-{"ts":1760291940090,"lvl":"info","case":"parses individual event fields correctly","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
+{"ts":1760292486556,"lvl":"info","case":"parses individual event fields correctly","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486557,"lvl":"info","case":"parses individual event fields correctly","phase":"execution","evt":"test.run"}
+{"ts":1760292486558,"lvl":"info","case":"parses individual event fields correctly","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/preserves_timestamp_ordering.jsonl b/reports/goIngest.spec/preserves_timestamp_ordering.jsonl
index b1426b5..5552b4e 100644
--- a/reports/goIngest.spec/preserves_timestamp_ordering.jsonl
+++ b/reports/goIngest.spec/preserves_timestamp_ordering.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"preserves timestamp ordering","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"preserves timestamp ordering","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"preserves timestamp ordering","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"preserves timestamp ordering","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"preserves timestamp ordering","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"preserves timestamp ordering","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl b/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
index 22bff0e..6aed4a1 100644
--- a/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
+++ b/reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940091,"lvl":"info","case":"processes fixture data from parsing to output","phase":"setup","evt":"case.begin"}
-{"ts":1760291940092,"lvl":"info","case":"processes fixture data from parsing to output","phase":"execution","evt":"test.run"}
-{"ts":1760291940093,"lvl":"info","case":"processes fixture data from parsing to output","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"processes fixture data from parsing to output","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"processes fixture data from parsing to output","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"processes fixture data from parsing to output","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/goIngest.spec/validates_Laminar_event_structure.jsonl b/reports/goIngest.spec/validates_Laminar_event_structure.jsonl
index acbfb8b..aab1c85 100644
--- a/reports/goIngest.spec/validates_Laminar_event_structure.jsonl
+++ b/reports/goIngest.spec/validates_Laminar_event_structure.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"validates Laminar event structure","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"validates Laminar event structure","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"validates Laminar event structure","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"validates Laminar event structure","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"validates Laminar event structure","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"validates Laminar event structure","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl b/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
index ba9bf42..4797ee5 100644
--- a/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
+++ b/reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940090,"lvl":"info","case":"writes JSONL files per test case","phase":"setup","evt":"case.begin"}
-{"ts":1760291940091,"lvl":"info","case":"writes JSONL files per test case","phase":"execution","evt":"test.run"}
-{"ts":1760291940092,"lvl":"info","case":"writes JSONL files per test case","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"writes JSONL files per test case","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"writes JSONL files per test case","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"writes JSONL files per test case","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_summary_jsonl_file.jsonl b/reports/goIngest.spec/writes_summary_jsonl_file.jsonl
index bc21ca9..3ca58a6 100644
--- a/reports/goIngest.spec/writes_summary_jsonl_file.jsonl
+++ b/reports/goIngest.spec/writes_summary_jsonl_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940091,"lvl":"info","case":"writes summary.jsonl file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940092,"lvl":"info","case":"writes summary.jsonl file","phase":"execution","evt":"test.run"}
-{"ts":1760291940093,"lvl":"info","case":"writes summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"writes summary.jsonl file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"writes summary.jsonl file","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"writes summary.jsonl file","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/goIngest.spec/writes_valid_JSONL_format.jsonl b/reports/goIngest.spec/writes_valid_JSONL_format.jsonl
index 868444b..059fcc6 100644
--- a/reports/goIngest.spec/writes_valid_JSONL_format.jsonl
+++ b/reports/goIngest.spec/writes_valid_JSONL_format.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940091,"lvl":"info","case":"writes valid JSONL format","phase":"setup","evt":"case.begin"}
-{"ts":1760291940092,"lvl":"info","case":"writes valid JSONL format","phase":"execution","evt":"test.run"}
-{"ts":1760291940093,"lvl":"info","case":"writes valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486559,"lvl":"info","case":"writes valid JSONL format","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486560,"lvl":"info","case":"writes valid JSONL format","phase":"execution","evt":"test.run"}
+{"ts":1760292486561,"lvl":"info","case":"writes valid JSONL format","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl b/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
index 617a761..9fd9df8 100644
--- a/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
+++ b/reports/hostess.spec/evicts_after_missed_heartbeats.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940376,"lvl":"info","case":"evicts after missed heartbeats","phase":"setup","evt":"case.begin"}
-{"ts":1760291940377,"lvl":"info","case":"evicts after missed heartbeats","phase":"execution","evt":"test.run"}
-{"ts":1760291940378,"lvl":"info","case":"evicts after missed heartbeats","phase":"teardown","evt":"case.end","payload":{"duration":35,"status":"passed"}}
+{"ts":1760292486695,"lvl":"info","case":"evicts after missed heartbeats","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486696,"lvl":"info","case":"evicts after missed heartbeats","phase":"execution","evt":"test.run"}
+{"ts":1760292486697,"lvl":"info","case":"evicts after missed heartbeats","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/hostess.spec/heartbeat_maintains_liveness.jsonl b/reports/hostess.spec/heartbeat_maintains_liveness.jsonl
index b995ab8..ef6174f 100644
--- a/reports/hostess.spec/heartbeat_maintains_liveness.jsonl
+++ b/reports/hostess.spec/heartbeat_maintains_liveness.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940377,"lvl":"info","case":"heartbeat maintains liveness","phase":"setup","evt":"case.begin"}
-{"ts":1760291940378,"lvl":"info","case":"heartbeat maintains liveness","phase":"execution","evt":"test.run"}
-{"ts":1760291940379,"lvl":"info","case":"heartbeat maintains liveness","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486695,"lvl":"info","case":"heartbeat maintains liveness","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486696,"lvl":"info","case":"heartbeat maintains liveness","phase":"execution","evt":"test.run"}
+{"ts":1760292486697,"lvl":"info","case":"heartbeat maintains liveness","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl b/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
index 4953853..7341e9f 100644
--- a/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
+++ b/reports/hostess.spec/marks_in-use_and_back_to_available.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940376,"lvl":"info","case":"marks in-use and back to available","phase":"setup","evt":"case.begin"}
-{"ts":1760291940377,"lvl":"info","case":"marks in-use and back to available","phase":"execution","evt":"test.run"}
-{"ts":1760291940378,"lvl":"info","case":"marks in-use and back to available","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486695,"lvl":"info","case":"marks in-use and back to available","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486696,"lvl":"info","case":"marks in-use and back to available","phase":"execution","evt":"test.run"}
+{"ts":1760292486697,"lvl":"info","case":"marks in-use and back to available","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
diff --git a/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl b/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
index 065d1c6..e1fa01c 100644
--- a/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
+++ b/reports/hostess.spec/registers_and_queries_by_capabilities.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940376,"lvl":"info","case":"registers and queries by capabilities","phase":"setup","evt":"case.begin"}
-{"ts":1760291940377,"lvl":"info","case":"registers and queries by capabilities","phase":"execution","evt":"test.run"}
-{"ts":1760291940378,"lvl":"info","case":"registers and queries by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":29,"status":"passed"}}
+{"ts":1760292486695,"lvl":"info","case":"registers and queries by capabilities","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486696,"lvl":"info","case":"registers and queries by capabilities","phase":"execution","evt":"test.run"}
+{"ts":1760292486697,"lvl":"info","case":"registers and queries by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":28,"status":"passed"}}
diff --git a/reports/index.json b/reports/index.json
index f55f3e0..cfe15c8 100644
--- a/reports/index.json
+++ b/reports/index.json
@@ -1,1410 +1,1421 @@
 {
-  "generated": "2025-10-12T17:59:02.224Z",
-  "totalTests": 149,
+  "generated": "2025-10-12T18:08:08.621Z",
+  "totalTests": 150,
   "artifacts": [
     {
-      "testName": "should generate index.json with valid structure",
+      "testName": "should create and compare snapshots with masking",
       "status": "pass",
       "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.047Z",
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.540Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl"
+        "caseFile": "reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"
       }
     },
     {
-      "testName": "should have valid timestamp format",
+      "testName": "should detect mismatches",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.047Z",
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.540Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl"
+        "caseFile": "reports/sample.spec/should_detect_mismatches.jsonl"
       }
     },
     {
-      "testName": "should have totalTests matching artifacts length",
+      "testName": "should support custom mask rules",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.047Z",
+      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.541Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl"
+        "caseFile": "reports/sample.spec/should_support_custom_mask_rules.jsonl"
       }
     },
     {
-      "testName": "should have at least one artifact entry",
+      "testName": "initialize",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.047Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
+      "timestamp": "2025-10-12T18:08:06.541Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl"
+        "caseFile": "reports/router.test/initialize.jsonl"
       }
     },
     {
-      "testName": "should have valid structure for each artifact entry",
+      "testName": "tools/resources list read",
       "status": "pass",
-      "duration": 27,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.047Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
+      "timestamp": "2025-10-12T18:08:06.541Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl"
+        "caseFile": "reports/router.test/tools_resources_list_read.jsonl"
       }
     },
     {
-      "testName": "should have valid timestamps for each entry",
+      "testName": "parses go test -json fixture data",
       "status": "pass",
-      "duration": 5,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.048Z",
+      "duration": 6,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.556Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl"
+        "caseFile": "reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"
       }
     },
     {
-      "testName": "should reference summary.jsonl in artifacts",
+      "testName": "parses individual event fields correctly",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.048Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.556Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl"
+        "caseFile": "reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"
       }
     },
     {
-      "testName": "should have caseFile path for each entry",
+      "testName": "handles empty input",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.048Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.557Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl"
+        "caseFile": "reports/goIngest.spec/handles_empty_input.jsonl"
       }
     },
     {
-      "testName": "should have valid location paths",
+      "testName": "handles malformed JSON lines",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.048Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.557Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_valid_location_paths.jsonl"
+        "caseFile": "reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"
       }
     },
     {
-      "testName": "should create JSONL file for each test case",
+      "testName": "converts Go events to Laminar format",
       "status": "pass",
       "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.557Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl"
+        "caseFile": "reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"
       }
     },
     {
-      "testName": "should organize case files in suite directories",
+      "testName": "creates test.start events for run actions",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.557Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl"
+        "caseFile": "reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"
       }
     },
     {
-      "testName": "should contain valid JSONL format",
+      "testName": "creates test.output events for output actions",
       "status": "pass",
       "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.557Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl"
+        "caseFile": "reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"
       }
     },
     {
-      "testName": "should include case.begin event",
+      "testName": "creates test.pass events with correct status",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_include_case_begin_event.jsonl"
+        "caseFile": "reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"
       }
     },
     {
-      "testName": "should include test.run event",
+      "testName": "creates test.fail events with error level",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_include_test_run_event.jsonl"
+        "caseFile": "reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"
       }
     },
     {
-      "testName": "should include case.end event with payload",
+      "testName": "creates test.skip events for skipped tests",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl"
+        "caseFile": "reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"
       }
     },
     {
-      "testName": "should have timestamps for all events",
+      "testName": "generates summary with correct test results",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.049Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl"
+        "caseFile": "reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"
       }
     },
     {
-      "testName": "should have chronological timestamps",
+      "testName": "includes duration in summary",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_chronological_timestamps.jsonl"
+        "caseFile": "reports/goIngest.spec/includes_duration_in_summary.jsonl"
       }
     },
     {
-      "testName": "should include test.error events for failed tests",
+      "testName": "includes location in summary",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.558Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl"
+        "caseFile": "reports/goIngest.spec/includes_location_in_summary.jsonl"
       }
     },
     {
-      "testName": "should have error-level log for case.end of failed tests",
+      "testName": "includes artifactURI in summary",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl"
+        "caseFile": "reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"
       }
     },
     {
-      "testName": "should have summary.jsonl file",
+      "testName": "validates Laminar event structure",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl"
+        "caseFile": "reports/goIngest.spec/validates_Laminar_event_structure.jsonl"
       }
     },
     {
-      "testName": "should have matching test count between index and summary",
-      "status": "fail",
-      "duration": 7,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "testName": "preserves timestamp ordering",
+      "status": "pass",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl"
+        "caseFile": "reports/goIngest.spec/preserves_timestamp_ordering.jsonl"
       }
     },
     {
-      "testName": "should have valid JSONL in summary file",
+      "testName": "writes JSONL files per test case",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.050Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl"
+        "caseFile": "reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"
       }
     },
     {
-      "testName": "should cross-reference between index and case files",
+      "testName": "writes summary.jsonl file",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl"
+        "caseFile": "reports/goIngest.spec/writes_summary_jsonl_file.jsonl"
       }
     },
     {
-      "testName": "should have case name in JSONL events matching test name",
+      "testName": "groups events by test case correctly",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl"
+        "caseFile": "reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"
       }
     },
     {
-      "testName": "should handle test names with special characters",
+      "testName": "writes valid JSONL format",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.559Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl"
+        "caseFile": "reports/goIngest.spec/writes_valid_JSONL_format.jsonl"
       }
     },
     {
-      "testName": "should have unique case file paths",
+      "testName": "processes fixture data from parsing to output",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl"
+        "caseFile": "reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"
       }
     },
     {
-      "testName": "should have all case files in reports directory",
+      "testName": "should parse regular characters",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_parse_regular_characters.jsonl"
       }
     },
     {
-      "testName": "should have consistent status values",
+      "testName": "should handle newlines",
       "status": "pass",
-      "duration": 6,
-      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.051Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/coreReporter.spec/should_have_consistent_status_values.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_newlines.jsonl"
       }
     },
     {
-      "testName": "should create and compare snapshots with masking",
+      "testName": "should handle carriage return",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.080Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_carriage_return.jsonl"
       }
     },
     {
-      "testName": "should detect mismatches",
+      "testName": "should parse ANSI cursor movement (CUP)",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.080Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/sample.spec/should_detect_mismatches.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl"
       }
     },
     {
-      "testName": "should support custom mask rules",
+      "testName": "should handle color codes (SGR)",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.080Z",
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/sample.spec/should_support_custom_mask_rules.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl"
       }
     },
     {
-      "testName": "parses go test -json fixture data",
+      "testName": "should handle color reset",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.088Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_color_reset.jsonl"
       }
     },
     {
-      "testName": "parses individual event fields correctly",
+      "testName": "should handle screen clearing (ED)",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.088Z",
+      "duration": 23,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.560Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"
       }
     },
     {
-      "testName": "handles empty input",
+      "testName": "should handle line clearing (EL)",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/handles_empty_input.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl"
       }
     },
     {
-      "testName": "handles malformed JSON lines",
+      "testName": "should handle cursor up (CUU)",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
-      "artifacts": {
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
+      "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl"
       }
     },
     {
-      "testName": "converts Go events to Laminar format",
+      "testName": "should handle cursor down (CUD)",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl"
       }
     },
     {
-      "testName": "creates test.start events for run actions",
+      "testName": "should handle cursor forward (CUF)",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl"
       }
     },
     {
-      "testName": "creates test.output events for output actions",
+      "testName": "should handle cursor back (CUB)",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"
       }
     },
     {
-      "testName": "creates test.pass events with correct status",
+      "testName": "should handle line wrapping",
       "status": "pass",
       "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_line_wrapping.jsonl"
       }
     },
     {
-      "testName": "creates test.fail events with error level",
+      "testName": "should handle scrolling",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.089Z",
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.561Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_scrolling.jsonl"
       }
     },
     {
-      "testName": "creates test.skip events for skipped tests",
+      "testName": "should handle tabs",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_tabs.jsonl"
       }
     },
     {
-      "testName": "generates summary with correct test results",
+      "testName": "should handle backspace",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"
+        "caseFile": "reports/ansiParser.spec/should_handle_backspace.jsonl"
       }
     },
     {
-      "testName": "includes duration in summary",
+      "testName": "round-trip a control frame",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "duration": 11,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/includes_duration_in_summary.jsonl"
+        "caseFile": "reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"
       }
     },
     {
-      "testName": "includes location in summary",
+      "testName": "round-trip a Buffer",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/includes_location_in_summary.jsonl"
+        "caseFile": "reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"
       }
     },
     {
-      "testName": "includes artifactURI in summary",
+      "testName": "assert handshake event structure",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"
+        "caseFile": "reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"
       }
     },
     {
-      "testName": "validates Laminar event structure",
+      "testName": "connect moves data 1:1",
       "status": "pass",
       "duration": 6,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/validates_Laminar_event_structure.jsonl"
+        "caseFile": "reports/kernel.spec/connect_moves_data_1_1.jsonl"
       }
     },
     {
-      "testName": "preserves timestamp ordering",
+      "testName": "split fans out to multiple destinations",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.090Z",
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.562Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/preserves_timestamp_ordering.jsonl"
+        "caseFile": "reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"
       }
     },
     {
-      "testName": "writes JSONL files per test case",
+      "testName": "merge combines multiple sources into one destination",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.091Z",
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.563Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"
+        "caseFile": "reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"
       }
     },
     {
-      "testName": "writes summary.jsonl file",
+      "testName": "register/lookup filters by capabilities",
       "status": "pass",
       "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.091Z",
+      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.563Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/writes_summary_jsonl_file.jsonl"
+        "caseFile": "reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"
       }
     },
     {
-      "testName": "groups events by test case correctly",
+      "testName": "returns false when module is not enabled",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.091Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.571Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"
+        "caseFile": "reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl"
       }
     },
     {
-      "testName": "writes valid JSONL format",
+      "testName": "returns consistent value for same module",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.091Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/writes_valid_JSONL_format.jsonl"
+        "caseFile": "reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"
       }
     },
     {
-      "testName": "processes fixture data from parsing to output",
+      "testName": "returns false when config is disabled",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.091Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"
+        "caseFile": "reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl"
       }
     },
     {
-      "testName": "generates digest from synthetic logs with failures",
+      "testName": "checks module against config.modules when enabled",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.100Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"
+        "caseFile": "reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl"
       }
     },
     {
-      "testName": "returns null for passing tests",
+      "testName": "does not emit when on() returns false",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.100Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/returns_null_for_passing_tests.jsonl"
+        "caseFile": "reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"
       }
     },
     {
-      "testName": "returns null when disabled",
+      "testName": "emit returns immediately when module is disabled",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/returns_null_when_disabled.jsonl"
+        "caseFile": "reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl"
       }
     },
     {
-      "testName": "includes correct summary statistics",
+      "testName": "shouldEmit returns false when module is disabled",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/includes_correct_summary_statistics.jsonl"
+        "caseFile": "reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl"
       }
     },
     {
-      "testName": "writes valid JSON file",
+      "testName": "emits to console when module is enabled",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.572Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/writes_valid_JSON_file.jsonl"
+        "caseFile": "reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"
       }
     },
     {
-      "testName": "writes valid markdown file",
+      "testName": "respects debug level filtering",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.573Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/writes_valid_markdown_file.jsonl"
+        "caseFile": "reports/debug-api.spec/respects_debug_level_filtering.jsonl"
       }
     },
     {
-      "testName": "includes events matching error level",
+      "testName": "emits formatted output to console",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.573Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/includes_events_matching_error_level.jsonl"
+        "caseFile": "reports/debug-api.spec/emits_formatted_output_to_console.jsonl"
       }
     },
     {
-      "testName": "includes events matching specific event name",
+      "testName": "handles emit without payload",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.573Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/includes_events_matching_specific_event_name.jsonl"
+        "caseFile": "reports/debug-api.spec/handles_emit_without_payload.jsonl"
       }
     },
     {
-      "testName": "applies slice action with window",
+      "testName": "shouldEmit respects level hierarchy",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.573Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/applies_slice_action_with_window.jsonl"
+        "caseFile": "reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"
       }
     },
     {
-      "testName": "applies redact action to fields",
+      "testName": "should render raw ANSI to stdout",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.101Z",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.578Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/applies_redact_action_to_fields.jsonl"
+        "caseFile": "reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"
       }
     },
     {
-      "testName": "respects priority order",
+      "testName": "should handle ANSI escape sequences",
       "status": "pass",
       "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.578Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/respects_priority_order.jsonl"
+        "caseFile": "reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl"
       }
     },
     {
-      "testName": "supports wildcard patterns in event matching",
+      "testName": "should write all data to log file",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.580Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl"
+        "caseFile": "reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"
       }
     },
     {
-      "testName": "supports multiple match criteria",
+      "testName": "should append to existing log file",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.595Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/supports_multiple_match_criteria.jsonl"
+        "caseFile": "reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl"
       }
     },
     {
-      "testName": "enforces byte budget",
+      "testName": "should generate index.json with valid structure",
       "status": "pass",
-      "duration": 5,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.666Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/enforces_byte_budget.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl"
       }
     },
     {
-      "testName": "enforces line budget",
+      "testName": "should have valid timestamp format",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.666Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/enforces_line_budget.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl"
       }
     },
     {
-      "testName": "keeps all events when within budget",
+      "testName": "should have totalTests matching artifacts length",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.666Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/keeps_all_events_when_within_budget.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl"
       }
     },
     {
-      "testName": "identifies error-level events as suspects",
+      "testName": "should have at least one artifact entry",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.102Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.666Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl"
       }
     },
     {
-      "testName": "scores failure events",
+      "testName": "should have valid structure for each artifact entry",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 35,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/scores_failure_events.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl"
       }
     },
     {
-      "testName": "scores correlated events",
+      "testName": "should have valid timestamps for each entry",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/scores_correlated_events.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl"
       }
     },
     {
-      "testName": "scores events close to failure time",
+      "testName": "should reference summary.jsonl in artifacts",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/scores_events_close_to_failure_time.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl"
       }
     },
     {
-      "testName": "limits suspects to top 5",
+      "testName": "should have caseFile path for each entry",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 8,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/limits_suspects_to_top_5.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl"
       }
     },
     {
-      "testName": "returns empty suspects for no failure events",
+      "testName": "should have valid location paths",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_valid_location_paths.jsonl"
       }
     },
     {
-      "testName": "handles empty log file",
+      "testName": "should create JSONL file for each test case",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 5,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/handles_empty_log_file.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl"
       }
     },
     {
-      "testName": "handles missing log file",
+      "testName": "should organize case files in suite directories",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.103Z",
+      "duration": 7,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.667Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/handles_missing_log_file.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl"
       }
     },
     {
-      "testName": "skips malformed JSON lines",
+      "testName": "should contain valid JSONL format",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/skips_malformed_JSON_lines.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl"
       }
     },
     {
-      "testName": "handles events without optional fields",
+      "testName": "should include case.begin event",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/handles_events_without_optional_fields.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_include_case_begin_event.jsonl"
       }
     },
     {
-      "testName": "processes ingested Go test failures transparently",
+      "testName": "should include test.run event",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_include_test_run_event.jsonl"
       }
     },
     {
-      "testName": "recognizes Go test.fail events in rules",
+      "testName": "should include case.end event with payload",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl"
       }
     },
     {
-      "testName": "initialize",
+      "testName": "should have timestamps for all events",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/router.test/initialize.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl"
       }
     },
     {
-      "testName": "tools/resources list read",
+      "testName": "should have chronological timestamps",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0",
-      "timestamp": "2025-10-12T17:59:00.104Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/router.test/tools_resources_list_read.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_chronological_timestamps.jsonl"
       }
     },
     {
-      "testName": "round-trip a control frame",
+      "testName": "should include test.error events for failed tests",
       "status": "pass",
-      "duration": 15,
-      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.118Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl"
       }
     },
     {
-      "testName": "round-trip a Buffer",
+      "testName": "should have error-level log for case.end of failed tests",
       "status": "pass",
-      "duration": 5,
-      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.118Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.668Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl"
       }
     },
     {
-      "testName": "assert handshake event structure",
+      "testName": "should have summary.jsonl file",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.118Z",
+      "duration": 0,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl"
       }
     },
     {
-      "testName": "returns false when module is not enabled",
+      "testName": "should have matching test count between index and summary",
+      "status": "fail",
+      "duration": 11,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl"
+      }
+    },
+    {
+      "testName": "should have valid JSONL in summary file",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.118Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl"
       }
     },
     {
-      "testName": "returns consistent value for same module",
+      "testName": "should cross-reference between index and case files",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl"
       }
     },
     {
-      "testName": "returns false when config is disabled",
+      "testName": "should have case name in JSONL events matching test name",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl"
       }
     },
     {
-      "testName": "checks module against config.modules when enabled",
+      "testName": "should handle test names with special characters",
       "status": "pass",
       "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.669Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl"
       }
     },
     {
-      "testName": "does not emit when on() returns false",
+      "testName": "should have unique case file paths",
       "status": "pass",
       "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl"
       }
     },
     {
-      "testName": "emit returns immediately when module is disabled",
+      "testName": "should have all case files in reports directory",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl"
       }
     },
     {
-      "testName": "shouldEmit returns false when module is disabled",
+      "testName": "should have consistent status values",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "duration": 30,
+      "location": "/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl"
+        "caseFile": "reports/coreReporter.spec/should_have_consistent_status_values.jsonl"
       }
     },
     {
-      "testName": "emits to console when module is enabled",
+      "testName": "generates digest from synthetic logs with failures",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.119Z",
+      "duration": 9,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"
+        "caseFile": "reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"
       }
     },
     {
-      "testName": "respects debug level filtering",
+      "testName": "returns null for passing tests",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.120Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/respects_debug_level_filtering.jsonl"
+        "caseFile": "reports/digest.spec/returns_null_for_passing_tests.jsonl"
       }
     },
     {
-      "testName": "emits formatted output to console",
+      "testName": "returns null when disabled",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.120Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/emits_formatted_output_to_console.jsonl"
+        "caseFile": "reports/digest.spec/returns_null_when_disabled.jsonl"
       }
     },
     {
-      "testName": "handles emit without payload",
+      "testName": "includes correct summary statistics",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.120Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/handles_emit_without_payload.jsonl"
+        "caseFile": "reports/digest.spec/includes_correct_summary_statistics.jsonl"
       }
     },
     {
-      "testName": "shouldEmit respects level hierarchy",
+      "testName": "writes valid JSON file",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.120Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.670Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"
+        "caseFile": "reports/digest.spec/writes_valid_JSON_file.jsonl"
       }
     },
     {
-      "testName": "connect moves data 1:1",
+      "testName": "writes valid markdown file",
       "status": "pass",
-      "duration": 10,
-      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.172Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.671Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/kernel.spec/connect_moves_data_1_1.jsonl"
+        "caseFile": "reports/digest.spec/writes_valid_markdown_file.jsonl"
       }
     },
     {
-      "testName": "split fans out to multiple destinations",
+      "testName": "includes events matching error level",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "duration": 4,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.686Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"
+        "caseFile": "reports/digest.spec/includes_events_matching_error_level.jsonl"
       }
     },
     {
-      "testName": "merge combines multiple sources into one destination",
+      "testName": "includes events matching specific event name",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.688Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"
+        "caseFile": "reports/digest.spec/includes_events_matching_specific_event_name.jsonl"
       }
     },
     {
-      "testName": "register/lookup filters by capabilities",
+      "testName": "applies slice action with window",
       "status": "pass",
       "duration": 3,
-      "location": "/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.688Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"
+        "caseFile": "reports/digest.spec/applies_slice_action_with_window.jsonl"
       }
     },
     {
-      "testName": "adds nodes and emits events",
+      "testName": "applies redact action to fields",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.689Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"
+        "caseFile": "reports/digest.spec/applies_redact_action_to_fields.jsonl"
       }
     },
     {
-      "testName": "connects and emits connected",
+      "testName": "respects priority order",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.689Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/stateManager.spec/connects_and_emits_connected.jsonl"
+        "caseFile": "reports/digest.spec/respects_priority_order.jsonl"
       }
     },
     {
-      "testName": "split and merge emit events",
+      "testName": "supports wildcard patterns in event matching",
       "status": "pass",
-      "duration": 19,
-      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.173Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.689Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/stateManager.spec/split_and_merge_emit_events.jsonl"
+        "caseFile": "reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl"
       }
     },
     {
-      "testName": "validator enforces directionality when set",
+      "testName": "supports multiple match criteria",
       "status": "pass",
-      "duration": 3,
-      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.174Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.690Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"
+        "caseFile": "reports/digest.spec/supports_multiple_match_criteria.jsonl"
       }
     },
     {
-      "testName": "exporters produce strings",
+      "testName": "enforces byte budget",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.174Z",
+      "duration": 28,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.690Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/stateManager.spec/exporters_produce_strings.jsonl"
+        "caseFile": "reports/digest.spec/enforces_byte_budget.jsonl"
       }
     },
     {
-      "testName": "should parse regular characters",
+      "testName": "enforces line budget",
       "status": "pass",
-      "duration": 4,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.179Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.690Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_parse_regular_characters.jsonl"
+        "caseFile": "reports/digest.spec/enforces_line_budget.jsonl"
       }
     },
     {
-      "testName": "should handle newlines",
+      "testName": "keeps all events when within budget",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.179Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.691Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_newlines.jsonl"
+        "caseFile": "reports/digest.spec/keeps_all_events_when_within_budget.jsonl"
       }
     },
     {
-      "testName": "should handle carriage return",
+      "testName": "identifies error-level events as suspects",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.179Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.691Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_carriage_return.jsonl"
+        "caseFile": "reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"
       }
     },
     {
-      "testName": "should parse ANSI cursor movement (CUP)",
+      "testName": "scores failure events",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.691Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl"
+        "caseFile": "reports/digest.spec/scores_failure_events.jsonl"
       }
     },
     {
-      "testName": "should handle color codes (SGR)",
+      "testName": "scores correlated events",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.691Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl"
+        "caseFile": "reports/digest.spec/scores_correlated_events.jsonl"
       }
     },
     {
-      "testName": "should handle color reset",
+      "testName": "scores events close to failure time",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.692Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_color_reset.jsonl"
+        "caseFile": "reports/digest.spec/scores_events_close_to_failure_time.jsonl"
       }
     },
     {
-      "testName": "should handle screen clearing (ED)",
+      "testName": "limits suspects to top 5",
       "status": "pass",
-      "duration": 48,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.692Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"
+        "caseFile": "reports/digest.spec/limits_suspects_to_top_5.jsonl"
       }
     },
     {
-      "testName": "should handle line clearing (EL)",
+      "testName": "returns empty suspects for no failure events",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 17,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.692Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl"
+        "caseFile": "reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl"
       }
     },
     {
-      "testName": "should handle cursor up (CUU)",
+      "testName": "handles empty log file",
       "status": "pass",
-      "duration": 14,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.692Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl"
+        "caseFile": "reports/digest.spec/handles_empty_log_file.jsonl"
       }
     },
     {
-      "testName": "should handle cursor down (CUD)",
+      "testName": "handles missing log file",
       "status": "pass",
-      "duration": 2,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.692Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl"
+        "caseFile": "reports/digest.spec/handles_missing_log_file.jsonl"
       }
     },
     {
-      "testName": "should handle cursor forward (CUF)",
+      "testName": "skips malformed JSON lines",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.180Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.693Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl"
+        "caseFile": "reports/digest.spec/skips_malformed_JSON_lines.jsonl"
       }
     },
     {
-      "testName": "should handle cursor back (CUB)",
+      "testName": "handles events without optional fields",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.693Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"
+        "caseFile": "reports/digest.spec/handles_events_without_optional_fields.jsonl"
       }
     },
     {
-      "testName": "should handle line wrapping",
+      "testName": "processes ingested Go test failures transparently",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 2,
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.693Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_line_wrapping.jsonl"
+        "caseFile": "reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl"
       }
     },
     {
-      "testName": "should handle scrolling",
+      "testName": "recognizes Go test.fail events in rules",
       "status": "pass",
       "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "location": "/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.693Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_scrolling.jsonl"
+        "caseFile": "reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"
       }
     },
     {
-      "testName": "should handle tabs",
+      "testName": "adds nodes and emits events",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.693Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_tabs.jsonl"
+        "caseFile": "reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"
       }
     },
     {
-      "testName": "should handle backspace",
+      "testName": "connects and emits connected",
       "status": "pass",
-      "duration": 0,
-      "location": "/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 17,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/ansiParser.spec/should_handle_backspace.jsonl"
+        "caseFile": "reports/stateManager.spec/connects_and_emits_connected.jsonl"
       }
     },
     {
-      "testName": "should render raw ANSI to stdout",
+      "testName": "split and merge emit events",
       "status": "pass",
-      "duration": 23,
-      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"
+        "caseFile": "reports/stateManager.spec/split_and_merge_emit_events.jsonl"
       }
     },
     {
-      "testName": "should handle ANSI escape sequences",
+      "testName": "validator enforces directionality when set",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.181Z",
+      "duration": 3,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl"
+        "caseFile": "reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"
       }
     },
     {
-      "testName": "should write all data to log file",
+      "testName": "exporters produce strings",
       "status": "pass",
-      "duration": 24,
-      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.182Z",
+      "duration": 1,
+      "location": "/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"
+        "caseFile": "reports/stateManager.spec/exporters_produce_strings.jsonl"
       }
     },
     {
-      "testName": "should append to existing log file",
+      "testName": "should spawn a simple process",
       "status": "pass",
-      "duration": 1,
-      "location": "/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.182Z",
+      "duration": 39,
+      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl"
+        "caseFile": "reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"
       }
     },
     {
-      "testName": "split: order preservation across destinations",
+      "testName": "split: all destinations receive identical data",
       "status": "pass",
-      "duration": 87,
+      "duration": 65,
       "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.375Z",
+      "timestamp": "2025-10-12T18:08:06.694Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
-        "caseFile": "reports/invariants.spec/split__order_preservation_across_destinations.jsonl"
+        "caseFile": "reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl"
       }
     },
     {
       "testName": "registers and queries by capabilities",
       "status": "pass",
-      "duration": 29,
+      "duration": 28,
       "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.376Z",
+      "timestamp": "2025-10-12T18:08:06.695Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/hostess.spec/registers_and_queries_by_capabilities.jsonl"
@@ -1413,9 +1424,9 @@
     {
       "testName": "marks in-use and back to available",
       "status": "pass",
-      "duration": 3,
+      "duration": 5,
       "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.376Z",
+      "timestamp": "2025-10-12T18:08:06.695Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/hostess.spec/marks_in-use_and_back_to_available.jsonl"
@@ -1424,9 +1435,9 @@
     {
       "testName": "evicts after missed heartbeats",
       "status": "pass",
-      "duration": 35,
+      "duration": 2,
       "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.376Z",
+      "timestamp": "2025-10-12T18:08:06.695Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/hostess.spec/evicts_after_missed_heartbeats.jsonl"
@@ -1437,29 +1448,18 @@
       "status": "pass",
       "duration": 2,
       "location": "/srv/repos0/mkolbol/test/hostess.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.377Z",
+      "timestamp": "2025-10-12T18:08:06.695Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/hostess.spec/heartbeat_maintains_liveness.jsonl"
       }
     },
-    {
-      "testName": "should spawn a simple process",
-      "status": "pass",
-      "duration": 94,
-      "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:00.377Z",
-      "artifacts": {
-        "summary": "reports/summary.jsonl",
-        "caseFile": "reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"
-      }
-    },
     {
       "testName": "should load configuration",
       "status": "pass",
-      "duration": 5,
+      "duration": 33,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.218Z",
+      "timestamp": "2025-10-12T18:08:08.615Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_load_configuration.jsonl"
@@ -1468,9 +1468,9 @@
     {
       "testName": "should throw if up() called without load()",
       "status": "pass",
-      "duration": 1,
+      "duration": 2,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.219Z",
+      "timestamp": "2025-10-12T18:08:08.615Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_throw_if_up___called_without_load__.jsonl"
@@ -1479,9 +1479,9 @@
     {
       "testName": "should instantiate modules and register with hostess",
       "status": "pass",
-      "duration": 5,
+      "duration": 35,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.219Z",
+      "timestamp": "2025-10-12T18:08:08.616Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl"
@@ -1492,7 +1492,7 @@
       "status": "pass",
       "duration": 2,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.219Z",
+      "timestamp": "2025-10-12T18:08:08.616Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_wire_connections_via_StateManager.jsonl"
@@ -1501,9 +1501,9 @@
     {
       "testName": "should support restartNode",
       "status": "pass",
-      "duration": 2,
+      "duration": 1,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.220Z",
+      "timestamp": "2025-10-12T18:08:08.616Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_support_restartNode.jsonl"
@@ -1514,18 +1514,29 @@
       "status": "pass",
       "duration": 0,
       "location": "/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.220Z",
+      "timestamp": "2025-10-12T18:08:08.617Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl"
       }
     },
+    {
+      "testName": "merge: all source data reaches destination",
+      "status": "pass",
+      "duration": 34,
+      "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
+      "timestamp": "2025-10-12T18:08:08.617Z",
+      "artifacts": {
+        "summary": "reports/summary.jsonl",
+        "caseFile": "reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl"
+      }
+    },
     {
       "testName": "merge: no data loss with concurrent writes",
       "status": "pass",
-      "duration": 225,
+      "duration": 245,
       "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.221Z",
+      "timestamp": "2025-10-12T18:08:08.618Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl"
@@ -1534,9 +1545,9 @@
     {
       "testName": "split-then-merge: roundtrip preserves all data",
       "status": "pass",
-      "duration": 1199,
+      "duration": 1260,
       "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.221Z",
+      "timestamp": "2025-10-12T18:08:08.618Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl"
@@ -1547,7 +1558,7 @@
       "status": "pass",
       "duration": 8,
       "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.221Z",
+      "timestamp": "2025-10-12T18:08:08.618Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl"
@@ -1558,7 +1569,7 @@
       "status": "pass",
       "duration": 3,
       "location": "/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.222Z",
+      "timestamp": "2025-10-12T18:08:08.619Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl"
@@ -1567,9 +1578,9 @@
     {
       "testName": "should handle environment variables",
       "status": "pass",
-      "duration": 235,
+      "duration": 244,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.222Z",
+      "timestamp": "2025-10-12T18:08:08.619Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl"
@@ -1578,9 +1589,9 @@
     {
       "testName": "should register with Hostess on spawn",
       "status": "pass",
-      "duration": 56,
+      "duration": 76,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.222Z",
+      "timestamp": "2025-10-12T18:08:08.619Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl"
@@ -1589,9 +1600,9 @@
     {
       "testName": "should gracefully shutdown with SIGTERM",
       "status": "pass",
-      "duration": 33,
+      "duration": 76,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.223Z",
+      "timestamp": "2025-10-12T18:08:08.620Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl"
@@ -1600,9 +1611,9 @@
     {
       "testName": "should restart on failure with \"on-failure\" policy",
       "status": "pass",
-      "duration": 546,
+      "duration": 539,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.223Z",
+      "timestamp": "2025-10-12T18:08:08.620Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl"
@@ -1611,9 +1622,9 @@
     {
       "testName": "should not restart with \"never\" policy",
       "status": "pass",
-      "duration": 331,
+      "duration": 337,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.223Z",
+      "timestamp": "2025-10-12T18:08:08.620Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl"
@@ -1622,9 +1633,9 @@
     {
       "testName": "should respect maxRestarts limit",
       "status": "pass",
-      "duration": 536,
+      "duration": 537,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.224Z",
+      "timestamp": "2025-10-12T18:08:08.621Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl"
@@ -1633,13 +1644,23 @@
     {
       "testName": "should provide process info",
       "status": "pass",
-      "duration": 28,
+      "duration": 34,
       "location": "/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0",
-      "timestamp": "2025-10-12T17:59:02.224Z",
+      "timestamp": "2025-10-12T18:08:08.621Z",
       "artifacts": {
         "summary": "reports/summary.jsonl",
         "caseFile": "reports/externalServerWrapper.spec/should_provide_process_info.jsonl"
       }
     }
-  ]
+  ],
+  "environment": {
+    "nodeVersion": "v24.9.0",
+    "platform": "linux",
+    "arch": "x64",
+    "os": "Linux 6.8.0-85-generic",
+    "seed": 42,
+    "envVars": {
+      "NODE_ENV": "test"
+    }
+  }
 }
\ No newline at end of file
diff --git a/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl b/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
index 089ceb3..c400e6c 100644
--- a/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
+++ b/reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942222,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"setup","evt":"case.begin"}
-{"ts":1760291942223,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"execution","evt":"test.run"}
-{"ts":1760291942224,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292488619,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488620,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"execution","evt":"test.run"}
+{"ts":1760292488621,"lvl":"info","case":"empty merge: destination with zero sources completes","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl b/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
index 5bf7202..0b334d1 100644
--- a/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
+++ b/reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942221,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"setup","evt":"case.begin"}
-{"ts":1760291942222,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"execution","evt":"test.run"}
-{"ts":1760291942223,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
+{"ts":1760292488618,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488619,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"execution","evt":"test.run"}
+{"ts":1760292488620,"lvl":"info","case":"empty split: source with zero destinations completes","phase":"teardown","evt":"case.end","payload":{"duration":8,"status":"passed"}}
diff --git a/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl b/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
index 2500b66..c07c501 100644
--- a/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
+++ b/reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760290663100,"lvl":"info","case":"merge: all source data reaches destination","phase":"setup","evt":"case.begin"}
-{"ts":1760290663101,"lvl":"info","case":"merge: all source data reaches destination","phase":"execution","evt":"test.run"}
-{"ts":1760290663102,"lvl":"info","case":"merge: all source data reaches destination","phase":"teardown","evt":"case.end","payload":{"duration":283,"status":"passed"}}
+{"ts":1760292488617,"lvl":"info","case":"merge: all source data reaches destination","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488618,"lvl":"info","case":"merge: all source data reaches destination","phase":"execution","evt":"test.run"}
+{"ts":1760292488619,"lvl":"info","case":"merge: all source data reaches destination","phase":"teardown","evt":"case.end","payload":{"duration":34,"status":"passed"}}
diff --git a/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl b/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
index ebcc7ca..f043bfb 100644
--- a/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
+++ b/reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942221,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"setup","evt":"case.begin"}
-{"ts":1760291942222,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"execution","evt":"test.run"}
-{"ts":1760291942223,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"teardown","evt":"case.end","payload":{"duration":225,"status":"passed"}}
+{"ts":1760292488618,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488619,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"execution","evt":"test.run"}
+{"ts":1760292488620,"lvl":"info","case":"merge: no data loss with concurrent writes","phase":"teardown","evt":"case.end","payload":{"duration":245,"status":"passed"}}
diff --git a/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl b/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
index afad17f..3285bef 100644
--- a/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
+++ b/reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291942221,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"setup","evt":"case.begin"}
-{"ts":1760291942222,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"execution","evt":"test.run"}
-{"ts":1760291942223,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"teardown","evt":"case.end","payload":{"duration":1199,"status":"passed"}}
+{"ts":1760292488618,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292488619,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"execution","evt":"test.run"}
+{"ts":1760292488620,"lvl":"info","case":"split-then-merge: roundtrip preserves all data","phase":"teardown","evt":"case.end","payload":{"duration":1260,"status":"passed"}}
diff --git a/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl b/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
index 63dcc08..20fe7b2 100644
--- a/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
+++ b/reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760290663100,"lvl":"info","case":"split: all destinations receive identical data","phase":"setup","evt":"case.begin"}
-{"ts":1760290663101,"lvl":"info","case":"split: all destinations receive identical data","phase":"execution","evt":"test.run"}
-{"ts":1760290663102,"lvl":"info","case":"split: all destinations receive identical data","phase":"teardown","evt":"case.end","payload":{"duration":130,"status":"passed"}}
+{"ts":1760292486694,"lvl":"info","case":"split: all destinations receive identical data","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486695,"lvl":"info","case":"split: all destinations receive identical data","phase":"execution","evt":"test.run"}
+{"ts":1760292486696,"lvl":"info","case":"split: all destinations receive identical data","phase":"teardown","evt":"case.end","payload":{"duration":65,"status":"passed"}}
diff --git a/reports/invariants.spec/split__order_preservation_across_destinations.jsonl b/reports/invariants.spec/split__order_preservation_across_destinations.jsonl
index 4ac91c4..8336fc5 100644
--- a/reports/invariants.spec/split__order_preservation_across_destinations.jsonl
+++ b/reports/invariants.spec/split__order_preservation_across_destinations.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940375,"lvl":"info","case":"split: order preservation across destinations","phase":"setup","evt":"case.begin"}
-{"ts":1760291940376,"lvl":"info","case":"split: order preservation across destinations","phase":"execution","evt":"test.run"}
-{"ts":1760291940377,"lvl":"info","case":"split: order preservation across destinations","phase":"teardown","evt":"case.end","payload":{"duration":87,"status":"passed"}}
+{"ts":1760292441858,"lvl":"info","case":"split: order preservation across destinations","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292441859,"lvl":"info","case":"split: order preservation across destinations","phase":"execution","evt":"test.run"}
+{"ts":1760292441860,"lvl":"info","case":"split: order preservation across destinations","phase":"teardown","evt":"case.end","payload":{"duration":235,"status":"passed"}}
diff --git a/reports/kernel.spec/connect_moves_data_1_1.jsonl b/reports/kernel.spec/connect_moves_data_1_1.jsonl
index ee53186..6712c7f 100644
--- a/reports/kernel.spec/connect_moves_data_1_1.jsonl
+++ b/reports/kernel.spec/connect_moves_data_1_1.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940172,"lvl":"info","case":"connect moves data 1:1","phase":"setup","evt":"case.begin"}
-{"ts":1760291940173,"lvl":"info","case":"connect moves data 1:1","phase":"execution","evt":"test.run"}
-{"ts":1760291940174,"lvl":"info","case":"connect moves data 1:1","phase":"teardown","evt":"case.end","payload":{"duration":10,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"connect moves data 1:1","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"connect moves data 1:1","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"connect moves data 1:1","phase":"teardown","evt":"case.end","payload":{"duration":6,"status":"passed"}}
diff --git a/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl b/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
index 0079105..5ed0251 100644
--- a/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
+++ b/reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486563,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486564,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"execution","evt":"test.run"}
+{"ts":1760292486565,"lvl":"info","case":"merge combines multiple sources into one destination","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl b/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
index 6751188..fcd199e 100644
--- a/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
+++ b/reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"register/lookup filters by capabilities","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"register/lookup filters by capabilities","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"register/lookup filters by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486563,"lvl":"info","case":"register/lookup filters by capabilities","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486564,"lvl":"info","case":"register/lookup filters by capabilities","phase":"execution","evt":"test.run"}
+{"ts":1760292486565,"lvl":"info","case":"register/lookup filters by capabilities","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl b/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
index 89ca716..c0f6e7d 100644
--- a/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
+++ b/reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"split fans out to multiple destinations","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"split fans out to multiple destinations","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"split fans out to multiple destinations","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"split fans out to multiple destinations","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"split fans out to multiple destinations","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"split fans out to multiple destinations","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl b/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
index 659ccd4..b12b0ee 100644
--- a/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
+++ b/reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940182,"lvl":"info","case":"should append to existing log file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940183,"lvl":"info","case":"should append to existing log file","phase":"execution","evt":"test.run"}
-{"ts":1760291940184,"lvl":"info","case":"should append to existing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486580,"lvl":"info","case":"should append to existing log file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486581,"lvl":"info","case":"should append to existing log file","phase":"execution","evt":"test.run"}
+{"ts":1760292486582,"lvl":"info","case":"should append to existing log file","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl b/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
index 16b04ef..e0b0acd 100644
--- a/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
+++ b/reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940182,"lvl":"info","case":"should write all data to log file","phase":"setup","evt":"case.begin"}
-{"ts":1760291940183,"lvl":"info","case":"should write all data to log file","phase":"execution","evt":"test.run"}
-{"ts":1760291940184,"lvl":"info","case":"should write all data to log file","phase":"teardown","evt":"case.end","payload":{"duration":24,"status":"passed"}}
+{"ts":1760292486580,"lvl":"info","case":"should write all data to log file","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486581,"lvl":"info","case":"should write all data to log file","phase":"execution","evt":"test.run"}
+{"ts":1760292486582,"lvl":"info","case":"should write all data to log file","phase":"teardown","evt":"case.end","payload":{"duration":7,"status":"passed"}}
diff --git a/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl b/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
index 6cc05d3..5f9a59c 100644
--- a/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
+++ b/reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should handle ANSI escape sequences","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should handle ANSI escape sequences","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should handle ANSI escape sequences","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486578,"lvl":"info","case":"should handle ANSI escape sequences","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486579,"lvl":"info","case":"should handle ANSI escape sequences","phase":"execution","evt":"test.run"}
+{"ts":1760292486580,"lvl":"info","case":"should handle ANSI escape sequences","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl b/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
index 9d6ad24..394a855 100644
--- a/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
+++ b/reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940181,"lvl":"info","case":"should render raw ANSI to stdout","phase":"setup","evt":"case.begin"}
-{"ts":1760291940182,"lvl":"info","case":"should render raw ANSI to stdout","phase":"execution","evt":"test.run"}
-{"ts":1760291940183,"lvl":"info","case":"should render raw ANSI to stdout","phase":"teardown","evt":"case.end","payload":{"duration":23,"status":"passed"}}
+{"ts":1760292486578,"lvl":"info","case":"should render raw ANSI to stdout","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486579,"lvl":"info","case":"should render raw ANSI to stdout","phase":"execution","evt":"test.run"}
+{"ts":1760292486580,"lvl":"info","case":"should render raw ANSI to stdout","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/router.test/initialize.jsonl b/reports/router.test/initialize.jsonl
index f4abd51..7e560e0 100644
--- a/reports/router.test/initialize.jsonl
+++ b/reports/router.test/initialize.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"initialize","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"initialize","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"initialize","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486541,"lvl":"info","case":"initialize","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486542,"lvl":"info","case":"initialize","phase":"execution","evt":"test.run"}
+{"ts":1760292486543,"lvl":"info","case":"initialize","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/router.test/tools_resources_list_read.jsonl b/reports/router.test/tools_resources_list_read.jsonl
index a31a315..7769f51 100644
--- a/reports/router.test/tools_resources_list_read.jsonl
+++ b/reports/router.test/tools_resources_list_read.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940104,"lvl":"info","case":"tools/resources list read","phase":"setup","evt":"case.begin"}
-{"ts":1760291940105,"lvl":"info","case":"tools/resources list read","phase":"execution","evt":"test.run"}
-{"ts":1760291940106,"lvl":"info","case":"tools/resources list read","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486541,"lvl":"info","case":"tools/resources list read","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486542,"lvl":"info","case":"tools/resources list read","phase":"execution","evt":"test.run"}
+{"ts":1760292486543,"lvl":"info","case":"tools/resources list read","phase":"teardown","evt":"case.end","payload":{"duration":0,"status":"passed"}}
diff --git a/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl b/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
index 7eff3f8..446ee3b 100644
--- a/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
+++ b/reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940080,"lvl":"info","case":"should create and compare snapshots with masking","phase":"setup","evt":"case.begin"}
-{"ts":1760291940081,"lvl":"info","case":"should create and compare snapshots with masking","phase":"execution","evt":"test.run"}
-{"ts":1760291940082,"lvl":"info","case":"should create and compare snapshots with masking","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486540,"lvl":"info","case":"should create and compare snapshots with masking","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486541,"lvl":"info","case":"should create and compare snapshots with masking","phase":"execution","evt":"test.run"}
+{"ts":1760292486542,"lvl":"info","case":"should create and compare snapshots with masking","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
diff --git a/reports/sample.spec/should_detect_mismatches.jsonl b/reports/sample.spec/should_detect_mismatches.jsonl
index 0612ee4..6b34b1b 100644
--- a/reports/sample.spec/should_detect_mismatches.jsonl
+++ b/reports/sample.spec/should_detect_mismatches.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940080,"lvl":"info","case":"should detect mismatches","phase":"setup","evt":"case.begin"}
-{"ts":1760291940081,"lvl":"info","case":"should detect mismatches","phase":"execution","evt":"test.run"}
-{"ts":1760291940082,"lvl":"info","case":"should detect mismatches","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486540,"lvl":"info","case":"should detect mismatches","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486541,"lvl":"info","case":"should detect mismatches","phase":"execution","evt":"test.run"}
+{"ts":1760292486542,"lvl":"info","case":"should detect mismatches","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/sample.spec/should_support_custom_mask_rules.jsonl b/reports/sample.spec/should_support_custom_mask_rules.jsonl
index a394b06..286b22f 100644
--- a/reports/sample.spec/should_support_custom_mask_rules.jsonl
+++ b/reports/sample.spec/should_support_custom_mask_rules.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940080,"lvl":"info","case":"should support custom mask rules","phase":"setup","evt":"case.begin"}
-{"ts":1760291940081,"lvl":"info","case":"should support custom mask rules","phase":"execution","evt":"test.run"}
-{"ts":1760291940082,"lvl":"info","case":"should support custom mask rules","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486541,"lvl":"info","case":"should support custom mask rules","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486542,"lvl":"info","case":"should support custom mask rules","phase":"execution","evt":"test.run"}
+{"ts":1760292486543,"lvl":"info","case":"should support custom mask rules","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl b/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
index f737c19..e3d8ee8 100644
--- a/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
+++ b/reports/stateManager.spec/adds_nodes_and_emits_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"adds nodes and emits events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"adds nodes and emits events","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"adds nodes and emits events","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486693,"lvl":"info","case":"adds nodes and emits events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486694,"lvl":"info","case":"adds nodes and emits events","phase":"execution","evt":"test.run"}
+{"ts":1760292486695,"lvl":"info","case":"adds nodes and emits events","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/stateManager.spec/connects_and_emits_connected.jsonl b/reports/stateManager.spec/connects_and_emits_connected.jsonl
index 20f13ed..9d79f1f 100644
--- a/reports/stateManager.spec/connects_and_emits_connected.jsonl
+++ b/reports/stateManager.spec/connects_and_emits_connected.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"connects and emits connected","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"connects and emits connected","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"connects and emits connected","phase":"teardown","evt":"case.end","payload":{"duration":2,"status":"passed"}}
+{"ts":1760292486693,"lvl":"info","case":"connects and emits connected","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486694,"lvl":"info","case":"connects and emits connected","phase":"execution","evt":"test.run"}
+{"ts":1760292486695,"lvl":"info","case":"connects and emits connected","phase":"teardown","evt":"case.end","payload":{"duration":17,"status":"passed"}}
diff --git a/reports/stateManager.spec/exporters_produce_strings.jsonl b/reports/stateManager.spec/exporters_produce_strings.jsonl
index d3f4a8e..eb890c9 100644
--- a/reports/stateManager.spec/exporters_produce_strings.jsonl
+++ b/reports/stateManager.spec/exporters_produce_strings.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940174,"lvl":"info","case":"exporters produce strings","phase":"setup","evt":"case.begin"}
-{"ts":1760291940175,"lvl":"info","case":"exporters produce strings","phase":"execution","evt":"test.run"}
-{"ts":1760291940176,"lvl":"info","case":"exporters produce strings","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
+{"ts":1760292486694,"lvl":"info","case":"exporters produce strings","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486695,"lvl":"info","case":"exporters produce strings","phase":"execution","evt":"test.run"}
+{"ts":1760292486696,"lvl":"info","case":"exporters produce strings","phase":"teardown","evt":"case.end","payload":{"duration":1,"status":"passed"}}
diff --git a/reports/stateManager.spec/split_and_merge_emit_events.jsonl b/reports/stateManager.spec/split_and_merge_emit_events.jsonl
index d735049..7a0a197 100644
--- a/reports/stateManager.spec/split_and_merge_emit_events.jsonl
+++ b/reports/stateManager.spec/split_and_merge_emit_events.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"split and merge emit events","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"split and merge emit events","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"split and merge emit events","phase":"teardown","evt":"case.end","payload":{"duration":19,"status":"passed"}}
+{"ts":1760292486694,"lvl":"info","case":"split and merge emit events","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486695,"lvl":"info","case":"split and merge emit events","phase":"execution","evt":"test.run"}
+{"ts":1760292486696,"lvl":"info","case":"split and merge emit events","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl b/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
index acf7bb1..9f3cd8b 100644
--- a/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
+++ b/reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940173,"lvl":"info","case":"validator enforces directionality when set","phase":"setup","evt":"case.begin"}
-{"ts":1760291940174,"lvl":"info","case":"validator enforces directionality when set","phase":"execution","evt":"test.run"}
-{"ts":1760291940175,"lvl":"info","case":"validator enforces directionality when set","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
+{"ts":1760292486694,"lvl":"info","case":"validator enforces directionality when set","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486695,"lvl":"info","case":"validator enforces directionality when set","phase":"execution","evt":"test.run"}
+{"ts":1760292486696,"lvl":"info","case":"validator enforces directionality when set","phase":"teardown","evt":"case.end","payload":{"duration":3,"status":"passed"}}
diff --git a/reports/summary.jsonl b/reports/summary.jsonl
index 17d3a35..c0ff66f 100644
--- a/reports/summary.jsonl
+++ b/reports/summary.jsonl
@@ -1,149 +1,151 @@
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl"}
-{"status":"pass","duration":27,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_location_paths.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_begin_event.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_run_event.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_chronological_timestamps.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl"}
-{"status":"fail","duration":7,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl","error":"expected 1 to be greater than or equal to 151"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl"}
-{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_consistent_status_values.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_detect_mismatches.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_support_custom_mask_rules.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_empty_input.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_malformed_JSON_lines.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_duration_in_summary.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_location_in_summary.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_artifactURI_in_summary.jsonl"}
-{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/validates_Laminar_event_structure.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/preserves_timestamp_ordering.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_summary_jsonl_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_valid_JSONL_format.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_for_passing_tests.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_when_disabled.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_correct_summary_statistics.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_JSON_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_markdown_file.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_error_level.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_specific_event_name.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_slice_action_with_window.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_redact_action_to_fields.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/respects_priority_order.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_multiple_match_criteria.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_byte_budget.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_line_budget.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/keeps_all_events_when_within_budget.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/identifies_error-level_events_as_suspects.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_failure_events.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_correlated_events.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_events_close_to_failure_time.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/limits_suspects_to_top_5.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_empty_log_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_missing_log_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/skips_malformed_JSON_lines.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_events_without_optional_fields.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/initialize.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/tools_resources_list_read.jsonl"}
-{"status":"pass","duration":15,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_control_frame.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_Buffer.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/assert_handshake_event_structure.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/respects_debug_level_filtering.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_formatted_output_to_console.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/handles_emit_without_payload.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl"}
-{"status":"pass","duration":10,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/connect_moves_data_1_1.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/adds_nodes_and_emits_events.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/connects_and_emits_connected.jsonl"}
-{"status":"pass","duration":19,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/split_and_merge_emit_events.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/exporters_produce_strings.jsonl"}
-{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_regular_characters.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_newlines.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_carriage_return.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_reset.jsonl"}
-{"status":"pass","duration":48,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl"}
-{"status":"pass","duration":14,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_wrapping.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_scrolling.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_tabs.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_backspace.jsonl"}
-{"status":"pass","duration":23,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl"}
-{"status":"pass","duration":24,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl"}
-{"status":"pass","duration":87,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split__order_preservation_across_destinations.jsonl"}
-{"status":"pass","duration":29,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/registers_and_queries_by_capabilities.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/marks_in-use_and_back_to_available.jsonl"}
-{"status":"pass","duration":35,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/evicts_after_missed_heartbeats.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/heartbeat_maintains_liveness.jsonl"}
-{"status":"pass","duration":94,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_load_configuration.jsonl"}
-{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_if_up___called_without_load__.jsonl"}
-{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_wire_connections_via_StateManager.jsonl"}
-{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_support_restartNode.jsonl"}
-{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl"}
-{"status":"pass","duration":225,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl"}
-{"status":"pass","duration":1199,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl"}
-{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl"}
-{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl"}
-{"status":"pass","duration":235,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl"}
-{"status":"pass","duration":56,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl"}
-{"status":"pass","duration":33,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl"}
-{"status":"pass","duration":546,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl"}
-{"status":"pass","duration":331,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl"}
-{"status":"pass","duration":536,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl"}
-{"status":"pass","duration":28,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_provide_process_info.jsonl"}
+{"type":"environment","nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_create_and_compare_snapshots_with_masking.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_detect_mismatches.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/golden/sample.spec.ts:0","artifactURI":"reports/sample.spec/should_support_custom_mask_rules.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/initialize.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/archived/mcp-kernel/tests/router.test.ts:0","artifactURI":"reports/router.test/tools_resources_list_read.jsonl","seed":42}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_go_test_-json_fixture_data.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/parses_individual_event_fields_correctly.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_empty_input.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/handles_malformed_JSON_lines.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/converts_Go_events_to_Laminar_format.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_start_events_for_run_actions.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_output_events_for_output_actions.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_pass_events_with_correct_status.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_fail_events_with_error_level.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/creates_test_skip_events_for_skipped_tests.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/generates_summary_with_correct_test_results.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_duration_in_summary.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_location_in_summary.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/includes_artifactURI_in_summary.jsonl","seed":42}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/validates_Laminar_event_structure.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/preserves_timestamp_ordering.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_JSONL_files_per_test_case.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_summary_jsonl_file.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/groups_events_by_test_case_correctly.jsonl","seed":42}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/writes_valid_JSONL_format.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/ingest/goIngest.spec.ts:0","artifactURI":"reports/goIngest.spec/processes_fixture_data_from_parsing_to_output.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_regular_characters.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_newlines.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_carriage_return.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_parse_ANSI_cursor_movement__CUP_.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_codes__SGR_.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_color_reset.jsonl","seed":42}
+{"status":"pass","duration":23,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_screen_clearing__ED_.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_clearing__EL_.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_up__CUU_.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_down__CUD_.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_forward__CUF_.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_cursor_back__CUB_.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_line_wrapping.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_scrolling.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_tabs.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/parsers/ansiParser.spec.ts:0","artifactURI":"reports/ansiParser.spec/should_handle_backspace.jsonl","seed":42}
+{"status":"pass","duration":11,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_control_frame.jsonl","seed":42}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/round-trip_a_Buffer.jsonl","seed":42}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/worker/workerAdapters.spec.ts:0","artifactURI":"reports/workerAdapters.spec/assert_handshake_event_structure.jsonl","seed":42}
+{"status":"pass","duration":6,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/connect_moves_data_1_1.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/split_fans_out_to_multiple_destinations.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/merge_combines_multiple_sources_into_one_destination.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/kernel/kernel.spec.ts:0","artifactURI":"reports/kernel.spec/register_lookup_filters_by_capabilities.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_module_is_not_enabled.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_consistent_value_for_same_module.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/returns_false_when_config_is_disabled.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/checks_module_against_config_modules_when_enabled.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/does_not_emit_when_on___returns_false.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emit_returns_immediately_when_module_is_disabled.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_returns_false_when_module_is_disabled.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_to_console_when_module_is_enabled.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/respects_debug_level_filtering.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/emits_formatted_output_to_console.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/handles_emit_without_payload.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/debug/debug-api.spec.ts:0","artifactURI":"reports/debug-api.spec/shouldEmit_respects_level_hierarchy.jsonl","seed":42}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_render_raw_ANSI_to_stdout.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/renderers/passthroughRenderer.spec.ts:0","artifactURI":"reports/passthroughRenderer.spec/should_handle_ANSI_escape_sequences.jsonl","seed":42}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_write_all_data_to_log_file.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/renderers/loggerRenderer.spec.ts:0","artifactURI":"reports/loggerRenderer.spec/should_append_to_existing_log_file.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_generate_index_json_with_valid_structure.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamp_format.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_totalTests_matching_artifacts_length.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_at_least_one_artifact_entry.jsonl","seed":42}
+{"status":"pass","duration":35,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_structure_for_each_artifact_entry.jsonl","seed":42}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_timestamps_for_each_entry.jsonl","seed":42}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_reference_summary_jsonl_in_artifacts.jsonl","seed":42}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_caseFile_path_for_each_entry.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_location_paths.jsonl","seed":42}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_create_JSONL_file_for_each_test_case.jsonl","seed":42}
+{"status":"pass","duration":7,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_organize_case_files_in_suite_directories.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_contain_valid_JSONL_format.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_begin_event.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_run_event.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_case_end_event_with_payload.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_timestamps_for_all_events.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_chronological_timestamps.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_include_test_error_events_for_failed_tests.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_error-level_log_for_case_end_of_failed_tests.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_summary_jsonl_file.jsonl","seed":42}
+{"status":"fail","duration":11,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_matching_test_count_between_index_and_summary.jsonl","seed":42,"error":"expected 6 to be greater than or equal to 149"}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_valid_JSONL_in_summary_file.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_cross-reference_between_index_and_case_files.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_case_name_in_JSONL_events_matching_test_name.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_handle_test_names_with_special_characters.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_unique_case_file_paths.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_all_case_files_in_reports_directory.jsonl","seed":42}
+{"status":"pass","duration":30,"location":"/srv/repos0/mkolbol/tests/laminar/coreReporter.spec.ts:0","artifactURI":"reports/coreReporter.spec/should_have_consistent_status_values.jsonl","seed":42}
+{"status":"pass","duration":9,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/generates_digest_from_synthetic_logs_with_failures.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_for_passing_tests.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_null_when_disabled.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_correct_summary_statistics.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_JSON_file.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/writes_valid_markdown_file.jsonl","seed":42}
+{"status":"pass","duration":4,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_error_level.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/includes_events_matching_specific_event_name.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_slice_action_with_window.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/applies_redact_action_to_fields.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/respects_priority_order.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_wildcard_patterns_in_event_matching.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/supports_multiple_match_criteria.jsonl","seed":42}
+{"status":"pass","duration":28,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_byte_budget.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/enforces_line_budget.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/keeps_all_events_when_within_budget.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/identifies_error-level_events_as_suspects.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_failure_events.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_correlated_events.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/scores_events_close_to_failure_time.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/limits_suspects_to_top_5.jsonl","seed":42}
+{"status":"pass","duration":17,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/returns_empty_suspects_for_no_failure_events.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_empty_log_file.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_missing_log_file.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/skips_malformed_JSON_lines.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/handles_events_without_optional_fields.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/processes_ingested_Go_test_failures_transparently.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/digest/digest.spec.ts:0","artifactURI":"reports/digest.spec/recognizes_Go_test_fail_events_in_rules.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/adds_nodes_and_emits_events.jsonl","seed":42}
+{"status":"pass","duration":17,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/connects_and_emits_connected.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/split_and_merge_emit_events.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/validator_enforces_directionality_when_set.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/test/state/stateManager.spec.ts:0","artifactURI":"reports/stateManager.spec/exporters_produce_strings.jsonl","seed":42}
+{"status":"pass","duration":39,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_spawn_a_simple_process.jsonl","seed":42}
+{"status":"pass","duration":65,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split__all_destinations_receive_identical_data.jsonl","seed":42}
+{"status":"pass","duration":28,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/registers_and_queries_by_capabilities.jsonl","seed":42}
+{"status":"pass","duration":5,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/marks_in-use_and_back_to_available.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/evicts_after_missed_heartbeats.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/test/hostess.spec.ts:0","artifactURI":"reports/hostess.spec/heartbeat_maintains_liveness.jsonl","seed":42}
+{"status":"pass","duration":33,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_load_configuration.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_if_up___called_without_load__.jsonl","seed":42}
+{"status":"pass","duration":35,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_instantiate_modules_and_register_with_hostess.jsonl","seed":42}
+{"status":"pass","duration":2,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_wire_connections_via_StateManager.jsonl","seed":42}
+{"status":"pass","duration":1,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_support_restartNode.jsonl","seed":42}
+{"status":"pass","duration":0,"location":"/srv/repos0/mkolbol/tests/executor/executor.spec.ts:0","artifactURI":"reports/executor.spec/should_throw_on_restartNode_for_non-existent_node.jsonl","seed":42}
+{"status":"pass","duration":34,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__all_source_data_reaches_destination.jsonl","seed":42}
+{"status":"pass","duration":245,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/merge__no_data_loss_with_concurrent_writes.jsonl","seed":42}
+{"status":"pass","duration":1260,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/split-then-merge__roundtrip_preserves_all_data.jsonl","seed":42}
+{"status":"pass","duration":8,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_split__source_with_zero_destinations_completes.jsonl","seed":42}
+{"status":"pass","duration":3,"location":"/srv/repos0/mkolbol/tests/property/invariants.spec.ts:0","artifactURI":"reports/invariants.spec/empty_merge__destination_with_zero_sources_completes.jsonl","seed":42}
+{"status":"pass","duration":244,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_handle_environment_variables.jsonl","seed":42}
+{"status":"pass","duration":76,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_register_with_Hostess_on_spawn.jsonl","seed":42}
+{"status":"pass","duration":76,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_gracefully_shutdown_with_SIGTERM.jsonl","seed":42}
+{"status":"pass","duration":539,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_restart_on_failure_with__on-failure__policy.jsonl","seed":42}
+{"status":"pass","duration":337,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_not_restart_with__never__policy.jsonl","seed":42}
+{"status":"pass","duration":537,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_respect_maxRestarts_limit.jsonl","seed":42}
+{"status":"pass","duration":34,"location":"/srv/repos0/mkolbol/tests/wrappers/externalServerWrapper.spec.ts:0","artifactURI":"reports/externalServerWrapper.spec/should_provide_process_info.jsonl","seed":42}
diff --git a/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl b/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
index b399e0e..00b94ea 100644
--- a/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
+++ b/reports/workerAdapters.spec/assert_handshake_event_structure.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940118,"lvl":"info","case":"assert handshake event structure","phase":"setup","evt":"case.begin"}
-{"ts":1760291940119,"lvl":"info","case":"assert handshake event structure","phase":"execution","evt":"test.run"}
-{"ts":1760291940120,"lvl":"info","case":"assert handshake event structure","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"assert handshake event structure","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"assert handshake event structure","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"assert handshake event structure","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl b/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
index 2a7e022..3866e62 100644
--- a/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
+++ b/reports/workerAdapters.spec/round-trip_a_Buffer.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940118,"lvl":"info","case":"round-trip a Buffer","phase":"setup","evt":"case.begin"}
-{"ts":1760291940119,"lvl":"info","case":"round-trip a Buffer","phase":"execution","evt":"test.run"}
-{"ts":1760291940120,"lvl":"info","case":"round-trip a Buffer","phase":"teardown","evt":"case.end","payload":{"duration":5,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"round-trip a Buffer","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"round-trip a Buffer","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"round-trip a Buffer","phase":"teardown","evt":"case.end","payload":{"duration":4,"status":"passed"}}
diff --git a/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl b/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
index 47b023d..62386a9 100644
--- a/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
+++ b/reports/workerAdapters.spec/round-trip_a_control_frame.jsonl
@@ -1,3 +1,3 @@
-{"ts":1760291940118,"lvl":"info","case":"round-trip a control frame","phase":"setup","evt":"case.begin"}
-{"ts":1760291940119,"lvl":"info","case":"round-trip a control frame","phase":"execution","evt":"test.run"}
-{"ts":1760291940120,"lvl":"info","case":"round-trip a control frame","phase":"teardown","evt":"case.end","payload":{"duration":15,"status":"passed"}}
+{"ts":1760292486562,"lvl":"info","case":"round-trip a control frame","phase":"setup","evt":"case.begin","env":{"nodeVersion":"v24.9.0","platform":"linux","arch":"x64","os":"Linux 6.8.0-85-generic","seed":42,"envVars":{"NODE_ENV":"test"}},"seed":42}
+{"ts":1760292486563,"lvl":"info","case":"round-trip a control frame","phase":"execution","evt":"test.run"}
+{"ts":1760292486564,"lvl":"info","case":"round-trip a control frame","phase":"teardown","evt":"case.end","payload":{"duration":11,"status":"passed"}}
diff --git a/scripts/laminar-run.ts b/scripts/laminar-run.ts
index 6aad0c3..55cf24a 100644
--- a/scripts/laminar-run.ts
+++ b/scripts/laminar-run.ts
@@ -10,11 +10,24 @@ type SummaryEntry = {
   error?: string;
 };
 
+type StabilityResult = {
+  location: string;
+  runs: number;
+  passes: number;
+  fails: number;
+  score: number; // percentage 0-100
+};
+
 function run(cmd: string, args: string[], env?: Record<string,string>) {
   const res = spawnSync(cmd, args, { stdio: 'inherit', env: { ...process.env, ...env } });
   return res.status ?? 0;
 }
 
+function runSilent(cmd: string, args: string[], env?: Record<string,string>) {
+  const res = spawnSync(cmd, args, { stdio: 'pipe', env: { ...process.env, ...env } });
+  return res.status ?? 0;
+}
+
 function parseSummary(): SummaryEntry[] {
   const path = 'reports/summary.jsonl';
   if (!fs.existsSync(path)) return [];
@@ -38,12 +51,127 @@ function caseFromArtifact(uri?: string): string {
   return m ? m[1] : 'debug.case';
 }
 
+async function runFlakeDetection(reruns: number = 5) {
+  console.log(`\n=== FLAKE DETECTION MODE (${reruns} runs per test) ===\n`);
+  
+  fs.mkdirSync('reports', { recursive: true });
+  
+  // Use fixed seed for reproducibility
+  const seed = '42';
+  const env = { TEST_SEED: seed };
+  
+  const stabilityMap = new Map<string, StabilityResult>();
+  
+  for (let i = 1; i <= reruns; i++) {
+    console.log(`\nRun ${i}/${reruns} (seed: ${seed})...`);
+    
+    // Clean summary before each run
+    if (fs.existsSync('reports/summary.jsonl')) fs.unlinkSync('reports/summary.jsonl');
+    
+    // Run tests silently after first run
+    if (i === 1) {
+      run('npm', ['run', 'test:ci'], env);
+    } else {
+      runSilent('npm', ['run', 'test:ci'], env);
+    }
+    
+    const entries = parseSummary();
+    
+    // Track stability for each test
+    for (const entry of entries) {
+      if (entry.status === 'skip') continue;
+      
+      const loc = entry.location;
+      if (!stabilityMap.has(loc)) {
+        stabilityMap.set(loc, { location: loc, runs: 0, passes: 0, fails: 0, score: 0 });
+      }
+      
+      const stat = stabilityMap.get(loc)!;
+      stat.runs++;
+      if (entry.status === 'pass') {
+        stat.passes++;
+      } else if (entry.status === 'fail') {
+        stat.fails++;
+      }
+    }
+  }
+  
+  // Calculate final scores
+  const results: StabilityResult[] = [];
+  for (const stat of stabilityMap.values()) {
+    stat.score = Math.round((stat.passes / stat.runs) * 100);
+    results.push(stat);
+  }
+  
+  // Sort by score (flakiest first)
+  results.sort((a, b) => a.score - b.score);
+  
+  // Report findings
+  console.log('\n=== STABILITY REPORT ===\n');
+  
+  const flakyTests = results.filter(r => r.score < 100 && r.score > 0);
+  const alwaysFail = results.filter(r => r.score === 0);
+  const stable = results.filter(r => r.score === 100);
+  
+  if (flakyTests.length > 0) {
+    console.log('FLAKY TESTS:');
+    for (const t of flakyTests) {
+      console.log(`  ${t.score}% stable - ${t.location} (${t.passes}/${t.runs} passed)`);
+    }
+    console.log('');
+  }
+  
+  if (alwaysFail.length > 0) {
+    console.log('ALWAYS FAIL:');
+    for (const t of alwaysFail) {
+      console.log(`  ${t.location} (0/${t.runs} passed)`);
+    }
+    console.log('');
+  }
+  
+  console.log(`SUMMARY: ${stable.length} stable, ${flakyTests.length} flaky, ${alwaysFail.length} always fail`);
+  
+  // Save detailed report
+  const reportPath = 'reports/stability-report.json';
+  fs.writeFileSync(reportPath, JSON.stringify({ 
+    seed,
+    reruns,
+    timestamp: new Date().toISOString(),
+    results 
+  }, null, 2));
+  console.log(`\nDetailed report saved to ${reportPath}`);
+  
+  // Exit with error if any flaky tests found
+  if (flakyTests.length > 0 || alwaysFail.length > 0) {
+    process.exit(1);
+  }
+  
+  process.exit(0);
+}
+
 async function main() {
+  // Check for flake detection mode
+  const args = process.argv.slice(2);
+  const flakeDetectIdx = args.findIndex(a => a === '--flake-detect' || a === '--flake');
+  
+  if (flakeDetectIdx !== -1) {
+    // Parse N reruns (default 5)
+    let reruns = 5;
+    if (flakeDetectIdx + 1 < args.length && /^\d+$/.test(args[flakeDetectIdx + 1])) {
+      reruns = parseInt(args[flakeDetectIdx + 1], 10);
+    }
+    await runFlakeDetection(reruns);
+    return;
+  }
+  
   // First pass: fast lane
   fs.mkdirSync('reports', { recursive: true });
   // Clean previous summary
   if (fs.existsSync('reports/summary.jsonl')) fs.unlinkSync('reports/summary.jsonl');
-  const status1 = run('npm', ['run', 'test:ci']);
+  
+  // Set deterministic seed if not already set
+  const testEnv = process.env.TEST_SEED ? {} : { TEST_SEED: '42' };
+  const status1 = run('npm', ['run', 'test:ci'], testEnv);
 
   const entries = parseSummary();
   const fails = entries.filter(e => e.status === 'fail');
@@ -58,7 +186,12 @@ async function main() {
     const isPty = /ptyServerWrapper\.spec\.ts|multiModalOutput\.spec\.ts/.test(file);
     const suite = suiteFromLocation(f.location);
     const caseName = caseFromArtifact(f.artifactURI);
-    const env = { LAMINAR_DEBUG: '1', LAMINAR_SUITE: suite, LAMINAR_CASE: caseName };
+    const env = { 
+      LAMINAR_DEBUG: '1', 
+      LAMINAR_SUITE: suite, 
+      LAMINAR_CASE: caseName,
+      ...(process.env.TEST_SEED ? {} : { TEST_SEED: '42' })
+    };
     if (isPty) {
       // Rerun pty lane for that file
       overall = run('vitest', ['run', '--pool=forks', '--poolOptions.forks.singleFork=true', file, '--reporter=./dist/test/reporter/jsonlReporter.js'], env) || overall;
diff --git a/src/digest/codeframe.ts b/src/digest/codeframe.ts
new file mode 100644
index 0000000..d1c440d
--- /dev/null
+++ b/src/digest/codeframe.ts
@@ -0,0 +1,211 @@
+import * as fs from 'node:fs';
+import * as path from 'node:path';
+
+export interface CodeFrame {
+  file: string;
+  line: number;
+  column?: number;
+  source: string[];
+  context: {
+    before: string[];
+    focus: string;
+    after: string[];
+  };
+}
+
+export interface StackFrame {
+  file?: string;
+  line?: number;
+  column?: number;
+  function?: string;
+}
+
+export class CodeFrameExtractor {
+  private contextLines: number = 2;
+  private sourcemapCache: Map<string, any> = new Map();
+
+  constructor(contextLines: number = 2) {
+    this.contextLines = contextLines;
+  }
+
+  extractFromStack(stack: string): CodeFrame[] {
+    const frames: CodeFrame[] = [];
+    const parsedFrames = this.parseStackTrace(stack);
+
+    for (const frame of parsedFrames) {
+      if (!frame.file || !frame.line) {
+        continue;
+      }
+
+      const resolvedFrame = this.resolveSourceMap(frame);
+      const codeFrame = this.extractCodeFrame(resolvedFrame);
+
+      if (codeFrame) {
+        frames.push(codeFrame);
+        if (frames.length >= 3) break;
+      }
+    }
+
+    return frames;
+  }
+
+  private parseStackTrace(stack: string): StackFrame[] {
+    const frames: StackFrame[] = [];
+    const lines = stack.split('\n');
+
+    for (const line of lines) {
+      const frame = this.parseStackLine(line);
+      if (frame) {
+        frames.push(frame);
+      }
+    }
+
+    return frames;
+  }
+
+  private parseStackLine(line: string): StackFrame | null {
+    const patterns = [
+      /at\s+(?:(.+?)\s+\()?(.+?):(\d+):(\d+)\)?/,
+      /^\s*(.+?)@(.+?):(\d+):(\d+)/,
+      /^\s*at\s+(.+?):(\d+):(\d+)/,
+    ];
+
+    for (const pattern of patterns) {
+      const match = line.match(pattern);
+      if (match) {
+        if (match.length === 5) {
+          return {
+            function: match[1]?.trim(),
+            file: match[2],
+            line: parseInt(match[3], 10),
+            column: parseInt(match[4], 10),
+          };
+        } else if (match.length === 4) {
+          return {
+            file: match[1],
+            line: parseInt(match[2], 10),
+            column: parseInt(match[3], 10),
+          };
+        }
+      }
+    }
+
+    return null;
+  }
+
+  private resolveSourceMap(frame: StackFrame): StackFrame {
+    if (!frame.file) return frame;
+
+    const mapFile = `${frame.file}.map`;
+    if (!fs.existsSync(mapFile)) {
+      const tsFile = frame.file.replace(/\.js$/, '.ts');
+      if (fs.existsSync(tsFile)) {
+        return { ...frame, file: tsFile };
+      }
+      return frame;
+    }
+
+    try {
+      let sourceMap = this.sourcemapCache.get(mapFile);
+      if (!sourceMap) {
+        const mapContent = fs.readFileSync(mapFile, 'utf-8');
+        sourceMap = JSON.parse(mapContent);
+        this.sourcemapCache.set(mapFile, sourceMap);
+      }
+
+      if (sourceMap.sources && sourceMap.sources.length > 0) {
+        const originalFile = path.resolve(
+          path.dirname(frame.file),
+          sourceMap.sources[0]
+        );
+        
+        if (fs.existsSync(originalFile)) {
+          return { ...frame, file: originalFile };
+        }
+      }
+    } catch (e) {
+    }
+
+    return frame;
+  }
+
+  private extractCodeFrame(frame: StackFrame): CodeFrame | null {
+    if (!frame.file || !frame.line) return null;
+
+    try {
+      if (!fs.existsSync(frame.file)) {
+        return null;
+      }
+
+      const content = fs.readFileSync(frame.file, 'utf-8');
+      const lines = content.split('\n');
+
+      if (frame.line > lines.length || frame.line < 1) {
+        return null;
+      }
+
+      const focusLine = frame.line - 1;
+      const startLine = Math.max(0, focusLine - this.contextLines);
+      const endLine = Math.min(lines.length - 1, focusLine + this.contextLines);
+
+      const before: string[] = [];
+      for (let i = startLine; i < focusLine; i++) {
+        before.push(lines[i]);
+      }
+
+      const focus = lines[focusLine];
+
+      const after: string[] = [];
+      for (let i = focusLine + 1; i <= endLine; i++) {
+        after.push(lines[i]);
+      }
+
+      return {
+        file: frame.file,
+        line: frame.line,
+        column: frame.column,
+        source: lines.slice(startLine, endLine + 1),
+        context: {
+          before,
+          focus,
+          after,
+        },
+      };
+    } catch (e) {
+      return null;
+    }
+  }
+
+  formatCodeFrame(codeFrame: CodeFrame): string {
+    const lines: string[] = [];
+    const lineNumWidth = String(codeFrame.line + this.contextLines).length;
+
+    lines.push(`  at ${codeFrame.file}:${codeFrame.line}${codeFrame.column ? `:${codeFrame.column}` : ''}`);
+
+    let currentLine = codeFrame.line - codeFrame.context.before.length;
+
+    for (const line of codeFrame.context.before) {
+      const lineNum = String(currentLine).padStart(lineNumWidth, ' ');
+      lines.push(`  ${lineNum} | ${line}`);
+      currentLine++;
+    }
+
+    const focusLineNum = String(currentLine).padStart(lineNumWidth, ' ');
+    lines.push(`> ${focusLineNum} | ${codeFrame.context.focus}`);
+    
+    if (codeFrame.column) {
+      const indicator = ' '.repeat(lineNumWidth + 3 + (codeFrame.column - 1)) + '^';
+      lines.push(indicator);
+    }
+    
+    currentLine++;
+
+    for (const line of codeFrame.context.after) {
+      const lineNum = String(currentLine).padStart(lineNumWidth, ' ');
+      lines.push(`  ${lineNum} | ${line}`);
+      currentLine++;
+    }
+
+    return lines.join('\n');
+  }
+}
diff --git a/src/digest/generator.ts b/src/digest/generator.ts
index 4b41c5a..db2ffa9 100644
--- a/src/digest/generator.ts
+++ b/src/digest/generator.ts
@@ -1,5 +1,6 @@
 import * as fs from 'node:fs';
 import * as path from 'node:path';
+import { CodeFrameExtractor, CodeFrame } from './codeframe.js';
 
 export interface DigestConfig {
   budget?: {
@@ -23,9 +24,10 @@ export interface DigestRule {
 }
 
 export interface DigestAction {
-  type: 'include' | 'slice' | 'redact';
+  type: 'include' | 'slice' | 'redact' | 'codeframe';
   window?: number;
   field?: string | string[];
+  contextLines?: number;
 }
 
 export interface DigestEvent {
@@ -59,6 +61,7 @@ export interface DigestOutput {
     budgetLimit: number;
   };
   suspects?: SuspectEvent[];
+  codeframes?: CodeFrame[];
   events: DigestEvent[];
 }
 
@@ -81,12 +84,12 @@ const DEFAULT_CONFIG: DigestConfig = {
   rules: [
     {
       match: { lvl: 'error' },
-      actions: [{ type: 'include' }],
+      actions: [{ type: 'include' }, { type: 'codeframe', contextLines: 2 }],
       priority: 10,
     },
     {
       match: { evt: 'assert.fail' },
-      actions: [{ type: 'include' }, { type: 'slice', window: 10 }],
+      actions: [{ type: 'include' }, { type: 'slice', window: 10 }, { type: 'codeframe', contextLines: 2 }],
       priority: 9,
     },
   ],
@@ -94,9 +97,11 @@ const DEFAULT_CONFIG: DigestConfig = {
 
 export class DigestGenerator {
   private config: DigestConfig;
+  private codeframeExtractor: CodeFrameExtractor;
 
   constructor(config?: DigestConfig) {
     this.config = config || DEFAULT_CONFIG;
+    this.codeframeExtractor = new CodeFrameExtractor(2);
   }
 
   static loadConfig(configPath: string = 'laminar.config.json'): DigestConfig {
@@ -131,9 +136,14 @@ export class DigestGenerator {
     const processedEvents = this.applyRules(events);
     const budgetedEvents = this.enforceBudget(processedEvents);
     const suspects = this.identifySuspects(events);
+    const codeframes = this.extractCodeFrames(events);
 
     const budgetLimit = (this.config.budget?.kb || 10) * 1024;
-    const budgetUsed = JSON.stringify(budgetedEvents).length;
+    let budgetUsed = JSON.stringify(budgetedEvents).length;
+    
+    if (codeframes && codeframes.length > 0) {
+      budgetUsed += JSON.stringify(codeframes).length;
+    }
 
     return {
       case: caseName,
@@ -149,6 +159,7 @@ export class DigestGenerator {
         budgetLimit,
       },
       suspects,
+      codeframes: codeframes && codeframes.length > 0 ? codeframes : undefined,
       events: budgetedEvents,
     };
   }
@@ -292,6 +303,42 @@ export class DigestGenerator {
     return currentEvents;
   }
 
+  private extractCodeFrames(events: DigestEvent[]): CodeFrame[] {
+    if (!this.config.rules) {
+      return [];
+    }
+
+    const shouldExtractCodeframes = this.config.rules.some(rule =>
+      rule.actions.some(action => action.type === 'codeframe')
+    );
+
+    if (!shouldExtractCodeframes) {
+      return [];
+    }
+
+    const codeframes: CodeFrame[] = [];
+    const errorEvents = events.filter(e => 
+      e.lvl === 'error' && 
+      e.payload && 
+      typeof e.payload === 'object' && 
+      'stack' in e.payload
+    );
+
+    for (const event of errorEvents) {
+      const payload = event.payload as { stack?: string };
+      if (payload.stack) {
+        const frames = this.codeframeExtractor.extractFromStack(payload.stack);
+        codeframes.push(...frames);
+        
+        if (codeframes.length >= 5) {
+          break;
+        }
+      }
+    }
+
+    return codeframes.slice(0, 5);
+  }
+
   private identifySuspects(events: DigestEvent[]): SuspectEvent[] {
     if (events.length === 0) {
       return [];
@@ -407,6 +454,16 @@ export class DigestGenerator {
       lines.push('');
     }
 
+    if (digest.codeframes && digest.codeframes.length > 0) {
+      lines.push('## Code Frames');
+      for (const frame of digest.codeframes) {
+        lines.push('```');
+        lines.push(this.codeframeExtractor.formatCodeFrame(frame));
+        lines.push('```');
+        lines.push('');
+      }
+    }
+
     if (digest.events.length > 0) {
       lines.push('## Events');
       lines.push('```json');
diff --git a/src/test/reporter/jsonlReporter.ts b/src/test/reporter/jsonlReporter.ts
index 5cbcd5a..c698146 100644
--- a/src/test/reporter/jsonlReporter.ts
+++ b/src/test/reporter/jsonlReporter.ts
@@ -1,13 +1,25 @@
 import * as fs from 'fs';
 import * as path from 'path';
+import * as os from 'os';
 import type { File, Reporter, Task, Vitest } from 'vitest';
 
+interface RuntimeEnvironment {
+  nodeVersion: string;
+  platform: string;
+  arch: string;
+  os: string;
+  seed?: number;
+  envVars?: Record<string, string>;
+}
+
 interface TestSummary {
   status: 'pass' | 'fail' | 'skip';
   duration: number;
   location: string;
   artifactURI?: string;
   error?: string;
+  seed?: number;
+  env?: RuntimeEnvironment;
 }
 
 interface ArtifactIndexEntry {
@@ -27,6 +39,7 @@ interface ArtifactIndex {
   generated: string;
   totalTests: number;
   artifacts: ArtifactIndexEntry[];
+  environment: RuntimeEnvironment;
 }
 
 export default class JSONLReporter implements Reporter {
@@ -37,6 +50,37 @@ export default class JSONLReporter implements Reporter {
   private processedTests = new Set<string>();
   private indexEntries: ArtifactIndexEntry[] = [];
   private caseStreams = new Map<string, fs.WriteStream>();
+  private environment: RuntimeEnvironment;
+  private testSeed: number;
+
+  constructor() {
+    // Fixed seed for determinism (can be overridden via env var)
+    this.testSeed = process.env.TEST_SEED 
+      ? parseInt(process.env.TEST_SEED, 10)
+      : 42;
+    
+    this.environment = this.captureEnvironment();
+  }
+
+  private captureEnvironment(): RuntimeEnvironment {
+    const relevantEnvVars: Record<string, string> = {};
+    const envKeys = ['CI', 'NODE_ENV', 'TEST_SEED', 'LAMINAR_DEBUG', 'LAMINAR_SUITE', 'LAMINAR_CASE'];
+    
+    for (const key of envKeys) {
+      if (process.env[key]) {
+        relevantEnvVars[key] = process.env[key]!;
+      }
+    }
+
+    return {
+      nodeVersion: process.version,
+      platform: process.platform,
+      arch: process.arch,
+      os: `${os.type()} ${os.release()}`,
+      seed: this.testSeed,
+      envVars: Object.keys(relevantEnvVars).length > 0 ? relevantEnvVars : undefined,
+    };
+  }
 
   onInit(ctx: Vitest): void {
     this.ctx = ctx;
@@ -47,6 +91,14 @@ export default class JSONLReporter implements Reporter {
     }
     this.summaryStream = fs.createWriteStream(this.summaryPath, { flags: 'a' });
     this.indexEntries = [];
+    
+    // Write environment info to summary on init
+    if (this.summaryStream) {
+      this.summaryStream.write(JSON.stringify({
+        type: 'environment',
+        ...this.environment
+      }) + '\n');
+    }
   }
 
   onCollected(): void {
@@ -121,6 +173,7 @@ export default class JSONLReporter implements Reporter {
       duration,
       location,
       artifactURI,
+      seed: this.testSeed,
     };
 
     if (result.errors && result.errors.length > 0) {
@@ -167,13 +220,15 @@ export default class JSONLReporter implements Reporter {
     const ts = Date.now();
 
     // Write test lifecycle events
-    // 1. Test begin event
+    // 1. Test begin event with environment and seed
     stream.write(JSON.stringify({
       ts,
       lvl: 'info',
       case: caseName,
       phase: 'setup',
-      evt: 'case.begin'
+      evt: 'case.begin',
+      env: this.environment,
+      seed: this.testSeed
     }) + '\n');
 
     // 2. Test execution event
@@ -223,6 +278,7 @@ export default class JSONLReporter implements Reporter {
       generated: new Date().toISOString(),
       totalTests: this.indexEntries.length,
       artifacts: this.indexEntries,
+      environment: this.environment,
     };
 
     fs.writeFileSync(this.indexPath, JSON.stringify(index, null, 2));
