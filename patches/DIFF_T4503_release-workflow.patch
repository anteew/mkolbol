diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
new file mode 100644
index 0000000..682869e
--- /dev/null
+++ b/.github/workflows/release.yml
@@ -0,0 +1,89 @@
+name: Release & Publish
+
+on:
+  push:
+    tags:
+      - 'v*.*.*'
+
+permissions:
+  contents: write
+  id-token: write
+
+jobs:
+  release:
+    name: Release & Publish to NPM
+    runs-on: ubuntu-latest
+    
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+      
+      - name: Setup Node.js
+        uses: actions/setup-node@v4
+        with:
+          node-version: 20
+          cache: 'npm'
+          registry-url: 'https://registry.npmjs.org'
+      
+      - name: Install dependencies
+        run: npm ci
+      
+      - name: Build
+        run: npm run build
+      
+      - name: Run tests
+        run: npm run test:ci
+      
+      - name: Verify package contents
+        run: |
+          npm pack --dry-run
+          echo "Package contents verified"
+      
+      - name: Extract version from tag
+        id: version
+        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
+      
+      - name: Verify package.json version matches tag
+        run: |
+          PACKAGE_VERSION=$(node -p "require('./package.json').version")
+          TAG_VERSION="${{ steps.version.outputs.VERSION }}"
+          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
+            echo "Error: package.json version ($PACKAGE_VERSION) does not match tag version ($TAG_VERSION)"
+            exit 1
+          fi
+          echo "Version verified: $PACKAGE_VERSION"
+      
+      - name: Publish to NPM
+        run: npm publish --provenance --access public
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+      
+      - name: Create GitHub Release
+        uses: actions/github-script@v7
+        with:
+          script: |
+            const fs = require('fs');
+            const tag = context.ref.replace('refs/tags/', '');
+            const version = tag.replace('v', '');
+            
+            // Extract release notes from README or use default
+            let releaseNotes = `## Release ${version}\n\n`;
+            releaseNotes += `Published to NPM: https://www.npmjs.com/package/mkolbol/v/${version}\n\n`;
+            releaseNotes += `### Installation\n\n`;
+            releaseNotes += '```bash\n';
+            releaseNotes += `npm install mkolbol@${version}\n`;
+            releaseNotes += '```\n\n';
+            releaseNotes += `### Changes\n\n`;
+            releaseNotes += `See [CHANGELOG](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/v${version}) for details.`;
+            
+            await github.rest.repos.createRelease({
+              owner: context.repo.owner,
+              repo: context.repo.repo,
+              tag_name: tag,
+              name: `Release ${version}`,
+              body: releaseNotes,
+              draft: false,
+              prerelease: version.includes('-') || version.includes('alpha') || version.includes('beta') || version.includes('rc')
+            });
+            
+            core.notice(`âœ… Published mkolbol@${version} to NPM and created GitHub release`);
diff --git a/README.md b/README.md
index ee6dea4..dad2511 100644
--- a/README.md
+++ b/README.md
@@ -15,7 +15,7 @@
 Get started with Laminar testing in 5 minutes:
 
 ```bash
-# Install
+# Install locally in your project
 npm install mkolbol
 
 # Initialize Laminar config
@@ -42,11 +42,11 @@ npx lam repro
 ```
 
 **Basic Commands:**
-- `lam init` â€” Create laminar.config.json with defaults
-- `lam run [--lane ci|pty|auto] [--filter <pattern>]` â€” Execute tests with structured logging
-- `lam summary` â€” List all test results
-- `lam digest` â€” Generate failure analysis digests
-- `lam show` â€” Inspect test artifacts and events
+- `npx lam init` â€” Create laminar.config.json with defaults
+- `npx lam run [--lane ci|pty|auto] [--filter <pattern>]` â€” Execute tests with structured logging
+- `npx lam summary` â€” List all test results
+- `npx lam digest` â€” Generate failure analysis digests
+- `npx lam show` â€” Inspect test artifacts and events
 
 ðŸ“– **Full Documentation:** [docs/testing/laminar.md](docs/testing/laminar.md)
 
@@ -98,42 +98,61 @@ The RFC is organized into focused documents:
 
 ## Installation
 
+### Local Installation (Recommended)
+
 ```bash
+# Install in your project
 npm install mkolbol
-# or
-pnpm add mkolbol
+
+# Use with npx (no global install needed)
+npx lam init
+npx lam run --lane auto
+npx lam digest
 ```
 
-**Global Installation:**
+### Global Installation
 
 ```bash
 # Install globally
 npm install -g mkolbol
 
-# Use lam CLI from anywhere
+# Use lam command directly (without npx)
+lam init
 lam run --lane auto
 lam digest
 lam repro --bundle
 ```
 
-**npx Usage (No Installation):**
+### npx Usage (No Installation Required)
 
 ```bash
-# Run without installing
+# Run commands without installing
+npx mkolbol lam init
 npx mkolbol lam run --lane auto
 npx mkolbol lam digest
-npx mkolbol lam repro --bundle
 
-# Alternative: Direct lam command with npx
-npx -y mkolbol lam run --lane auto
+# Force latest version with -y flag
+npx -y mkolbol@latest lam run --lane auto
 ```
 
-**Note:** Experimental preview. The Stream Kernel is implemented minimally in this repo with runnable demos; APIs may change.
+### Troubleshooting
+
+**Command not found: lam**
+- Local install: Use `npx lam` instead of `lam`
+- Global install: Ensure npm global bin is in PATH: `npm config get prefix`
+
+**npx hangs or prompts for confirmation**
+- Add `-y` flag to auto-confirm: `npx -y mkolbol lam init`
 
-Requirements
+**Wrong version executing**
+- Clear npx cache: `npx clear-npx-cache`
+- Force specific version: `npx mkolbol@0.2.0 lam init`
 
+**Requirements:**
 - Node 20+ (tested on 20.x and 24.x)
-- macOS or Linux (Windows later)
+- macOS or Linux (Windows support coming soon)
+
+**Note:** Experimental preview. The Stream Kernel is implemented minimally in this repo with runnable demos; APIs may change.
 
 ## Example (Future API)
 
@@ -659,6 +678,28 @@ Key documents:
 
 > **Note:** There is also a [single-file version](STREAM_KERNEL_RFC.md) of the Stream Kernel RFC, but the modular version is recommended for easier navigation and maintenance.
 
+## Publishing
+
+### GitHub Actions Secrets
+
+The following secrets must be configured in the repository settings for automated releases:
+
+- **NPM_TOKEN** - NPM automation token with publish permissions
+  - Create at https://www.npmjs.com/settings/[username]/tokens
+  - Select "Automation" token type
+  - Required permissions: Read and write
+
+### Release Process
+
+1. Update version in package.json
+2. Commit changes
+3. Create and push a tag: `git tag v1.0.0 && git push origin v1.0.0`
+4. GitHub Actions will automatically:
+   - Build and test the package
+   - Verify package contents
+   - Publish to NPM with provenance
+   - Create a GitHub release with notes
+
 ## License
 
 MIT - See [LICENSE](./LICENSE)
