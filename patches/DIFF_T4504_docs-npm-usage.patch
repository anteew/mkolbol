diff --git a/README.md b/README.md
index ee6dea4..dad2511 100644
--- a/README.md
+++ b/README.md
@@ -15,7 +15,7 @@
 Get started with Laminar testing in 5 minutes:
 
 ```bash
-# Install
+# Install locally in your project
 npm install mkolbol
 
 # Initialize Laminar config
@@ -42,11 +42,11 @@ npx lam repro
 ```
 
 **Basic Commands:**
-- `lam init` â€” Create laminar.config.json with defaults
-- `lam run [--lane ci|pty|auto] [--filter <pattern>]` â€” Execute tests with structured logging
-- `lam summary` â€” List all test results
-- `lam digest` â€” Generate failure analysis digests
-- `lam show` â€” Inspect test artifacts and events
+- `npx lam init` â€” Create laminar.config.json with defaults
+- `npx lam run [--lane ci|pty|auto] [--filter <pattern>]` â€” Execute tests with structured logging
+- `npx lam summary` â€” List all test results
+- `npx lam digest` â€” Generate failure analysis digests
+- `npx lam show` â€” Inspect test artifacts and events
 
 ðŸ“– **Full Documentation:** [docs/testing/laminar.md](docs/testing/laminar.md)
 
@@ -98,42 +98,61 @@ The RFC is organized into focused documents:
 
 ## Installation
 
+### Local Installation (Recommended)
+
 ```bash
+# Install in your project
 npm install mkolbol
-# or
-pnpm add mkolbol
+
+# Use with npx (no global install needed)
+npx lam init
+npx lam run --lane auto
+npx lam digest
 ```
 
-**Global Installation:**
+### Global Installation
 
 ```bash
 # Install globally
 npm install -g mkolbol
 
-# Use lam CLI from anywhere
+# Use lam command directly (without npx)
+lam init
 lam run --lane auto
 lam digest
 lam repro --bundle
 ```
 
-**npx Usage (No Installation):**
+### npx Usage (No Installation Required)
 
 ```bash
-# Run without installing
+# Run commands without installing
+npx mkolbol lam init
 npx mkolbol lam run --lane auto
 npx mkolbol lam digest
-npx mkolbol lam repro --bundle
 
-# Alternative: Direct lam command with npx
-npx -y mkolbol lam run --lane auto
+# Force latest version with -y flag
+npx -y mkolbol@latest lam run --lane auto
 ```
 
-**Note:** Experimental preview. The Stream Kernel is implemented minimally in this repo with runnable demos; APIs may change.
+### Troubleshooting
+
+**Command not found: lam**
+- Local install: Use `npx lam` instead of `lam`
+- Global install: Ensure npm global bin is in PATH: `npm config get prefix`
+
+**npx hangs or prompts for confirmation**
+- Add `-y` flag to auto-confirm: `npx -y mkolbol lam init`
 
-Requirements
+**Wrong version executing**
+- Clear npx cache: `npx clear-npx-cache`
+- Force specific version: `npx mkolbol@0.2.0 lam init`
 
+**Requirements:**
 - Node 20+ (tested on 20.x and 24.x)
-- macOS or Linux (Windows later)
+- macOS or Linux (Windows support coming soon)
+
+**Note:** Experimental preview. The Stream Kernel is implemented minimally in this repo with runnable demos; APIs may change.
 
 ## Example (Future API)
 
@@ -659,6 +678,28 @@ Key documents:
 
 > **Note:** There is also a [single-file version](STREAM_KERNEL_RFC.md) of the Stream Kernel RFC, but the modular version is recommended for easier navigation and maintenance.
 
+## Publishing
+
+### GitHub Actions Secrets
+
+The following secrets must be configured in the repository settings for automated releases:
+
+- **NPM_TOKEN** - NPM automation token with publish permissions
+  - Create at https://www.npmjs.com/settings/[username]/tokens
+  - Select "Automation" token type
+  - Required permissions: Read and write
+
+### Release Process
+
+1. Update version in package.json
+2. Commit changes
+3. Create and push a tag: `git tag v1.0.0 && git push origin v1.0.0`
+4. GitHub Actions will automatically:
+   - Build and test the package
+   - Verify package contents
+   - Publish to NPM with provenance
+   - Create a GitHub release with notes
+
 ## License
 
 MIT - See [LICENSE](./LICENSE)
diff --git a/docs/testing/laminar.md b/docs/testing/laminar.md
index 4b6df21..73cfb36 100644
--- a/docs/testing/laminar.md
+++ b/docs/testing/laminar.md
@@ -7,7 +7,7 @@ Laminar is a branded, structured testing system for flowâ€‘based applications. I
 ### Installation & First Run
 
 ```bash
-# 1. Install
+# 1. Install locally in your project (recommended)
 npm install mkolbol
 
 # 2. Initialize Laminar config
@@ -20,10 +20,23 @@ npx lam run --lane auto
 npx lam summary
 ```
 
-**Using npx (no installation):**
+**Alternative: Using npx without installation:**
 ```bash
+# Run commands directly without installing
 npx mkolbol lam init
 npx mkolbol lam run --lane auto
+npx mkolbol lam summary
+```
+
+**Global installation option:**
+```bash
+# Install globally for 'lam' command everywhere
+npm install -g mkolbol
+
+# Use without npx prefix
+lam init
+lam run --lane auto
+lam summary
 ```
 
 ### Analyze Failures
@@ -41,14 +54,19 @@ npx lam repro
 
 ### Basic Commands
 
-| Command | Purpose |
-|---------|---------|
-| `lam init` | Create laminar.config.json with defaults |
-| `lam run` | Execute tests with structured logging |
-| `lam summary` | List all test results |
-| `lam digest` | Generate failure analysis digests |
-| `lam show` | Inspect test artifacts and events |
-| `lam repro` | Get repro commands for failures |
+| Command | Purpose | Example |
+|---------|---------|---------|
+| `npx lam init` | Create laminar.config.json with defaults | `npx lam init --template node-defaults` |
+| `npx lam run` | Execute tests with structured logging | `npx lam run --lane ci --filter kernel` |
+| `npx lam summary` | List all test results | `npx lam summary --hints` |
+| `npx lam digest` | Generate failure analysis digests | `npx lam digest --cases kernel.spec/test1` |
+| `npx lam show` | Inspect test artifacts and events | `npx lam show --case kernel.spec/test1` |
+| `npx lam repro` | Get repro commands for failures | `npx lam repro --bundle` |
+
+**Usage Notes:**
+- **Local install**: Use `npx lam` prefix for all commands
+- **Global install**: Use `lam` directly (no `npx` needed)
+- **No install**: Use `npx mkolbol lam` prefix (downloads on-demand)
 
 **Quick Tips:**
 - All artifacts â†’ `reports/` directory
