diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_1.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_1.md
new file mode 100644
index 0000000..891a8f7
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_1.md
@@ -0,0 +1,158 @@
+# Danny and Vega: Consultation About Project — Doc 1
+
+Version: 1.0
+Date Context: 2025-01-10 (conversation start)
+Scope: Technical summary of the shared “Micro Kernel: Architecture Vision” without recommendations
+
+## Executive Summary
+
+The project is a microkernel-based system for capturing, transforming, and rendering terminal I/O using a “pure plumbing” model: the kernel provides only pipes and service discovery; all semantics, protocols, and behaviors live in independently composable modules. While terminal I/O is the proving ground (PTY-first), the kernel is intended as a reusable, transport-agnostic foundation suitable for many projects. A parallel ecosystem of “GNU Hurd–like servers” (modules) supplies features without kernel changes.
+
+Core idea: treat terminal I/O as streams of bytes flowing through standard Node.js Duplex streams; compose modules for parsing, routing, rendering, recording, input, and networking. The same session can feed multiple outputs and accept multiple inputs concurrently.
+
+## Key Design Principles
+
+- Minimal kernel: ~60 lines. Pipes + connect/split/merge + service registry.
+- Maximum flexibility: semantics live in modules, not the kernel.
+- Pure streams: standard Node.js Duplex with backpressure; no custom framing in core.
+- Composability: arbitrary topologies from simple parts (fan-in/fan-out).
+- Transport agnostic: serial, PTY, sockets, shared memory, etc.
+- Start simple, scale complex: from VT100 replica to multi-modal systems.
+
+## What Makes It Different
+
+- Terminal as data-flow: raw byte streams, kernel as “physical layer”.
+- Modules implement higher layers (framing, parsing, routing, congestion control, rendering).
+- Multi-input (keyboard, voice, MCP, network) and multi-output (browser, MP4, TTS, Braille) compose naturally.
+- Same session can be rendered in multiple modalities simultaneously.
+
+## Design Philosophy
+
+- Mach/microkernel analogy: mechanism (kernel plumbing) vs policy (modules).
+- Seven-layer mapping: the kernel corresponds to “physical”; all upper-layer concerns are module territory (framing, error detection, transport, session, presentation, application).
+- Kernel answers only: carrier exists, data can flow, provider discovery.
+- Kernel explicitly does not define: data formats, congestion strategies, parsing, retries, domain semantics.
+
+## Core Architecture
+
+Kernel surface (conceptual):
+- Pipe management: `createPipe()` returns a Duplex; `connect(from,to)` pipes streams.
+- Stream operations: `split(source, [dests...])`, `merge([sources...], dest)`.
+- Service registry: `register(name, capabilities, pipe)`, `lookup(query)`.
+
+Pipes:
+- A pipe is a standard Node.js Duplex (Readable+Writable) with built-in backpressure and `pipe()` composition.
+- Optional debugging/metadata may be associated, but the fundamental contract is “just streams.”
+
+Modules:
+- Shape: `{ id, type: 'input'|'source'|'transform'|'output', init(), destroy(), inputPipe?, outputPipe? }`.
+- Types:
+  - Input: generates data (output only).
+  - Source: interactive processes (PTY, Docker)—both input and output.
+  - Transform: processes data (both input and output).
+  - Output: consumes data (input only).
+
+Service Registry & Capabilities:
+- Registration includes capability descriptors: `accepts`, `produces`, `type`, optional `features`.
+- Discovery via queries: filter by `accepts`, `produces`, `type`, and `features` to obtain pipes.
+- Allows multiple providers for the same capability and dynamic selection.
+
+## Canonical Data Flows (as described)
+
+1) Minimal VT100 replica
+- Keyboard → PTY → Screen (raw bytes end-to-end, no transforms).
+
+2) Multi-input fan-in
+- Keyboard + Voice + MCP → Merge → PTY → Screen.
+
+3) Multi-output fan-out
+- PTY → Parser → [Browser, MP4, TTS, Braille] (simultaneous renderings).
+
+4) Dual-path (raw + parsed)
+- PTY → Screen (raw, fast path)
+- PTY → Parser → MP4 (structured, slower path)
+
+5) Remote viewer (read-only)
+- Remote PTY → Network → [Screen, TTS].
+
+## Illustrative Module Sketches (as conveyed)
+
+- KeyboardInput (input): reads from stdin (raw mode), writes bytes to an output pipe; registers `produces: ['raw-input']`.
+- Local/Docker PTY (source): spawns a shell or container TTY; writes PTY output to `outputPipe`, consumes input from `inputPipe`; registers `accepts: ['raw-input'], produces: ['raw-ansi']` with `features: ['pty', ...]`.
+- XtermParser (transform): consumes raw ANSI, produces structured terminal state (e.g., buffer, cursor, timestamp) for downstream consumers.
+- MP4Recorder (output): consumes structured terminal state, renders frames to a canvas, and encodes with ffmpeg to MP4.
+
+## Stated Design Principles (reiterated)
+
+- Separation of concerns: kernel never contains protocol/semantic logic.
+- Composability over features: add capabilities by composing modules, not by expanding core.
+- Pay for what you use: zero-overhead fast paths when transforms aren’t present.
+- Fail gracefully: module failures don’t bring down the topology; others continue.
+- Testability first: modules testable in isolation; deterministic composition tests.
+- Configuration over code: complex topologies representable declaratively (e.g., YAML).
+
+## Comparisons (positioning)
+
+- vs traditional terminal emulators: microkernel + modules vs monolith; easier extensibility, multi-output, built-in recording via modules.
+- vs multiplexers (tmux/screen): data-flow pipeline vs session manager; independent multi-outputs and inputs.
+- vs PTY wrappers (script/asciinema): full I/O pipeline, real-time multi-output, multiple input sources.
+- vs container terminals (docker exec): adds multi-input, transforms, recording, and networked outputs via modules.
+
+## Implementation Roadmap (phased)
+
+Phase 1: core kernel + keyboard + local PTY + terminal output; config loader; basic tests; success = run bash interactively.
+
+Phase 2: demonstrate composability: XtermParser, BrowserOutput (WebSocket), MP4Recorder; lifecycle and registry maturity; success = browser + MP4 simultaneously.
+
+Phase 3: advanced inputs: Whisper voice input, MCP input; merge inputs; optional arbitration modules; success = commands from keyboard/voice/MCP feed same PTY.
+
+Phase 4: Docker integration: DockerPTY; lifecycle, volumes, network; success = containerized interactive session.
+
+Phase 5: more outputs: TTS, Braille, GIF, JSON stream; success = 5+ outputs concurrently.
+
+Phase 6: browser extension: DevTools panel, native messaging to kernel, MCP tools; success = Claude Code in DevTools with control.
+
+Phase 7: network modules: WebSocket transport, SSH session, viewer mode, auth; success = remote viewing/control.
+
+Phase 8: advanced features: recording/replay, time-travel, config UI, marketplace concept, perf and docs; production readiness.
+
+## Extensibility & Potential Modules (examples)
+
+- Inputs: GameController, Gesture, Scripted, REST API, MIDI.
+- Sources: KubernetesPod, VMSerial, QEMUMonitor, GDBSession, REPL.
+- Transforms: ANSIStripper, MarkdownConverter, SyntaxHighlighter, Encryptor, Compressor, Translator, OCR.
+- Outputs: Slack/Discord/Twitch/YouTube, S3Uploader, EmailDigest, DB Logger, Prometheus, Syslog.
+- Transports: WebSocket, Unix socket, shared memory, serial, gRPC, QUIC, Bluetooth.
+
+## Security Considerations (summarized)
+
+- Isolation via modules; stronger isolation via processes/containers/threads when needed.
+- Sandboxing sources (e.g., Docker security options).
+- Input validation at boundaries (e.g., escape-sequence sanitization).
+- Authentication for network modules (e.g., bearer tokens for WebSocket).
+
+## Performance Characteristics (summarized)
+
+- Zero-copy passthrough on direct pipe connections; fast human-scale latencies.
+- Transform overhead applies only to paths that include them.
+- Fan-out cost O(N) copies; acceptable for terminal frame rates.
+- Backpressure via Node streams; slow consumers don’t block fast ones.
+
+## Testing Strategy (summarized)
+
+- Unit: module behavior in isolation (e.g., parser correctness).
+- Integration: compositions (e.g., PTY → Parser → MP4).
+- End-to-end: full multi-input/multi-output scenarios with validation of outputs and artifacts.
+
+## Configuration Formats (summarized)
+
+- Declarative YAML for topology (inputs, source, transforms, outputs, routing, settings).
+- Programmatic configuration alternative for dynamic setups.
+
+## Success Criteria (as stated)
+
+- Kernel remains unchanged; new features achieved via modules and configuration.
+- Modules are independently testable; complex behaviors emerge from simple compositions.
+- Excellent performance on fast paths; minimal overhead for unused capabilities.
+- Topologies are defined declaratively; supports use cases beyond initial terminal focus.
+
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_1__vision_purpose_and_rationale.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_1__vision_purpose_and_rationale.md
new file mode 100644
index 0000000..e588153
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_1__vision_purpose_and_rationale.md
@@ -0,0 +1,20 @@
+# Doc 1 — Vision/Purpose, Concrete Ideas, Why It Matters
+
+## Vision/Purpose
+- Build a microkernel for terminal I/O as a data‑flow system: the kernel provides only pipes and a service registry; all semantics live in composable modules discoverable by capability.
+- Use the terminal as the proving ground while keeping the kernel generally useful and transport agnostic.
+
+## Concrete Ideas
+- Kernel surface: `createPipe`, `connect`, `split`, `merge`, `register`, `lookup` (~60–100 LOC), leveraging Node Duplex streams with backpressure.
+- Modules: input/source/transform/output; minimal interface (id/type/init/destroy, inputPipe/outputPipe) and capability descriptors (`accepts/produces/features`).
+- Capability matching: register modules; lookup by `accepts`, `produces`, `type`, `features` to wire topologies.
+- Canonical flows: minimal VT100 (Keyboard→PTY→Screen), multi‑input fan‑in, multi‑output fan‑out, dual‑path raw+parsed, remote viewer.
+- Roadmap phases: kernel + basic modules → composability demos (parser/browser/MP4) → advanced inputs (voice/MCP) → container PTY → diverse outputs → browser extension → network transports.
+- Testing strategy: unit (modules), integration (compositions), end‑to‑end; golden transcripts; performance notes (zero‑copy fast paths, O(N) fan‑out cost, backpressure).
+- Configuration: declarative manifests (YAML/programmatic) to describe topology and routing.
+
+## Why It Matters
+- Stable, tiny core enables long‑lived compatibility; new features land as modules without kernel churn.
+- Natural multi‑input/multi‑output composition supports rich terminal and AI use cases.
+- Predictable performance and strong testability accelerate iteration and reduce regressions.
+- Transport/location agnosticism opens paths from single process to distributed systems without rewrites.
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_2.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_2.md
new file mode 100644
index 0000000..009c2c5
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_2.md
@@ -0,0 +1,98 @@
+# Danny and Vega: Consultation About Project — Doc 2
+
+Version: 1.0
+Date Context: post–Doc 1 follow‑up
+Scope: Technical summary of terminology and deployment/ supervision discussion (no recommendations)
+
+## Terminology: How Microkernel Folks Say It
+
+Correct phrasings (Mach/Hurd style):
+- “Servers run in user space”
+- “Servers run on top of the kernel”
+- “Servers communicate through the kernel”
+- “The kernel provides IPC primitives” (in this project: stream pipes)
+- “Servers use kernel‑provided IPC” / “Servers are kernel clients”
+
+Avoid (monolithic connotation):
+- “Servers run in the kernel”
+- “The kernel contains/has servers”
+- “The kernel executes servers”
+
+Boundary emphasis:
+- Kernel = plumbing (IPC, connections, registry)
+- Servers = logic (PTY, parsing, recording, networking)
+- Kernel is mechanism; server behavior is policy
+
+## Architectural Positioning (as described)
+
+- Application level: independent servers/modules (PTY server, Parser server, MP4 server)
+- Kernel: provides stream‑based IPC (“pipes”), connection ops, and registry; unaware of semantics
+- Servers register and route data via kernel‑provided pipes
+- Node.js runtime underneath in current implementation
+
+## Supervision and Restarts (Mach/Hurd precedent)
+
+- Kernel does not restart servers
+- Typical roles:
+  - Bootstrap/init server: starts and monitors essential servers; name service
+  - proc server: tracks processes, can notify on death
+  - Peer monitoring: servers can watch each other via IPC
+  - External supervisor (e.g., systemd‑like) can manage servers
+- For this project’s framing: a “Supervisor” is another server; the kernel remains policy‑free
+
+## Deployment Flexibility (location transparency)
+
+- Goal: same server code and same kernel API with different pipe transports
+- Pipe implementations (examples):
+  - In‑process: PassThrough Duplex (single process)
+  - Cross‑process: Unix domain socket–backed Duplex
+  - Cross‑machine: TCP/WebSocket–backed Duplex
+- Principle (L4/QNX lineage): mechanism matters, not location; location is policy
+- QNX analogy: single API regardless of local vs remote provider
+
+## Deployment Models (outlined)
+
+- Single executable (single process)
+  - All servers as in‑process modules on top of the kernel
+  - Simple to run and debug
+- Multi‑process (same machine)
+  - Each server in its own process
+  - Pipes via Unix sockets; socket paths via config/env
+- Distributed (multiple machines)
+  - Servers containerized or separate hosts
+  - Pipes via TCP/WebSocket; connectivity defined by config/compose
+
+## Advantages by Context (stated)
+
+- Development (single process): fast, minimal overhead, straightforward debugging
+- Testing (multi‑process): isolation, realistic IPC, targeted restarts
+- Production (distributed): scaling, fault tolerance, specialized hardware (e.g., GPU for encoding)
+
+## Embedded/Bare‑Metal Thought Experiment
+
+- If ported to bare metal: kernel adapts to HAL (ring buffers instead of Node streams)
+- Same kernel surface concept; different low‑level I/O implementation
+
+## Phased Roadmap for Deployment Evolution
+
+- Phase 1: Single process — PassThrough pipes (development/simple apps)
+- Phase 2: Multi‑process — Unix sockets (testing/isolation)
+- Phase 3: Distributed — TCP/WebSocket (scale/fault tolerance)
+- Phase 4 (optional): Bare metal — ring buffers/HAL (embedded)
+
+## Terminology Cheat Sheet (summary)
+
+Say this:
+- “Servers run on the kernel / through the kernel”
+- “Kernel provides pipes; servers use kernel IPC”
+- “Servers are kernel clients; servers run in user space”
+
+Not this:
+- “Servers run in the kernel / kernel has servers / kernel executes servers”
+
+## Recap: Philosophy Statements
+
+- Kernel = mechanism (pipes, connections, registry)
+- Servers = policy (semantics and behavior)
+- Location = deployment detail (config swaps transports)
+- The kernel remains unchanged across deployment models; servers remain unchanged; configuration selects transport and placement
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_2__vision_purpose_and_rationale.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_2__vision_purpose_and_rationale.md
new file mode 100644
index 0000000..8f0149d
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_2__vision_purpose_and_rationale.md
@@ -0,0 +1,21 @@
+# Doc 2 — Vision/Purpose, Concrete Ideas, Why It Matters
+
+## Vision/Purpose
+- Align terminology and deployment/supervision model with Mach/Hurd: servers run on/through the kernel (user space), not in it; kernel stays policy‑free.
+- Support multiple deployment models (single process, multi‑process, distributed, embedded) without changing kernel/server APIs.
+
+## Concrete Ideas
+- Correct phrasing: “servers run on top of / communicate through the kernel”; avoid “in the kernel.”
+- Supervision: kernel does not restart servers; use bootstrap/init or a dedicated supervisor server; peer/externals can monitor.
+- Deployment models:
+  - Single process (PassThrough pipes)
+  - Multi‑process (Unix socket–backed pipes)
+  - Distributed (TCP/WebSocket–backed pipes)
+  - Bare‑metal thought experiment (ring buffers/HAL)
+- Location transparency principle (L4/QNX): same API, different transports; configuration selects placement.
+- Terminology cheat sheet for consistent documentation and marketing.
+
+## Why It Matters
+- Prevents architectural confusion; eases onboarding and collaboration.
+- Keeps mechanism vs policy separation crisp, aiding maintainability and security review.
+- Enables smooth evolution from dev → test → prod with the same code paths.
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_3.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_3.md
new file mode 100644
index 0000000..ceb36ef
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_3.md
@@ -0,0 +1,82 @@
+# Danny and Vega: Consultation About Project — Doc 3
+
+Version: 1.0
+Date Context: follow‑up on distributed/multi‑machine routing
+Scope: Technical summary of service mesh, routing servers, terminals, and multi‑hop flows (no recommendations)
+
+## Distributed Service Mesh Concept
+
+- Core idea: Distributed microkernel system with routing servers forming a service mesh.
+- “Terminal” abstraction: connection points (local, network, loopback) managed by a routing server, analogous to airport terminals.
+- Routing server roles:
+  - Maintain terminals and a route table mapping service names → terminal (and optional machine ID / hop distance).
+  - Forward data between terminals based on destination in message envelopes.
+  - Announce local services and learn remote routes from announcements or a registry.
+
+## Terminals and Routes
+
+- Terminal types: `local`, `network`, `loopback`.
+- Terminal shape (conceptual): `{ name, type, inputPipe, outputPipe, remoteAddress? }`.
+- Route shape (conceptual): `{ serviceName, terminal, machineId?, hops }` with hop count for distance/selection.
+
+## Routing Behavior and Envelopes
+
+- Messages carry an envelope: `{ source, destination, replyTo?, data, ... }`.
+- Router flow:
+  1) Receive data on a terminal’s `inputPipe`.
+  2) Parse destination from envelope.
+  3) Lookup route; select destination terminal.
+  4) Forward data via destination terminal’s `outputPipe`.
+- Supports multi‑hop by forwarding between network terminals; hop counts used for route preference.
+- Reply path (hairpin) uses `replyTo` addressing; return traffic may traverse back to origin over a different terminal.
+
+## Service Discovery Approaches
+
+- Mesh broadcasts (gossip): periodic service announcements on network terminals containing local services and known routes; receivers learn routes and increment hops.
+- Central registry: a registry server provides `register`/`lookup` for service → location; routers populate their route tables from the registry.
+- Both approaches can coexist; learned routes include machine IDs and hop counts.
+
+## Multi‑Machine Scenarios (A/B/C example)
+
+- Machine A: PTY, Display; Router with terminals to B and C.
+- Machine B: Parser; Router with terminals to A and C.
+- Machine C: GPU and Encoder; Router with terminals to A and B.
+- Example flow (PTY → Parser → GPU → Encoder → Display):
+  1) A routes PTY output to B’s parser (net terminal to B).
+  2) B routes parsed data to C’s GPU (net terminal to C).
+  3) C forwards GPU output to local encoder.
+  4) C routes encoded result back to A’s display (net terminal to A).
+  5) A delivers to local display.
+- Route tables per machine map service names to the appropriate terminal (local or network) with hop info.
+
+## Hairpin / Loopback Case
+
+- Scenario: A lacks GPU; C has GPU. A sends a request to `gpu-server` (routed to C) with `replyTo: mp4-encoder@machine-a`.
+- C’s router delivers to local GPU; GPU server replies to `replyTo`.
+- C’s router forwards response back to A over the network terminal; A delivers to local encoder/display.
+
+## Deployment and Transport
+
+- Same kernel API with different pipe transports:
+  - In‑process: PassThrough (single process).
+  - Cross‑process: Unix domain socket–backed Duplex.
+  - Cross‑machine: TCP/WebSocket–backed Duplex.
+- Location transparency: servers are unaware of peer placement; configuration selects transport.
+
+## Configuration‑Driven Topology
+
+- Declarative deployment description enumerates machines, their services, and network terminals (addresses/ports).
+- Routers use discovery to populate routes automatically; services are referred to by name throughout the mesh.
+
+## Real‑World Analogues (referenced)
+
+- Plan 9: “network dialers” and files as streams for distributed resources.
+- QNX Neutrino: network‑transparent IPC; same API local/remote.
+- Erlang: distributed messaging across nodes with location transparency.
+- Kubernetes service mesh: service abstraction and routing to instances via labels.
+
+## Key Properties (as articulated)
+
+- Location transparency; replication and multi‑hop routing.
+- Configuration controls placement; code remains unchanged.
+- Kernel remains mechanism (IPC/connection/registry); routing/discovery implemented by servers.
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_3__vision_purpose_and_rationale.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_3__vision_purpose_and_rationale.md
new file mode 100644
index 0000000..1a928d7
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_3__vision_purpose_and_rationale.md
@@ -0,0 +1,20 @@
+# Doc 3 — Vision/Purpose, Concrete Ideas, Why It Matters
+
+## Vision/Purpose
+- Establish a distributed service mesh using routing servers and “terminals” so services communicate via envelopes across machines with location transparency, supporting multi‑hop and hairpin flows.
+
+## Concrete Ideas
+- Terminals: `local`, `network`, `loopback`; each with `inputPipe`/`outputPipe` and optional remote address.
+- Routes: map `serviceName → terminal (machineId?, hops)`; prefer lower hop counts.
+- Envelope fields: `{ source, destination, replyTo?, data, ... }` drive routing decisions.
+- Router logic: receive on terminal → parse destination → lookup route → forward to destination terminal.
+- Discovery:
+  - Gossip/announcements: periodic broadcast of local services and known routes; receivers learn routes and increment hops.
+  - Central registry: `register/lookup` for service → location; routers populate local tables.
+- Config‑driven topology: declare machines, services, and network terminals (addresses/ports) to form the mesh.
+- Hairpin case: use `replyTo` to send results back across machines to the origin or another endpoint.
+
+## Why It Matters
+- Scales pipelines across heterogeneous hardware (e.g., GPU offload) without changing server code.
+- Increases resilience and flexibility via multi‑hop routing and alternative paths.
+- Preserves the microkernel contract (pipes + discovery are mechanisms; routing policies live in servers).
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_4.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_4.md
new file mode 100644
index 0000000..5218f26
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_4.md
@@ -0,0 +1,92 @@
+# Danny and Vega: Consultation About Project — Doc 4
+
+Version: 1.0
+Date Context: workflows, naming/Hostess, reservations/LLDP, probe/beacon, executor
+Scope: Technical summary without recommendations
+
+## Two Workflows Informing Initial Server Component
+
+- Workflow 1: Dual single-binary deployments
+  - Each machine ships a single executable with sufficient built-in capability for mesh behavior.
+  - Later, each system should learn/know the other’s capabilities.
+- Workflow 2: Single, more static system
+  - Kernel is wired at startup based on a specification.
+  - Emphasis on deterministic configuration over discovery.
+
+## State Machine and Control Surface (HMI)
+
+- Central state machine tracks and controls all kernel pipe operations.
+- Must enumerate: all pipes/connections touching the kernel; addresses; metadata; flow and status.
+- Presents a control surface usable by AI or human operators (refinery/HMI analogy).
+- Reports operational metrics (e.g., flow rates) and current topology.
+- Supports an initial state derived from a “wiring file” (compile-time configuration) that sets connections at startup.
+- Linting/testing of the wiring file validates server presence and connectivity assumptions at build time.
+- Routing/discovery not required for fully compiled/static configurations; those can be realized as separate servers when needed.
+
+## Exposure and Visualization
+
+- The system exposes enough structural and runtime data (flow, connections, endpoints, multiplex/combiner relations) to enable external programs to render accurate topology diagrams.
+- A mechanism exists to construct a pipeline and “upload” it so that the configuration can be compiled in at build time.
+- Other servers require query and modification interfaces to inspect and adjust the live topology.
+
+## Connection Semantics
+
+- Connections are unique and addressable.
+- Topology must express:
+  - Fan-out/multiplexing: “these are multiplexed from the output of this”.
+  - Fan-in/combining: “these are combined from the inputs of these”.
+  - Explicit routing: “this routes to server XYZ (unique ID + human-readable metadata) to terminal ‘XXXX’”.
+
+## Naming and Manifests
+
+- Compile-time manifests define server identity, terminal names, and intended flow directions (input, output, output multiplexer, input combiner).
+- On startup, servers register themselves and their interface metadata to a dedicated registry server (“The Hostess”).
+- Explicit declaration by server authors ensures correct registration and prevents miswiring (e.g., output wired as input).
+
+## The Hostess and the Guest Book
+
+- Hostess maintains a guest book of registered servers and their terminals, along with availability/in‑use tracking.
+- Naming convention (guest book identity string):
+  - `fqdn:servername:classHex:owner:authFlag(auth yes|no|optional):authMechanism:uuid`
+- Hostess responsibilities (as described):
+  - Provide queries/filters (masks) to locate servers matching criteria (e.g., “4 servers of type XYZ”).
+  - Track per-terminal usage; require a connectome ID from the control surface/state machine for mappings.
+  - Serve as source of truth for server presence/availability; control surface serves as source of truth for connection topology (connectome).
+
+## Reservations Concept
+
+- Hostess accepts “reservations” for resources/terminals.
+- Reservation sources:
+  - Local “walk-ins”.
+  - Remote “phone calls” (inter‑machine requests).
+- Hostess can share menu/availability information with peer systems to support cross‑site fulfillment.
+
+## LLDP‑Style Discovery and Connectivity Knowledge
+
+- Systems exchange LLDP‑like messages advertising capabilities and preferred connectivity methods.
+- A dedicated “probe” server tests connectivity mechanisms (ports, addresses, transports) and publishes working candidates.
+- Probe on System A can inform System B which connection types to attempt first, based on verified results.
+- Connectivity knowledge is cached/advertised to reduce future probing overhead.
+
+## Probe and Beacon Protocol (sketch)
+
+- Executor can spawn a probe process with instructions:
+  - Scan listening ports across all local IPs within an allowed range (non‑privileged).
+  - Start a beacon that listens on a specified port range, skipping ports already in use.
+  - Use shared passphrase and per‑session hashes for authentication/verification.
+  - Probe verifies beacon identity by hash(passphrase, challenge) exchange.
+  - Report discovered working connection points and full IP/port matrix to the beacon’s primary port.
+  - Send completion notice; receive authenticated “terminate” from beacon; exit.
+- Off‑machine probing envisioned as a future extension.
+
+## Minimal Executor
+
+- A minimal executor boots services when the kernel starts; initial implementation can be code‑specified (hard‑coded) for simplicity.
+- Future evolution includes starting external processes.
+- Intent aligns with an executor model that can orchestrate server lifecycles and integrate with Hostess/reservations.
+
+## Control Surface and Hostess Interaction Pattern
+
+- Control surface computes a connection plan and requests resources from Hostess using filter criteria (counts/types).
+- Hostess returns server identities and terminal info; control surface returns connectome IDs for booked terminals.
+- Both sides maintain their respective truths: Hostess (resources/availability) and control surface (topology/connectome).
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_4__vision_purpose_and_rationale.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_4__vision_purpose_and_rationale.md
new file mode 100644
index 0000000..564bb3a
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_4__vision_purpose_and_rationale.md
@@ -0,0 +1,32 @@
+# Doc 4 — Vision/Purpose, Concrete Ideas, Why It Matters
+
+## Vision/Purpose
+- Provide an operational control system (state machine + HMI) that can configure pipelines deterministically (compile‑time wiring) or coordinate dynamic meshes, with clear naming/manifests and a registry (Hostess) for resource tracking and allocation.
+- Support reservations and LLDP‑style discovery (probe/beacon) while keeping routing/discovery as optional servers; include a minimal executor to start services.
+
+## Concrete Ideas
+- Two workflows:
+  - Single‑binary per machine with later capability awareness across systems.
+  - Static system wired at startup from a “wiring file.”
+- State machine/HMI:
+  - Tracks all pipes/connections, addresses, metadata, flow/status; exposes query/modify APIs; supports diagram rendering.
+  - Initial state from wiring file; lint/tests at build time to validate availability and coherence.
+- Connection semantics:
+  - Unique, addressable connections; multiplex (fan‑out), combiner (fan‑in), explicit routes to server/terminal identifiers.
+- Naming/manifests:
+  - Compile‑time manifest defines server identity, terminals, and intended flow directions (input/output/multiplexer/combiner).
+- Hostess (guest book):
+  - Identity string: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid`.
+  - Query/resource allocation via masks/filters; per‑terminal in‑use tracking; exchange of connectome IDs with control surface.
+- Reservations:
+  - Accept local (walk‑in) and remote (phone call) reservations; share menus/availability with peers.
+- LLDP + probe/beacon:
+  - Exchange connectivity hints; probe tests ports/transports; beacon authenticates via shared passphrase/challenges; cache working candidates.
+- Minimal executor:
+  - Boots services at kernel start (initially hard‑coded), with future external process support.
+
+## Why It Matters
+- Deterministic startup paths and clear operational visibility reduce on‑call toil and misconfiguration risk.
+- Safe orchestration via explicit resource tracking and reservations enables elastic and multi‑tenant usage.
+- Cross‑site interoperability (LLDP/probe) accelerates integration and reduces troubleshooting time.
+- Clean separation of policy (control surface/Hostess) from mechanism (kernel pipes) keeps the core stable and auditable.
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_5.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_5.md
new file mode 100644
index 0000000..cc7e4c3
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_5.md
@@ -0,0 +1,33 @@
+# Danny and Vega: Consultation About Project — Doc 5
+
+Version: 1.0
+Date Context: external server wrappers, sprints/RFCs, application composition
+Scope: Technical summary without recommendations
+
+## External Server Wrappers (npm/C and others)
+
+- Goal: Treat third‑party servers (npm packages, C binaries, etc.) as first‑class servers in the system.
+- Approach: Build a wrapper that registers capabilities and adapts foreign servers to kernel pipes and conventions.
+- Location transparency: Wrapped server may run in‑process or as a separate process; remote wrappers are possible.
+- Executor role: Starts the wrapper, which in turn invokes the underlying server/package.
+- PTY angle: If needed, run the wrapped program under a PTY (render to null or to a logging renderer) to fit the terminal‑centric origins.
+- Interop: Wrapper must interoperate with “base” servers via shared capability semantics.
+- Environment: Wrapper provides a minimal environment (env vars, CLI args, data paths) for the wrapped server.
+- Standardization: Wrapper behavior would be standardized over time as corner cases are discovered.
+
+## Composition: From Parts to Applications
+
+- Need: A way to compose full applications from servers, executor, and control surface/state machine.
+- Control surface/state machine: Owns the connection plan (how pipelines connect to terminals) and runtime control.
+- Executor: Owns process lifecycle (start, restart, supervision) for declared servers.
+- Application plan: A manifest‑driven description (likened to Kubernetes deployment manifests) to define both:
+  - Control/wiring manifest for the control surface (topology/connectome).
+  - Execution manifest for the executor (what to start and how).
+- Minimum bootstrap: Executor starts declared servers; control surface wires them according to the manifest to produce a runnable application.
+
+## Planning/RFCs (as raised)
+
+- Questions at this stage:
+  - What would the sprints for the wrapper and composition work look like?
+  - Are additional RFCs needed for wrappers and application composition (timing and scope)?
+  - Is now the right moment to draft RFCs and plan the sprints?
diff --git a/VEGA/Danny_and_Vega_consultation_about_project_doc_5__vision_purpose_and_rationale.md b/VEGA/Danny_and_Vega_consultation_about_project_doc_5__vision_purpose_and_rationale.md
new file mode 100644
index 0000000..6519902
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_about_project_doc_5__vision_purpose_and_rationale.md
@@ -0,0 +1,22 @@
+# Doc 5 — Vision/Purpose, Concrete Ideas, Why It Matters
+
+## Vision/Purpose
+- Make external servers (npm packages, C binaries, etc.) first‑class citizens via a standard wrapper so they interoperate with base servers through kernel pipes and capability semantics.
+- Compose real applications declaratively using manifests that drive both execution (what to start) and wiring (how to connect), enabling a reproducible bootstrap with executor + control surface.
+
+## Concrete Ideas
+- Wrapper standard:
+  - Registers capabilities; adapts foreign server I/O to kernel pipes; injects env vars/CLI args/data paths.
+  - Can run in‑process or as a separate process; remote wrapper instances appear identical at the capability level.
+  - Optionally runs under PTY with null/logging renderers to fit terminal‑centric paths.
+- Executor starts the wrapper which invokes the underlying server/package; lifecycle (start/restart) owned by executor.
+- Application composition via two manifests:
+  - Control/wiring manifest: connection plan for the control surface/state machine (topology/connectome).
+  - Execution manifest: processes/servers for executor to start and supervise with parameters.
+- Minimum bootstrap: executor brings up declared servers; control surface wires them per manifest to yield a runnable app.
+
+## Why It Matters
+- Leverages existing ecosystems (Node/C) without bespoke rewrites; increases capability surface quickly.
+- Ensures consistent lifecycle and I/O semantics across heterogeneous components.
+- Makes deployments reproducible and portable (same manifests → same system), improving operability and sharing.
+- Preserves microkernel boundaries while allowing rich integrations and gradual standardization of wrappers.
diff --git a/VEGA/Danny_and_Vega_consultation_merge_doc_5_4.md b/VEGA/Danny_and_Vega_consultation_merge_doc_5_4.md
new file mode 100644
index 0000000..c5e1c6c
--- /dev/null
+++ b/VEGA/Danny_and_Vega_consultation_merge_doc_5_4.md
@@ -0,0 +1,74 @@
+# Merged View — Doc 5 + Doc 4 (Diff‑Style)
+
+Legend
+- `==` Duplicate/similar across both docs
+- `++` Complementary; works together when combined
+- `--` Potential tension/contrast to reconcile
+- Tags: `[D5]` = Doc 5 (wrappers/composition), `[D4]` = Doc 4 (HMI/Hostess/executor)
+
+## Vision / Purpose
+- == [D5][D4] Microkernel core stays minimal; servers (modules/wrappers) run on top and communicate through pipes.
+- ++ [D5][D4] Compose full applications declaratively: executor starts things; control surface wires pipelines.
+- -- [D4] Static compile‑time wiring path vs [D5] flexible composition with third‑party wrappers; reconcile via optional discovery.
+
+## Core Components
+- == [D4][D5] Executor: starts and restarts services; owns lifecycle.
+- ++ [D5] External Server Wrappers: adapt npm/C/other binaries; register capabilities; optional PTY shell path.
+- ++ [D4] Control Surface / State Machine (HMI): tracks all pipes/connections; provides query/modify APIs; initial wiring from spec.
+- ++ [D4] Hostess (registry): guest book, reservations, identity schema; tracks per‑terminal availability.
+- ++ [D4] Reservations: local/remote allocations with connectome IDs.
+- ++ [D4] LLDP‑style Discovery + Probe/Beacon: learn viable transports and cache connectivity.
+
+## Manifests / Specifications
+- == [D5][D4] Need declarative inputs to bootstrap the system.
+- ++ [D5] Execution Manifest → feeds Executor (what to start, params, env).
+- ++ [D5] Control/Wiring Manifest → feeds Control Surface (how to connect terminals/pipes).
+- ++ [D4] “Wiring file” (compile‑time) → initial topology; lint/test at build time.
+- -- [D4] “No routing/discovery needed if baked at compile time” vs [D5] wrappers may rely on capabilities and dynamic composition. Resolution: make discovery optional.
+
+## Naming / Identity / Registration
+- ++ [D4] Guest‑book identity format: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid`.
+- ++ [D5] Wrappers must register capabilities and terminals; align wrapper registration to Hostess schema.
+- == [D4][D5] Terminals require explicit direction (input/output/multiplexer/combiner) to prevent miswiring.
+
+## Workflows
+- ++ [D4] Workflow A: Dual single‑binary systems that later learn about each other.
+- ++ [D4] Workflow B: Static single system wired at startup by spec.
+- ++ [D5] Wrapper‑driven integration: bring third‑party servers under uniform lifecycle + I/O.
+- ++ Combined: Use wrappers as resources the Hostess can reserve; Control Surface uses specs to wire them.
+
+## Routing / Discovery / Connectivity
+- ++ [D4] LLDP + probe/beacon to determine working transports; share findings.
+- == [D4][D5] Transport agnosticism preserved (pipes hide location; config selects transport).
+- -- [D4] Pure compile‑time wiring path suggests zero discovery; [D5] external wrappers may appear dynamically. Strategy: static first, add discovery when needed.
+
+## PTY Considerations
+- ++ [D5] Run wrapped executables under PTY when beneficial (logging/null renderer supported) to fit terminal‑centric patterns.
+- == [D4] HMI/control surface can expose flow/metrics regardless of PTY/non‑PTY source.
+
+## Interfaces / Control Surface
+- ++ [D4] Control surface is source of truth for connectome; Hostess is source of truth for resources/availability.
+- ++ [D5] Application plan (manifests) drive both Executor and Control Surface for reproducible bootstraps.
+
+## Potential Conflicts (Callouts)
+- -- Static vs dynamic: [D4] emphasizes compile‑time wiring sufficiency; [D5] emphasizes runtime composition with wrappers. Treat discovery as optional layer; manifests remain primary.
+- -- Registration scope: [D4] Hostess as central source for servers; [D5] wrappers could run remotely and register elsewhere. Require a consistent federation story (later).
+- -- PTY assumption: [D5] suggests PTY shell path for foreign programs; [D4] is neutral. Keep PTY use case‑driven, not mandatory.
+
+## Strong Overlaps (De‑duplication Targets)
+- == Executor concept appears in both → unify into one component with clear API.
+- == Declarative manifests/specs in both → unify naming and structure (execution vs wiring).
+- == Terminals with direction and uniqueness → same vocabulary across Hostess, Control Surface, and Wrappers.
+
+## Works Better Together (Synergies)
+- ++ Wrappers + Hostess: wrappers register capabilities/terminals; Hostess manages reservations and availability; Control Surface binds them per manifest.
+- ++ Probe/Beacon + Wrappers: probe discovers viable transports; wrappers pick the best transport transparently.
+- ++ HMI + PTY lineage: even non‑TTY servers can be observed via standardized flow/metrics for consistent operational UX.
+
+## Merged Checklist (Actionable Shape, concept only)
+- == Single Executor API (start/stop/restart/query) used by both docs.
+- == Dual‑manifest model (execution + wiring) with lintable schema.
+- == Hostess guest‑book identity and per‑terminal usage tracking.
+- == Control Surface connectome as source of truth; reservation IDs round‑trip to Hostess.
+- == Optional discovery path (LLDP/probe) layered on top of static wiring.
+- == Wrapper registration consistent with Hostess schema; capability semantics shared.
diff --git a/VEGA/diary-2025-10-12T0508Z.txt b/VEGA/diary-2025-10-12T0508Z.txt
new file mode 100644
index 0000000..59c1252
--- /dev/null
+++ b/VEGA/diary-2025-10-12T0508Z.txt
@@ -0,0 +1,26 @@
+Diary — 2025-10-12T05:08Z
+
+Context
+- Reaffirmed the kernel as pure plumbing (create/connect/split/merge/register/lookup). No pub/sub or policy in core.
+- Landed a tiny ControlBus (in‑proc, objectMode) and a TopologyController that translates command frames into StateManager → kernel calls.
+- Proved the control loop with a demo (declare nodes, connect edges, snapshot). Unified capability types and added minimal runMode to Executor (default inproc). All servers now register with Hostess.
+
+Decisions
+- Control plane is message-driven; keep a stable envelope and topics, swap transports via adapters later.
+- Next step is worker-mode for isolation inside a single binary (MessagePort adapters for control + pipes).
+- Hostess will learn control endpoints at registration time so tools know how to talk to each server.
+
+Near-term plan (see VEGA/near-term-and-future-plan.md)
+1) Worker-mode + adapters (ControlBus/Pipe)
+2) Hostess control endpoint metadata
+3) Examples + docs
+4) Process-mode (Unix/TCP adapters + blue/green)
+5) Optional NATS adapter
+
+Why this order
+- Keeps kernel untouched; adds isolation and remote control incrementally.
+- Preserves a single-binary story while giving “private process” semantics via workers.
+- Makes discovery and HMI wiring straightforward (Hostess advertises control coordinates).
+
+Vibe
+- Calm, surgical, and excited to lock in control-plane primitives. Default to clarity; build demos that teach. Keep the kernel tiny and predictable; put behaviors at the edges.
diff --git a/VEGA/merge_2.txt b/VEGA/merge_2.txt
new file mode 100644
index 0000000..d549d54
--- /dev/null
+++ b/VEGA/merge_2.txt
@@ -0,0 +1,81 @@
+# Merged View — Docs 5 + 4 + 3 (Diff‑Style)
+
+Legend
+- `==` Duplicate/similar across docs
+- `++` Complementary; works together when combined
+- `--` Potential tension/contrast to reconcile
+- Tags: `[D5]` wrappers/composition, `[D4]` HMI/Hostess/executor, `[D3]` distributed mesh/routing
+
+## Vision / Purpose
+- == [D5][D4] Minimal microkernel; servers run on/through it; pipes as IPC.
+- ++ [D5][D4] Declarative composition: executor starts; control surface wires.
+- ++ [D3] Distributed service mesh: routing servers + terminals enable multi‑hop, hairpin flows with location transparency.
+- -- [D4] Pure compile‑time wiring vs [D3] dynamic route learning; reconcile via optional discovery/routing layers.
+
+## Core Components
+- == [D4][D5] Executor for lifecycle; Control Surface/HMI for topology control; Hostess registry for resources/reservations.
+- ++ [D5] External Server Wrappers standardize third‑party servers; optionally PTY‑backed.
+- ++ [D3] Routing Server (“airport”) manages terminals and a route table; forwards by destination envelope.
+- ++ [D3] Terminals: `local | network | loopback` with `inputPipe`/`outputPipe` and optional remote address.
+
+## Manifests / Specifications
+- == [D5][D4] Dual declarative inputs: execution manifest (executor) and wiring manifest (control surface).
+- ++ [D3] Config‑driven mesh: declare machines, services, and network terminals (addr/ports) to form multi‑machine topologies.
+- -- [D4] “No discovery if baked at compile time” vs [D3] mesh learning. Resolution: manifests first; discovery optional.
+
+## Naming / Identity / Registration
+- ++ [D4] Hostess guest‑book identity: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid` with per‑terminal availability.
+- ++ [D5] Wrappers register capabilities/terminals; align with Hostess schema.
+- ++ [D3] Service names and destinations used by routers; map service name ↔ Hostess identity (or alias) to unify lookup.
+- -- [D3] Router‑local route tables vs [D4] centralized Hostess registry; plan for federation/consistency later.
+
+## Workflows
+- ++ [D4] Single‑binary systems that later discover each other; static single system wired at startup.
+- ++ [D5] Wrapper‑driven integration to onboard third‑party servers.
+- ++ [D3] Multi‑machine A/B/C scenarios (e.g., PTY→Parser→GPU→Encoder→Display) with cross‑site hops and returns.
+
+## Routing / Discovery / Connectivity
+- ++ [D3] Envelope routing: `{ source, destination, replyTo?, data, ... }` parsed by routers.
+- ++ [D3] Multi‑hop and hairpin supported via routes and `replyTo`.
+- ++ [D3] Discovery methods: gossip/announcements vs central registry; hop counts for preference.
+- ++ [D4] LLDP + probe/beacon inform viable transports; cache results to speed connections.
+- == [D3][D4] Transport agnosticism: in‑proc (PassThrough), Unix sockets, TCP/WebSocket; pipes hide location.
+- -- Overlap: [D3] gossip routing vs [D4] Hostess queries; treat as complementary layers (service discovery + resource reservation).
+
+## PTY Considerations
+- ++ [D5] Use PTY when wrapping TTY‑oriented programs; send to null/logging renderer if no UI.
+- == [D3][D4] Routing/HMI are neutral to PTY; they operate on pipes and metrics regardless of source.
+
+## Interfaces / Control Surface
+- ++ [D4] Control Surface is source of truth for connectome; Hostess is source for resource availability.
+- ++ [D3] Routers expose terminals and routes as addressable endpoints; Control Surface can wire through routers as just another server.
+- -- State ownership: routing state in [D3] routers vs topology state in [D4] Control Surface. Approach: routing ≈ data plane; connectome ≈ control plane.
+
+## Discovery / Registry Interplay
+- ++ [D3] Gossip announcements teach routes; [D4] Hostess provides authoritative server inventory and reservations.
+- ++ [D4] LLDP/probe record transport viability; [D3] routers consume that knowledge to choose terminals/transports.
+- -- Potential conflict: dual sources of truth. Rule: Hostess = who/what/availability; Routers = how/where to forward.
+
+## Strong Overlaps (De‑duplication Targets)
+- == Executor API surfaces in [D5] and [D4] → one component.
+- == Declarative manifests across [D5]/[D4]/[D3] → unify schemas (execution, wiring, mesh terminals).
+- == Terminal direction semantics across [D4]/[D5]/[D3] → single vocabulary (input/output/multiplexer/combiner).
+
+## Works Better Together (Synergies)
+- ++ Wrappers ([D5]) + Hostess ([D4]): wrappers register capabilities; Hostess manages reservations; Control Surface binds per wiring manifest.
+- ++ Probe/Beacon ([D4]) + Routers ([D3]): probe finds working transports; routers pick best path; hop count + transport viability guide selection.
+- ++ HMI ([D4]) + Envelopes ([D3]): expose per‑edge flow/latency and envelope paths for operational observability.
+
+## Potential Conflicts (Callouts)
+- -- Static vs dynamic (compile‑time wiring vs mesh learning) → layer optional discovery; keep manifests authoritative.
+- -- Central registry vs distributed routes → define clear boundaries (resource inventory vs path selection).
+- -- Wrapper PTY assumption vs non‑TTY servers → PTY is optional per use case.
+
+## Merged Checklist (Conceptual)
+- == Single Executor with start/stop/restart/query; accepts an execution manifest.
+- == Control Surface with a wiring manifest; maintains connectome; exchanges reservation IDs with Hostess.
+- == Hostess guest‑book identity and per‑terminal usage; supports reservations and filters.
+- ++ Routing Server with terminals/routes; parses envelopes and forwards; supports multi‑hop and hairpin via `replyTo`.
+- ++ Discovery stack: optional gossip announcements; LLDP/probe for transport viability; central Hostess lookup.
+- == Transport options: PassThrough (local), Unix sockets (multi‑process), TCP/WebSocket (distributed).
+- ++ Wrapper standard: registers capabilities/terminals; integrates with Hostess; can operate locally or remotely.
diff --git a/VEGA/merge_3.txt b/VEGA/merge_3.txt
new file mode 100644
index 0000000..aab2d89
--- /dev/null
+++ b/VEGA/merge_3.txt
@@ -0,0 +1,97 @@
+# Merged View — Docs 5 + 4 + 3 + 2 (Diff‑Style)
+
+Legend
+- `==` Duplicate/similar across docs
+- `++` Complementary; works together when combined
+- `--` Potential tension/contrast to reconcile
+- Tags: `[D5]` wrappers/composition, `[D4]` HMI/Hostess/executor, `[D3]` distributed mesh/routing, `[D2]` terminology/deployment/supervision
+
+## Vision / Purpose
+- == [D5][D4] Minimal microkernel; servers run on/through it; pipes as IPC.
+- ++ [D5][D4] Declarative composition: executor starts; control surface wires.
+- ++ [D3] Distributed service mesh: routing servers + terminals enable multi‑hop, hairpin flows with location transparency.
+- ++ [D2] Terminology discipline and policy‑free kernel: servers in user space, kernel only provides IPC/registry.
+- -- [D4] Pure compile‑time wiring vs [D3] dynamic route learning; reconcile via optional discovery/routing layers.
+
+## Core Components
+- == [D4][D5] Executor for lifecycle; Control Surface/HMI for topology control; Hostess registry for resources/reservations.
+- ++ [D5] External Server Wrappers standardize third‑party servers; optionally PTY‑backed.
+- ++ [D3] Routing Server (“airport”) manages terminals and a route table; forwards by destination envelope.
+- ++ [D3] Terminals: `local | network | loopback` with `inputPipe`/`outputPipe` and optional remote address.
+- ++ [D2] Supervision pattern: kernel does not restart servers; bootstrap/init or dedicated supervisor handles restarts (maps well to Executor responsibilities).
+
+## Manifests / Specifications
+- == [D5][D4] Dual declarative inputs: execution manifest (executor) and wiring manifest (control surface).
+- ++ [D3] Config‑driven mesh: declare machines, services, and network terminals (addr/ports) to form multi‑machine topologies.
+- -- [D4] “No discovery if baked at compile time” vs [D3] mesh learning. Resolution: manifests first; discovery optional.
+
+## Naming / Identity / Registration
+- ++ [D4] Hostess guest‑book identity: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid` with per‑terminal availability.
+- ++ [D5] Wrappers register capabilities/terminals; align with Hostess schema.
+- ++ [D3] Service names and destinations used by routers; map service name ↔ Hostess identity (or alias) to unify lookup.
+- -- [D3] Router‑local route tables vs [D4] centralized Hostess registry; plan for federation/consistency later.
+
+## Workflows
+- ++ [D4] Single‑binary systems that later discover each other; static single system wired at startup.
+- ++ [D5] Wrapper‑driven integration to onboard third‑party servers.
+- ++ [D3] Multi‑machine A/B/C scenarios (e.g., PTY→Parser→GPU→Encoder→Display) with cross‑site hops and returns.
+- == [D2] All workflows keep servers in user space “on top of” the kernel; consistent phrasing prevents architectural confusion.
+
+## Routing / Discovery / Connectivity
+- ++ [D3] Envelope routing: `{ source, destination, replyTo?, data, ... }` parsed by routers.
+- ++ [D3] Multi‑hop and hairpin supported via routes and `replyTo`.
+- ++ [D3] Discovery methods: gossip/announcements vs central registry; hop counts for preference.
+- ++ [D4] LLDP + probe/beacon inform viable transports; cache results to speed connections.
+- == [D3][D4][D2] Transport/location transparency: same APIs with PassThrough (in‑proc), Unix sockets (multi‑process), TCP/WebSocket (distributed); embedded as a future variant.
+- -- Overlap: [D3] gossip routing vs [D4] Hostess queries; treat as complementary layers (service discovery + resource reservation).
+
+## Deployment Models (from D2, integrated)
+- ++ [D2] Single process: PassThrough pipes; fast dev path — aligns with D4 static wiring.
+- ++ [D2] Multi‑process: Unix domain socket–backed pipes; isolation/testing — complements Hostess reservations and Executor restarts.
+- ++ [D2] Distributed: TCP/WebSocket–backed pipes; scale/fault tolerance — aligns with D3 routing servers and terminals.
+- ++ [D2] Embedded/bare‑metal thought experiment: ring buffers/HAL — preserves microkernel interface, changes transport.
+
+## PTY Considerations
+- ++ [D5] Use PTY when wrapping TTY‑oriented programs; send to null/logging renderer if no UI.
+- == [D3][D4][D2] Routing/HMI/terminology are neutral to PTY; they operate on pipes and metrics regardless of source.
+
+## Interfaces / Control Surface
+- ++ [D4] Control Surface is source of truth for connectome; Hostess is source for resource availability.
+- ++ [D3] Routers expose terminals and routes as addressable endpoints; Control Surface can wire through routers as just another server.
+- ++ [D2] Supervisor/init responsibilities live with user‑space servers (e.g., Executor), not the kernel.
+- -- State ownership: routing state in [D3] routers vs topology state in [D4] Control Surface. Approach: routing ≈ data plane; connectome ≈ control plane.
+
+## Terminology & Positioning (from D2)
+- == [D2][D4][D5] Use: “servers run on top of / communicate through the kernel”; avoid “in the kernel.”
+- ++ [D2] Provide a concise cheat sheet in docs to ensure consistent phrasing across marketing and technical materials.
+
+## Discovery / Registry Interplay
+- ++ [D3] Gossip announcements teach routes; [D4] Hostess provides authoritative server inventory and reservations.
+- ++ [D4] LLDP/probe record transport viability; [D3] routers consume that knowledge to choose terminals/transports.
+- -- Potential conflict: dual sources of truth. Rule: Hostess = who/what/availability; Routers = how/where to forward.
+
+## Strong Overlaps (De‑duplication Targets)
+- == Executor API surfaces in [D5] and [D4]; supervision semantics in [D2] → unify under one Executor/Supervisor component.
+- == Declarative manifests across [D5]/[D4]/[D3] → unify schemas (execution, wiring, mesh terminals) with consistent terminology from [D2].
+- == Terminal direction semantics across [D4]/[D5]/[D3] → single vocabulary (input/output/multiplexer/combiner) referenced in [D2] phrasing.
+
+## Works Better Together (Synergies)
+- ++ Wrappers ([D5]) + Hostess ([D4]): wrappers register capabilities; Hostess manages reservations; Control Surface binds per wiring manifest.
+- ++ Probe/Beacon ([D4]) + Routers ([D3]): probe finds working transports; routers pick best path; hop count + transport viability guide selection.
+- ++ HMI ([D4]) + Envelopes ([D3]): expose per‑edge flow/latency and envelope paths for operational observability.
+- ++ Terminology ([D2]) + All: shared language reduces misconfiguration and clarifies boundaries.
+
+## Potential Conflicts (Callouts)
+- -- Static vs dynamic (compile‑time wiring vs mesh learning) → layer optional discovery; keep manifests authoritative.
+- -- Central registry vs distributed routes → define clear boundaries (resource inventory vs path selection).
+- -- Wrapper PTY assumption vs non‑TTY servers → PTY is optional per use case.
+- -- Terminology drift ("in the kernel") vs policy‑free design → enforce phrasing and boundaries in docs and APIs.
+
+## Merged Checklist (Conceptual)
+- == Single Executor/Supervisor with start/stop/restart/query; accepts an execution manifest; user‑space supervision (per [D2]).
+- == Control Surface with a wiring manifest; maintains connectome; exchanges reservation IDs with Hostess.
+- == Hostess guest‑book identity and per‑terminal usage; supports reservations and filters; aligns naming/phrasing (per [D2]).
+- ++ Routing Server with terminals/routes; parses envelopes and forwards; supports multi‑hop and hairpin via `replyTo`.
+- ++ Discovery stack: optional gossip announcements; LLDP/probe for transport viability; central Hostess lookup.
+- == Transport options: PassThrough (local), Unix sockets (multi‑process), TCP/WebSocket (distributed); embedded path later.
+- ++ Wrapper standard: registers capabilities/terminals; integrates with Hostess; can operate locally or remotely; PTY optional.
diff --git a/VEGA/merge_final.txt b/VEGA/merge_final.txt
new file mode 100644
index 0000000..3661b16
--- /dev/null
+++ b/VEGA/merge_final.txt
@@ -0,0 +1,114 @@
+# Merged View — Docs 5 + 4 + 3 + 2 + 1 (Diff‑Style)
+
+Legend
+- `==` Duplicate/similar across docs
+- `++` Complementary; works together when combined
+- `--` Potential tension/contrast to reconcile
+- Tags: `[D5]` wrappers/composition, `[D4]` HMI/Hostess/executor, `[D3]` distributed mesh/routing, `[D2]` terminology/deployment/supervision, `[D1]` core kernel vision
+
+## Vision / Purpose
+- == [D5][D4][D1] Minimal microkernel; servers run on/through it; kernel provides only pipes + discovery.
+- ++ [D5][D4] Declarative composition: executor starts; control surface wires.
+- ++ [D3] Distributed service mesh with routing servers and terminals; location transparency.
+- ++ [D2] Policy‑free kernel and disciplined terminology (servers in user space, kernel ≠ feature host).
+- ++ [D1] Terminal as proving ground but transport‑agnostic foundation for broader systems.
+- -- [D4] Pure compile‑time wiring vs [D3] dynamic route learning; layer discovery/routing as optional.
+
+## Core Components
+- == [D4][D5] Executor (lifecycle) and Control Surface/HMI (topology control).
+- ++ [D4] Hostess registry: guest book, reservations, identity schema, availability.
+- ++ [D5] External Server Wrappers: adapt npm/C binaries; PTY optional.
+- ++ [D3] Routing Server: terminals + route table; envelope‑driven forwarding.
+- ++ [D2] Supervision belongs to user‑space components (bootstrap/init/supervisor), not the kernel.
+- ++ [D1] Kernel surface: `createPipe`, `connect`, `split`, `merge`, `register`, `lookup` (~60–100 LOC) using Node Duplex streams with backpressure.
+- ++ [D1] Module model: input/source/transform/output with minimal interface (id/type/init/destroy, inputPipe/outputPipe).
+
+## Manifests / Specifications
+- == [D5][D4] Dual manifests: execution (Executor) and wiring (Control Surface/connectome).
+- ++ [D3] Config‑driven mesh (machines, services, network terminals) for multi‑machine topologies.
+- ++ [D1] “Configuration over code” (YAML/programmatic) to define topologies and routing; lintable.
+- -- [D4] No discovery if baked vs [D3] dynamic; manifests remain authoritative; discovery optional.
+
+## Naming / Identity / Registration
+- ++ [D4] Hostess identity string: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid`; per‑terminal usage.
+- ++ [D5] Wrappers register capabilities/terminals consistent with Hostess schema.
+- ++ [D1] Kernel‑local capability registry: `accepts`, `produces`, `type`, `features` for module discovery.
+- ++ [D3] Router service names/destinations; map serviceName ↔ Hostess identity for unified lookup.
+- -- [D1] Kernel‑local `lookup` vs [D4] centralized Hostess registry; decide scoping (local vs federated discovery).
+
+## Workflows
+- ++ [D4] Single‑binary systems that later discover each other; static wiring at startup.
+- ++ [D5] Wrapper‑driven integration of third‑party servers (in‑proc or external process), lifecycle by Executor.
+- ++ [D3] Multi‑machine A/B/C flows (e.g., PTY→Parser→GPU→Encoder→Display) with hairpin return.
+- ++ [D1] Canonical flows: minimal VT100, multi‑input fan‑in, multi‑output fan‑out, dual‑path raw+parsed, remote viewer.
+
+## Routing / Discovery / Connectivity
+- ++ [D3] Envelopes `{ source, destination, replyTo?, data, ... }` with multi‑hop + hairpin via `replyTo`.
+- ++ [D3] Discovery: gossip/announcements and/or central registry; hop counts for preference.
+- ++ [D4] LLDP + probe/beacon provide transport viability; cache to speed connections.
+- == [D3][D4][D2][D1] Transport/location transparency: PassThrough (in‑proc), Unix sockets (multi‑process), TCP/WebSocket (distributed); kernel remains protocol‑agnostic.
+- -- [D1] Kernel “physical layer only” vs [D3] router semantics: keep routing as a server (policy outside kernel).
+
+## PTY Considerations
+- ++ [D5] Wrap TTY‑oriented programs with PTY; render to null/logging if needed.
+- ++ [D1] PTY is exemplar use case (fast raw → screen path; parsed path for recording).
+- == [D3][D4][D2] Routing/HMI/terminology neutral to PTY; operate over pipes.
+
+## Interfaces / Control Surface
+- ++ [D4] Control Surface is source of truth for connectome; Hostess is source for resources/availability.
+- ++ [D3] Routers expose terminals/routes as addressable endpoints; Control Surface can wire through routers.
+- ++ [D2] Executor ≈ supervisor/init; kernel uninvolved in restarts.
+- ++ [D1] Capability‑based `register/lookup` allows late binding of modules even in single‑process setups.
+- -- State ownership: routing state ([D3]) vs topology/connectome ([D4]) vs kernel registry ([D1]). Boundary: kernel registry = local discovery; Hostess = inventory/reservations; routers = path selection.
+
+## Terminology & Positioning
+- == [D2][D1] Kernel = mechanism/physical layer; modules/servers = policy/upper layers.
+- == [D2] Say “servers run on/through the kernel,” avoid “in the kernel.”
+- ++ [D1] OSI‑style analogy clarifies boundaries; microkernel heritage (Mach/L4/QNX/Plan 9) as positioning.
+
+## Discovery / Registry Interplay
+- ++ [D4] Hostess: authoritative server inventory + reservations; per‑terminal state and identities.
+- ++ [D1] Kernel `lookup`: simple, local capability discovery for in‑proc compositions.
+- ++ [D3] Routers: route learning/selection; consume Hostess and LLDP/probe data as hints.
+- -- Avoid dual truth: define roles — Hostess (who/what/availability), Kernel registry (local discovery), Routers (how/where to forward).
+
+## Testing & Performance
+- ++ [D1] Testability first: unit (modules), integration (compositions), end‑to‑end; golden transcripts.
+- ++ [D1] Performance: zero‑copy fast paths; O(N) fan‑out cost; backpressure built‑in via Node streams.
+- == [D5][D4] Reproducibility via manifests and stable interfaces.
+
+## Use Cases (from D1, aligned with others)
+- Minimal VT100: Keyboard → PTY → Screen (raw bytes, no transforms).
+- Multi‑input: Keyboard + Voice + MCP → Merge → PTY → Screen.
+- Multi‑output: PTY → Parser → [Browser, MP4, TTS, Braille].
+- Dual‑path: PTY → Screen (fast raw) and PTY → Parser → MP4 (structured).
+- Remote viewer: Remote PTY → Network → Local outputs (screen/TTS).
+
+## Strong Overlaps (De‑duplication Targets)
+- == Executor/Supervisor concept across [D5][D4][D2] → one component with clear API.
+- == Declarative schemas across [D5][D4][D3][D1] → unify execution, wiring, mesh terminals; shared terminology.
+- == Terminal direction vocabulary across [D4][D5][D3][D1] → input/output/multiplexer/combiner.
+- == Capability types across [D1][D5] → single source of truth for `accepts/produces/features/type`.
+
+## Works Better Together (Synergies)
+- ++ Wrappers ([D5]) + Hostess ([D4]) + Kernel registry ([D1]): consistent registration and discovery at different scopes.
+- ++ Probe/Beacon ([D4]) + Routers ([D3]) + Transport matrix ([D2]): informed path selection and resilient connectivity.
+- ++ HMI ([D4]) + Envelopes ([D3]) + Metrics ([D1]): end‑to‑end observability and control.
+
+## Potential Conflicts (Callouts)
+- -- Static vs dynamic (compile‑time wiring vs mesh learning) → optional discovery; manifests authoritative.
+- -- Central registry vs distributed routes vs local registry → explicit boundaries (inventory vs path vs local discovery).
+- -- Wrapper PTY assumption vs non‑TTY servers → PTY is optional; choose per use case.
+- -- Terminology drift (“in the kernel”) vs policy‑free design → enforce phrasing and boundaries.
+
+## Merged Checklist (Conceptual)
+- == Single Executor/Supervisor (user‑space) with start/stop/restart/query; consumes execution manifest.
+- == Control Surface with wiring manifest; maintains connectome; round‑trips reservation IDs with Hostess.
+- == Hostess: guest‑book identity, per‑terminal usage, reservations/filters; federation later.
+- ++ Routing Server: terminals/routes; envelope parsing; multi‑hop, hairpin via `replyTo`.
+- ++ Discovery stack: optional gossip announcements; LLDP/probe transport viability; central Hostess lookup.
+- == Transport options: PassThrough (local), Unix sockets (multi‑process), TCP/WebSocket (distributed); embedded path later.
+- ++ Kernel: provide `createPipe/connect/split/merge/register/lookup`; keep protocol‑agnostic; backpressure via Node streams.
+- ++ Module model: input/source/transform/output; capability registration (`accepts/produces/features/type`).
+- ++ Wrapper standard: registers capabilities/terminals; integrates with Hostess; local/remote; PTY optional.
+- ++ Tests & perf: unit/integration/E2E; golden transcripts; fast paths and backpressure acknowledged.
diff --git a/VEGA/near-term-and-future-plan.md b/VEGA/near-term-and-future-plan.md
new file mode 100644
index 0000000..e9d3fc4
--- /dev/null
+++ b/VEGA/near-term-and-future-plan.md
@@ -0,0 +1,48 @@
+# Near-Term and Future Plan (VEGA)
+
+Version: 2025-10-12
+Owner: VEGA
+
+## Near Term (next 1–2 sessions)
+
+1) Worker-mode + Adapters (Phase 1)
+- Add ControlBusAdapter + PipeAdapter interfaces
+- Implement worker-backed adapters (MessagePort) for control + data pipes
+- Executor runMode 'worker' (spawn worker, transfer ports, handshake)
+- Demo: mixed inproc + worker servers under same wiring
+
+2) Hostess Control Endpoints
+- Include control endpoint metadata (type + coordinates) in Hostess registration
+- E.g., { control: { kind: 'worker-port'|'unix'|'tcp'|'nats'|'mqtt'|'inproc', coord: '…', topicPrefix?: '…' } }
+
+3) Examples + Docs
+- Update example config to use runMode (inproc + worker)
+- Brief doc: control envelope, topics, endpoints, adapters
+- Verify npm scripts (dev:control-bus, executor demos)
+
+## Next (following sessions)
+
+4) Process-mode (Phase 2)
+- Unix/TCP adapters for control + pipes
+- Executor runMode 'process' with restart policy and blue/green cutover
+- Demo: zero-downtime swap from v1→v2
+
+5) Broker Adapter (optional)
+- NATS adapter for ControlBus (subjects, request/reply), toggle via config
+- Preserve current inproc default for demos
+
+## Future / Parking Lot
+
+- Mux transform (N→1, setActive) for tmux-like switching without rewiring
+- Router + gossip announcements (multi-hop envelopes, hop counts)
+- LLDP/probe/beacon servers (connectivity knowledge)
+- Pipe Meter transform (flow/latency counters) with metrics topics
+- Golden transcript tests for demos
+- Serial/TCP bridge server; VPN overlay experiment
+- Process isolation hardening; worker harness pattern
+
+## State of Mind Snapshot
+
+- Keep kernel inert and tiny; invest in adapters and controllers.
+- Prefer message boundaries over direct calls; stable envelopes, swappable transports.
+- Demos that feel like physical plumbing: tee, cutover, mux.
diff --git a/VEGA/userspace_os-design-draft_001.txt b/VEGA/userspace_os-design-draft_001.txt
new file mode 100644
index 0000000..2b86372
--- /dev/null
+++ b/VEGA/userspace_os-design-draft_001.txt
@@ -0,0 +1,98 @@
+REQUIRES DISCUSSION
+
+- Static vs dynamic (compile-time wiring vs mesh learning) → optional discovery; manifests authoritative.
+- Central registry vs distributed routes vs local registry → explicit boundaries (inventory vs path vs local discovery).
+- Wrapper PTY assumption vs non-TTY servers → PTY is optional; choose per use case.
+- Terminology drift ("in the kernel") vs policy-free design → enforce phrasing and boundaries.
+
+CONFIGURATION IDEAS - NEEDS DISCUSSION
+
+- Dual manifests: execution (Executor) and wiring (Control Surface/connectome).
+- Config-driven mesh (machines, services, network terminals) for multi-machine topologies.
+- “Configuration over code” (YAML/programmatic) to define topologies and routing; lintable.
+- No discovery if baked vs dynamic mesh learning; manifests remain authoritative; discovery optional.
+
+NAMING-IDENTITY-REGISTRATION - NEEDS DISCUSSION
+
+- Hostess identity string format and usage: `fqdn:servername:classHex:owner:authFlag:authMechanism:uuid`; track per-terminal usage.
+- Wrapper registration alignment: wrappers register capabilities/terminals consistent with Hostess schema.
+- Kernel-local capability registry: `accepts`, `produces`, `type`, `features` for module discovery.
+- Router naming: service names/destinations; map serviceName ↔ Hostess identity for unified lookup.
+- Scope boundary: kernel-local `lookup` vs centralized Hostess registry; define local vs federated discovery.
+
+WANTED FEATURES - NEEDS DISCUSSION
+
+- Single-binary systems that can later discover and coordinate.
+- Wrapper-driven integration of third-party servers; lifecycle via Executor (in-proc or external).
+- Multi-machine flows (e.g., PTY→Parser→GPU→Encoder→Display) with hairpin return paths.
+- Canonical flows: minimal VT100, multi-input fan-in, multi-output fan-out, dual-path raw+parsed, remote viewer.
+- PTY: wrap TTY-oriented programs; render to null/logging if needed.
+- PTY as exemplar: fast raw → screen path; parsed path for recording.
+- PTY neutrality elsewhere: routing/HMI/terminology operate over pipes regardless of PTY.
+
+ROUTING-DISCOVERY-CONNECTIVITY - NEEDS DISCUSSION
+
+- Envelopes `{ source, destination, replyTo?, data, ... }` with multi-hop + hairpin via `replyTo`.
+- Discovery: gossip/announcements and/or central registry; hop counts for preference.
+- LLDP + probe/beacon provide transport viability; cache to speed connections.
+- Transport/location transparency: PassThrough (in-proc), Unix sockets (multi-process), TCP/WebSocket (distributed); kernel remains protocol-agnostic.
+- Kernel “physical layer only” vs router semantics: keep routing as a server (policy outside kernel).
+
+INTERFACES-CONTROL-SURFACE - NEEDS DISCUSSION
+
+- Control Surface is source of truth for connectome; Hostess is source for resources/availability.
+- Routers expose terminals/routes as addressable endpoints; Control Surface can wire through routers.
+- Executor ≈ supervisor/init; kernel uninvolved in restarts.
+
+TESTING AND PERFORMANCE
+
+- Testability first: unit (modules), integration (compositions), end-to-end; consider golden transcripts where applicable.
+- Performance principles: zero-copy fast paths; O(N) fan-out cost; rely on Node streams backpressure.
+- Reproducibility: manifests and stable interfaces ensure consistent behavior across environments.
+
+USE CASES
+
+- Minimal VT100: Keyboard → PTY → Screen (raw bytes, no transforms).
+- Multi-input: Keyboard + Voice + MCP → Merge → PTY → Screen.
+- Multi-output: PTY → Parser → [Browser, MP4, TTS, Braille].
+- Dual-path: PTY → Screen (fast raw) and PTY → Parser → MP4 (structured).
+- Remote viewer: Remote PTY → Network → Local outputs (screen/TTS).
+
+STRONG OVERLAPS - NEEDS DISCUSSION
+
+- Executor/Supervisor concept appears in multiple places; converge to a single component with a clear API.
+- Declarative schemas recur (execution, wiring, mesh terminals); unify under one schema set with shared terminology.
+- Terminal direction vocabulary should be uniform: input, output, multiplexer (fan-out), combiner (fan-in).
+- Capability types should have a single source of truth: `accepts`, `produces`, `features`, `type`.
+
+TERMINOLOGY-POSITIONING
+
+- Kernel = mechanism/physical layer; modules/servers = policy/upper layers.
+- Use phrasing: “servers run on/through the kernel”; avoid “in the kernel.”
+- OSI-style analogy clarifies boundaries; microkernel heritage (Mach/L4/QNX/Plan 9) as positioning.
+
+DISCOVERY / REGISTRY INTERPLAY
+
+- Hostess: authoritative server inventory + reservations; per-terminal state and identities.
+- Kernel `lookup`: simple, local capability discovery for in-proc compositions.
+- Routers: route learning/selection; consume Hostess and LLDP/probe data as hints.
+- Avoid dual truth: define roles — Hostess (who/what/availability), Kernel registry (local discovery), Routers (how/where to forward).
+
+WORKS BETTER TOGETHER (SYNERGIES) - NEEDS DISCUSSION
+
+- Wrappers + Hostess + Kernel registry: consistent registration and discovery at different scopes.
+- Probe/Beacon + Routers + Transport matrix: informed path selection and resilient connectivity.
+- HMI + Envelopes + Metrics: end-to-end observability and control.
+
+POTENTIAL HIGH LEVEL VISION DOC OF A LARGER SYSTEM
+
+- Single Executor/Supervisor (user-space) with start/stop/restart/query; consumes execution manifest.
+- Control Surface with wiring manifest; maintains connectome; round-trips reservation IDs with Hostess.
+- Hostess: guest-book identity, per-terminal usage, reservations/filters; federation later.
+- Routing Server: terminals/routes; envelope parsing; multi-hop, hairpin via `replyTo`.
+- Discovery stack: optional gossip announcements; LLDP/probe transport viability; central Hostess lookup.
+- Transport options: PassThrough (local), Unix sockets (multi-process), TCP/WebSocket (distributed); embedded path later.
+- Kernel: provide `createPipe/connect/split/merge/register/lookup`; keep protocol-agnostic; backpressure via Node streams.
+- Module model: input/source/transform/output; capability registration (`accepts/produces/features/type`).
+- Wrapper standard: registers capabilities/terminals; integrates with Hostess; local/remote; PTY optional.
+- Tests & perf: unit/integration/E2E; golden transcripts; fast paths and backpressure acknowledged.
diff --git a/ampcode.md b/ampcode.md
new file mode 100644
index 0000000..1cf99df
--- /dev/null
+++ b/ampcode.md
@@ -0,0 +1,346 @@
+```json
+{
+  "ampcode": "v1",
+  "waves": [
+    { "id": "W-A", "parallel": false, "tasks": ["T1501", "T1502"] },
+    { "id": "W-B", "parallel": true, "depends_on": ["W-A"], "tasks": ["T1503", "T1504"] },
+    { "id": "W-C", "parallel": false, "depends_on": ["W-B"], "tasks": ["T1505"] },
+    { "id": "W-D", "parallel": true, "depends_on": ["W-C"], "tasks": ["T1506", "T1507"] }
+  ],
+  "tasks": [
+    { "id": "T1501", "agent": "worker-1", "title": "Define ControlBusAdapter and extract InProc adapter", "allowedFiles": ["src/control/**"], "verify": ["npm run build", "npm run dev:control-bus"], "deliverables": ["patches/DIFF_T1501_controlbus-adapter.patch"] },
+    { "id": "T1502", "agent": "worker-2", "title": "Define PipeAdapter and extract InProc pipe adapter", "allowedFiles": ["src/pipes/**", "src/kernel/**"], "verify": ["npm run build"], "deliverables": ["patches/DIFF_T1502_pipe-adapter.patch"] },
+    { "id": "T1503", "agent": "worker-3", "title": "Implement WorkerControlBusAdapter (MessagePort)", "allowedFiles": ["src/control/adapters/**", "src/controller/**"], "verify": ["npm run build"], "deliverables": ["patches/DIFF_T1503_worker-controlbus-adapter.patch"] },
+    { "id": "T1504", "agent": "worker-4", "title": "Implement WorkerPipeAdapter (MessagePort duplex)", "allowedFiles": ["src/pipes/adapters/**"], "verify": ["npm run build"], "deliverables": ["patches/DIFF_T1504_worker-pipe-adapter.patch"] },
+    { "id": "T1505", "agent": "worker-5", "title": "Executor runMode 'worker' + harness + handshake", "allowedFiles": ["src/executor/**", "src/config/schema.ts", "src/examples/**"], "verify": ["npm run build", "node dist/examples/worker-demo.js"], "deliverables": ["patches/DIFF_T1505_executor-worker-mode.patch"] },
+    { "id": "T1506", "agent": "worker-6", "title": "Mixed-mode demo (inproc + worker) and script", "allowedFiles": ["src/examples/**", "package.json"], "verify": ["npm run build", "npm run dev:worker-demo"], "deliverables": ["patches/DIFF_T1506_mixed-mode-demo.patch"] },
+    { "id": "T1507", "agent": "worker-7", "title": "Basic tests for worker adapters + handshake", "allowedFiles": ["test/**", "tests/**", "vitest.config.ts"], "verify": ["npm test"], "deliverables": ["patches/DIFF_T1507_worker-tests.patch"] }
+  ]
+}
+```
+
+# Ampcode — Subagent Sprint Plan (Worker-Mode Phase 1)
+
+**Architect**: VEGA  
+**Sprint/Batch**: SB-CTRL-ISOLATION-P1  
+**Reporting**: Results go to `ampcode.log`
+
+---
+
+## Context & Scope
+
+**Goal**: Introduce worker-mode isolation with pluggable adapters for control (ControlBus) and data (pipes), keeping the kernel unchanged and the message envelope stable.
+
+**Constraints**:
+
+- [ ] No kernel growth beyond existing primitives (create/connect/split/merge/register/lookup)
+- [ ] Maintain current demos; add new demo for mixed inproc + worker
+- [ ] Keep message envelope {kind,type,id,ts,correlationId,src,dst,payload} stable
+
+**Prerequisites**:
+
+- TypeScript build must pass; Vitest available for any added tests
+- Node 20+
+
+---
+
+## Execution Waves
+
+```yaml
+waves:
+  - id: W-A
+    parallel: false
+    tasks: [T1501, T1502]
+
+  - id: W-B
+    parallel: true
+    depends_on: [W-A]
+    tasks: [T1503, T1504]
+
+  - id: W-C
+    parallel: false
+    depends_on: [W-B]
+    tasks: [T1505]
+
+  - id: W-D
+    parallel: true
+    depends_on: [W-C]
+    tasks: [T1506, T1507]
+```
+
+---
+
+## Tasks
+
+### TASK T1501 — Define ControlBusAdapter and extract InProc adapter
+
+**Goal**: Introduce a ControlBusAdapter interface and move current in-process bus into an InProc adapter, preserving publish/subscribe API.
+
+**Allowed Files**:
+
+```yaml
+modify:
+  - src/control/ControlBus.ts # refactor to delegate to adapters
+create:
+  - src/control/BusAdapter.ts # interface
+  - src/control/adapters/InProcBusAdapter.ts # PassThrough-based implementation
+```
+
+**Requirements**:
+
+1. ControlBus exposes publish(topic, frame) and subscribe(topic, handler)
+2. BusAdapter defines topic(name) and subscription mechanism; InProc adapter mirrors current behavior
+3. No behavior change to existing demo (`npm run dev:control-bus`)
+
+**Success Criteria**:
+
+- Build passes; control-bus demo prints events/acks as before
+
+**Verification Commands**:
+
+```bash
+npm run build
+npm run dev:control-bus
+```
+
+**Deliverable**: `patches/DIFF_T1501_controlbus-adapter.patch`
+
+---
+
+### TASK T1502 — Define PipeAdapter and extract InProc pipe adapter
+
+**Goal**: Provide a PipeAdapter abstraction for data pipes; extract PassThrough implementation as InProc pipe adapter.
+
+**Allowed Files**:
+
+```yaml
+modify:
+  - src/kernel/Kernel.ts # use adapter-created pipes internally if needed (minimal change)
+create:
+  - src/pipes/PipeAdapter.ts # interface with createReadable/createWritable or createDuplex
+  - src/pipes/adapters/InProcPipe.ts # PassThrough-based duplex
+```
+
+**Requirements**:
+
+1. PipeAdapter can create a Duplex with options (highWaterMark, objectMode)
+2. Default adapter is InProc; kernel behavior unchanged
+
+**Success Criteria**:
+
+- Build passes; existing demos run unchanged
+
+**Verification Commands**:
+
+```bash
+npm run build
+```
+
+**Deliverable**: `patches/DIFF_T1502_pipe-adapter.patch`
+
+---
+
+### TASK T1503 — Implement WorkerControlBusAdapter (MessagePort)
+
+**Goal**: Implement a ControlBus adapter over MessagePort for worker isolates.
+
+**Allowed Files**:
+
+```yaml
+create:
+  - src/control/adapters/WorkerBusAdapter.ts # MessagePort-backed publish/subscribe
+```
+
+**Requirements**:
+
+1. Serialize frames as structured clones over MessagePort
+2. Support subscribe/unsubscribe; multiple topics per port
+
+**Success Criteria**:
+
+- Build passes; basic local harness sends/receives frames across a worker
+
+**Verification Commands**:
+
+```bash
+npm run build
+```
+
+**Deliverable**: `patches/DIFF_T1503_worker-controlbus-adapter.patch`
+
+---
+
+### TASK T1504 — Implement WorkerPipeAdapter (MessagePort duplex)
+
+**Goal**: Provide a Duplex-like pipe over MessagePort with backpressure emulation.
+
+**Allowed Files**:
+
+```yaml
+create:
+  - src/pipes/adapters/WorkerPipe.ts # wraps MessagePort into Duplex; basic backpressure
+```
+
+**Requirements**:
+
+1. Support Buffer payloads; objectMode optional for control tests
+2. Minimal backpressure (pause/resume semantics simulated)
+
+**Success Criteria**:
+
+- Build passes; simple echo across worker using WorkerPipe
+
+**Verification Commands**:
+
+```bash
+npm run build
+```
+
+**Deliverable**: `patches/DIFF_T1504_worker-pipe-adapter.patch`
+
+---
+
+### TASK T1505 — Executor runMode 'worker' + harness + handshake
+
+**Goal**: Extend Executor to start servers in worker mode with a minimal harness and control handshake.
+
+**Allowed Files**:
+
+```yaml
+modify:
+  - src/executor/Executor.ts # runMode 'worker'
+  - src/config/schema.ts # runMode already present
+create:
+  - src/executor/workerHarness.ts # boots a module, wires adapters, sends control.hello
+  - src/examples/worker-demo.ts # mixed-mode demo entry
+```
+
+**Requirements**:
+
+1. Executor spawns Worker with workerData (ports/endpoints as needed)
+2. Worker sends control.hello; Executor logs ready
+3. Mixed-mode wiring: inproc source → worker transform → inproc sink
+
+**Success Criteria**:
+
+- `node dist/examples/worker-demo.js` prints events and acks; data flows end-to-end
+
+**Verification Commands**:
+
+```bash
+npm run build
+node dist/examples/worker-demo.js
+```
+
+**Deliverable**: `patches/DIFF_T1505_executor-worker-mode.patch`
+
+---
+
+### TASK T1506 — Mixed-mode demo (inproc + worker) and script
+
+**Goal**: Add a demo showcasing inproc + worker servers under one wiring and add npm script.
+
+**Allowed Files**:
+
+```yaml
+create:
+  - src/examples/worker-demo.ts
+modify:
+  - package.json # add dev:worker-demo script
+```
+
+**Requirements**:
+
+1. Demo must wire at least three nodes across inproc/worker boundary
+2. Log key events to stdout for verification
+
+**Success Criteria**:
+
+- `npm run dev:worker-demo` runs and prints expected messages
+
+**Verification Commands**:
+
+```bash
+npm run build
+npm run dev:worker-demo
+```
+
+**Deliverable**: `patches/DIFF_T1506_mixed-mode-demo.patch`
+
+---
+
+### TASK T1507 — Basic tests for worker adapters + handshake
+
+**Goal**: Cover adapter send/receive and handshake path with minimal tests.
+
+**Allowed Files**:
+
+```yaml
+create:
+  - tests/worker/workerAdapters.spec.ts
+modify:
+  - vitest.config.ts
+```
+
+**Requirements**:
+
+1. Round-trip a control frame over WorkerBusAdapter
+2. Round-trip a Buffer over WorkerPipe
+3. Assert handshake event structure
+
+**Success Criteria**:
+
+- `npm test` passes locally
+
+**Verification Commands**:
+
+```bash
+npm test
+```
+
+**Deliverable**: `patches/DIFF_T1507_worker-tests.patch`
+
+---
+
+## Quality Bar
+
+**Non-negotiable**:
+
+- [ ] Build passes; no unrelated changes
+- [ ] Tests (if added) deterministic; avoid long sleeps
+- [ ] Kernel untouched beyond adapter hooks
+- [ ] Message envelope unchanged
+
+**Conventions**:
+
+- Unified diffs against current branch HEAD
+- Keep changes minimal and focused per task
+- Update docs only when explicitly listed
+
+---
+
+## Reporting Format
+
+At completion, aggregate to `ampcode.log` using the template in agent_template/AMPCODE_TEMPLATE.md (TASK sections with PASS/FAIL, verification, deliverables).
+
+---
+
+## Master Agent Notes
+
+- Execute waves in order; parallelize where `parallel: true`
+- Stop dependent waves if a task FAILs; report immediately
+- Place diff files under `patches/` at repo root
+
+---
+
+## Appendix
+
+**Rollback Plan**: If any adapter task fails, revert only that adapter’s files; keep ControlBus (inproc) path intact to preserve existing demos.
+
+**Reference Links**:
+
+- VEGA/near-term-and-future-plan.md
+- src/control/ControlBus.ts (baseline)
+- src/state/StateManager.ts
+- src/executor/Executor.ts
+
diff --git a/dist/control/BusAdapter.d.ts b/dist/control/BusAdapter.d.ts
new file mode 100644
index 0000000..ac1fa8b
--- /dev/null
+++ b/dist/control/BusAdapter.d.ts
@@ -0,0 +1,5 @@
+import { PassThrough } from 'node:stream';
+export interface BusAdapter {
+    topic(name: string): PassThrough;
+}
+//# sourceMappingURL=BusAdapter.d.ts.map
\ No newline at end of file
diff --git a/dist/control/BusAdapter.d.ts.map b/dist/control/BusAdapter.d.ts.map
new file mode 100644
index 0000000..5754522
--- /dev/null
+++ b/dist/control/BusAdapter.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"BusAdapter.d.ts","sourceRoot":"","sources":["../../src/control/BusAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAE1C,MAAM,WAAW,UAAU;IACzB,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,WAAW,CAAC;CAClC"}
\ No newline at end of file
diff --git a/dist/control/BusAdapter.js b/dist/control/BusAdapter.js
new file mode 100644
index 0000000..5c034cf
--- /dev/null
+++ b/dist/control/BusAdapter.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=BusAdapter.js.map
\ No newline at end of file
diff --git a/dist/control/BusAdapter.js.map b/dist/control/BusAdapter.js.map
new file mode 100644
index 0000000..0ab0023
--- /dev/null
+++ b/dist/control/BusAdapter.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"BusAdapter.js","sourceRoot":"","sources":["../../src/control/BusAdapter.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/control/ControlBus.d.ts b/dist/control/ControlBus.d.ts
new file mode 100644
index 0000000..3b5a6b0
--- /dev/null
+++ b/dist/control/ControlBus.d.ts
@@ -0,0 +1,9 @@
+import { BusAdapter } from './BusAdapter.js';
+export type ControlMessage = Record<string, any>;
+export declare class ControlBus {
+    private adapter;
+    constructor(adapter?: BusAdapter);
+    publish(topic: string, msg: ControlMessage): void;
+    subscribe(topic: string, handler: (msg: ControlMessage) => void): () => void;
+}
+//# sourceMappingURL=ControlBus.d.ts.map
\ No newline at end of file
diff --git a/dist/control/ControlBus.d.ts.map b/dist/control/ControlBus.d.ts.map
new file mode 100644
index 0000000..9c841cd
--- /dev/null
+++ b/dist/control/ControlBus.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ControlBus.d.ts","sourceRoot":"","sources":["../../src/control/ControlBus.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAG7C,MAAM,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AAEjD,qBAAa,UAAU;IACrB,OAAO,CAAC,OAAO,CAAa;gBAEhB,OAAO,CAAC,EAAE,UAAU;IAIhC,OAAO,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,cAAc,GAAG,IAAI;IAIjD,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,cAAc,KAAK,IAAI,GAAG,MAAM,IAAI;CAM7E"}
\ No newline at end of file
diff --git a/dist/control/ControlBus.js b/dist/control/ControlBus.js
new file mode 100644
index 0000000..ede18f7
--- /dev/null
+++ b/dist/control/ControlBus.js
@@ -0,0 +1,17 @@
+import { InProcBusAdapter } from './adapters/InProcBusAdapter.js';
+export class ControlBus {
+    adapter;
+    constructor(adapter) {
+        this.adapter = adapter ?? new InProcBusAdapter();
+    }
+    publish(topic, msg) {
+        this.adapter.topic(topic).write(msg);
+    }
+    subscribe(topic, handler) {
+        const t = this.adapter.topic(topic);
+        const onData = (m) => handler(m);
+        t.on('data', onData);
+        return () => t.off('data', onData);
+    }
+}
+//# sourceMappingURL=ControlBus.js.map
\ No newline at end of file
diff --git a/dist/control/ControlBus.js.map b/dist/control/ControlBus.js.map
new file mode 100644
index 0000000..43a30d5
--- /dev/null
+++ b/dist/control/ControlBus.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ControlBus.js","sourceRoot":"","sources":["../../src/control/ControlBus.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAIlE,MAAM,OAAO,UAAU;IACb,OAAO,CAAa;IAE5B,YAAY,OAAoB;QAC9B,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,gBAAgB,EAAE,CAAC;IACnD,CAAC;IAED,OAAO,CAAC,KAAa,EAAE,GAAmB;QACxC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvC,CAAC;IAED,SAAS,CAAC,KAAa,EAAE,OAAsC;QAC7D,MAAM,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,MAAM,GAAG,CAAC,CAAM,EAAE,EAAE,CAAC,OAAO,CAAC,CAAmB,CAAC,CAAC;QACxD,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACrB,OAAO,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACrC,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/control/adapters/InProcBusAdapter.d.ts b/dist/control/adapters/InProcBusAdapter.d.ts
new file mode 100644
index 0000000..f58ebea
--- /dev/null
+++ b/dist/control/adapters/InProcBusAdapter.d.ts
@@ -0,0 +1,7 @@
+import { PassThrough } from 'node:stream';
+import { BusAdapter } from '../BusAdapter.js';
+export declare class InProcBusAdapter implements BusAdapter {
+    private topics;
+    topic(name: string): PassThrough;
+}
+//# sourceMappingURL=InProcBusAdapter.d.ts.map
\ No newline at end of file
diff --git a/dist/control/adapters/InProcBusAdapter.d.ts.map b/dist/control/adapters/InProcBusAdapter.d.ts.map
new file mode 100644
index 0000000..dc39da1
--- /dev/null
+++ b/dist/control/adapters/InProcBusAdapter.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"InProcBusAdapter.d.ts","sourceRoot":"","sources":["../../../src/control/adapters/InProcBusAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAE9C,qBAAa,gBAAiB,YAAW,UAAU;IACjD,OAAO,CAAC,MAAM,CAAkC;IAEhD,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,WAAW;CAQjC"}
\ No newline at end of file
diff --git a/dist/control/adapters/InProcBusAdapter.js b/dist/control/adapters/InProcBusAdapter.js
new file mode 100644
index 0000000..3a0bece
--- /dev/null
+++ b/dist/control/adapters/InProcBusAdapter.js
@@ -0,0 +1,13 @@
+import { PassThrough } from 'node:stream';
+export class InProcBusAdapter {
+    topics = new Map();
+    topic(name) {
+        let t = this.topics.get(name);
+        if (!t) {
+            t = new PassThrough({ objectMode: true });
+            this.topics.set(name, t);
+        }
+        return t;
+    }
+}
+//# sourceMappingURL=InProcBusAdapter.js.map
\ No newline at end of file
diff --git a/dist/control/adapters/InProcBusAdapter.js.map b/dist/control/adapters/InProcBusAdapter.js.map
new file mode 100644
index 0000000..03c2330
--- /dev/null
+++ b/dist/control/adapters/InProcBusAdapter.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"InProcBusAdapter.js","sourceRoot":"","sources":["../../../src/control/adapters/InProcBusAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAG1C,MAAM,OAAO,gBAAgB;IACnB,MAAM,GAAG,IAAI,GAAG,EAAuB,CAAC;IAEhD,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,EAAE,CAAC;YACP,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,CAAC,CAAC;IACX,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/control/adapters/WorkerBusAdapter.d.ts b/dist/control/adapters/WorkerBusAdapter.d.ts
new file mode 100644
index 0000000..636ae7a
--- /dev/null
+++ b/dist/control/adapters/WorkerBusAdapter.d.ts
@@ -0,0 +1,14 @@
+import { PassThrough } from 'node:stream';
+import { MessagePort } from 'node:worker_threads';
+import { BusAdapter } from '../BusAdapter.js';
+export declare class WorkerBusAdapter implements BusAdapter {
+    private port;
+    private topics;
+    private subscriptions;
+    constructor(port: MessagePort);
+    topic(name: string): PassThrough;
+    private handleMessage;
+    unsubscribe(topic: string): void;
+    close(): void;
+}
+//# sourceMappingURL=WorkerBusAdapter.d.ts.map
\ No newline at end of file
diff --git a/dist/control/adapters/WorkerBusAdapter.d.ts.map b/dist/control/adapters/WorkerBusAdapter.d.ts.map
new file mode 100644
index 0000000..23d898e
--- /dev/null
+++ b/dist/control/adapters/WorkerBusAdapter.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WorkerBusAdapter.d.ts","sourceRoot":"","sources":["../../../src/control/adapters/WorkerBusAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAQ9C,qBAAa,gBAAiB,YAAW,UAAU;IACjD,OAAO,CAAC,IAAI,CAAc;IAC1B,OAAO,CAAC,MAAM,CAAkC;IAChD,OAAO,CAAC,aAAa,CAAqB;gBAE9B,IAAI,EAAE,WAAW;IAK7B,KAAK,CAAC,IAAI,EAAE,MAAM,GAAG,WAAW;IAyBhC,OAAO,CAAC,aAAa;IAUrB,WAAW,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI;IAgBhC,KAAK,IAAI,IAAI;CAMd"}
\ No newline at end of file
diff --git a/dist/control/adapters/WorkerBusAdapter.js b/dist/control/adapters/WorkerBusAdapter.js
new file mode 100644
index 0000000..d7c30f2
--- /dev/null
+++ b/dist/control/adapters/WorkerBusAdapter.js
@@ -0,0 +1,61 @@
+import { PassThrough } from 'node:stream';
+export class WorkerBusAdapter {
+    port;
+    topics = new Map();
+    subscriptions = new Set();
+    constructor(port) {
+        this.port = port;
+        this.port.on('message', this.handleMessage.bind(this));
+    }
+    topic(name) {
+        let t = this.topics.get(name);
+        if (!t) {
+            t = new PassThrough({ objectMode: true });
+            this.topics.set(name, t);
+            t.on('data', (data) => {
+                this.port.postMessage({
+                    type: 'publish',
+                    topic: name,
+                    data
+                });
+            });
+            if (!this.subscriptions.has(name)) {
+                this.subscriptions.add(name);
+                this.port.postMessage({
+                    type: 'subscribe',
+                    topic: name
+                });
+            }
+        }
+        return t;
+    }
+    handleMessage(msg) {
+        if (msg.type === 'publish') {
+            const stream = this.topics.get(msg.topic);
+            if (stream && msg.data !== undefined) {
+                stream.write(msg.data);
+            }
+        }
+    }
+    unsubscribe(topic) {
+        if (this.subscriptions.has(topic)) {
+            this.subscriptions.delete(topic);
+            this.port.postMessage({
+                type: 'unsubscribe',
+                topic
+            });
+        }
+        const stream = this.topics.get(topic);
+        if (stream) {
+            stream.end();
+            this.topics.delete(topic);
+        }
+    }
+    close() {
+        for (const topic of this.subscriptions) {
+            this.unsubscribe(topic);
+        }
+        this.port.close();
+    }
+}
+//# sourceMappingURL=WorkerBusAdapter.js.map
\ No newline at end of file
diff --git a/dist/control/adapters/WorkerBusAdapter.js.map b/dist/control/adapters/WorkerBusAdapter.js.map
new file mode 100644
index 0000000..7f71d81
--- /dev/null
+++ b/dist/control/adapters/WorkerBusAdapter.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"WorkerBusAdapter.js","sourceRoot":"","sources":["../../../src/control/adapters/WorkerBusAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAU1C,MAAM,OAAO,gBAAgB;IACnB,IAAI,CAAc;IAClB,MAAM,GAAG,IAAI,GAAG,EAAuB,CAAC;IACxC,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;IAE1C,YAAY,IAAiB;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,EAAE,CAAC;YACP,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEzB,CAAC,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAS,EAAE,EAAE;gBACzB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;oBACpB,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE,IAAI;oBACX,IAAI;iBACU,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAClC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;oBACpB,IAAI,EAAE,WAAW;oBACjB,KAAK,EAAE,IAAI;iBACG,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QACD,OAAO,CAAC,CAAC;IACX,CAAC;IAEO,aAAa,CAAC,GAAgB;QAEpC,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC1C,IAAI,MAAM,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;gBACrC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC;QACH,CAAC;IACH,CAAC;IAED,WAAW,CAAC,KAAa;QACvB,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;gBACpB,IAAI,EAAE,aAAa;gBACnB,KAAK;aACS,CAAC,CAAC;QACpB,CAAC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE,CAAC;YACX,MAAM,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,KAAK;QACH,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YACvC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/controller/TopologyController.d.ts b/dist/controller/TopologyController.d.ts
new file mode 100644
index 0000000..f7849e1
--- /dev/null
+++ b/dist/controller/TopologyController.d.ts
@@ -0,0 +1,22 @@
+import { Kernel } from '../kernel/Kernel.js';
+import { StateManager } from '../state/StateManager.js';
+import { ControlBus } from '../control/ControlBus.js';
+export interface TopologyControllerOptions {
+    commandsTopic?: string;
+    eventsTopic?: string;
+}
+export declare class TopologyController {
+    private kernel;
+    private state;
+    private bus;
+    private unsub?;
+    private readonly commandsTopic;
+    private readonly eventsTopic;
+    constructor(kernel: Kernel, state: StateManager, bus: ControlBus, opts?: TopologyControllerOptions);
+    start(): void;
+    stop(): void;
+    private ack;
+    private err;
+    private handleCommand;
+}
+//# sourceMappingURL=TopologyController.d.ts.map
\ No newline at end of file
diff --git a/dist/controller/TopologyController.d.ts.map b/dist/controller/TopologyController.d.ts.map
new file mode 100644
index 0000000..e39ee03
--- /dev/null
+++ b/dist/controller/TopologyController.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"TopologyController.d.ts","sourceRoot":"","sources":["../../src/controller/TopologyController.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AAetD,MAAM,WAAW,yBAAyB;IACxC,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB,WAAW,CAAC,EAAE,MAAM,CAAC;CACtB;AAED,qBAAa,kBAAkB;IAM3B,OAAO,CAAC,MAAM;IACd,OAAO,CAAC,KAAK;IACb,OAAO,CAAC,GAAG;IAPb,OAAO,CAAC,KAAK,CAAC,CAAa;IAC3B,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAS;IACvC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAS;gBAG3B,MAAM,EAAE,MAAM,EACd,KAAK,EAAE,YAAY,EACnB,GAAG,EAAE,UAAU,EACvB,IAAI,GAAE,yBAA8B;IAMtC,KAAK,IAAI,IAAI;IASb,IAAI,IAAI,IAAI;IAKZ,OAAO,CAAC,GAAG;IAKX,OAAO,CAAC,GAAG;IAKX,OAAO,CAAC,aAAa;CAqCtB"}
\ No newline at end of file
diff --git a/dist/controller/TopologyController.js b/dist/controller/TopologyController.js
new file mode 100644
index 0000000..e2f2477
--- /dev/null
+++ b/dist/controller/TopologyController.js
@@ -0,0 +1,76 @@
+export class TopologyController {
+    kernel;
+    state;
+    bus;
+    unsub;
+    commandsTopic;
+    eventsTopic;
+    constructor(kernel, state, bus, opts = {}) {
+        this.kernel = kernel;
+        this.state = state;
+        this.bus = bus;
+        this.commandsTopic = opts.commandsTopic ?? 'topology.commands';
+        this.eventsTopic = opts.eventsTopic ?? 'topology.events';
+    }
+    start() {
+        if (this.unsub)
+            return;
+        this.unsub = this.bus.subscribe(this.commandsTopic, (msg) => this.handleCommand(msg));
+        this.state.subscribe((e) => {
+            const frame = { kind: 'event', type: e.type, ts: Date.now(), payload: e };
+            this.bus.publish(this.eventsTopic, frame);
+        });
+    }
+    stop() {
+        if (this.unsub)
+            this.unsub();
+        this.unsub = undefined;
+    }
+    ack(correlationId, payload) {
+        const frame = { kind: 'ack', type: 'ok', ts: Date.now(), correlationId, payload };
+        this.bus.publish(this.eventsTopic, frame);
+    }
+    err(correlationId, message) {
+        const frame = { kind: 'err', type: 'error', ts: Date.now(), correlationId, payload: { message } };
+        this.bus.publish(this.eventsTopic, frame);
+    }
+    handleCommand(frame) {
+        try {
+            const { type, payload, id } = frame;
+            switch (type) {
+                case 'declare-node': {
+                    this.state.addNode(payload);
+                    this.ack(id);
+                    break;
+                }
+                case 'connect': {
+                    this.state.connect(payload.from, payload.to);
+                    this.ack(id);
+                    break;
+                }
+                case 'split': {
+                    this.state.split(payload.source, payload.destinations);
+                    this.ack(id);
+                    break;
+                }
+                case 'merge': {
+                    this.state.merge(payload.sources, payload.destination);
+                    this.ack(id);
+                    break;
+                }
+                case 'snapshot': {
+                    const topo = this.state.getTopology();
+                    this.bus.publish(this.eventsTopic, { kind: 'event', type: 'topology.snapshot', ts: Date.now(), correlationId: id, payload: topo });
+                    break;
+                }
+                default: {
+                    this.err(id, `Unknown command type: ${type}`);
+                }
+            }
+        }
+        catch (e) {
+            this.err(frame.id, e?.message ?? String(e));
+        }
+    }
+}
+//# sourceMappingURL=TopologyController.js.map
\ No newline at end of file
diff --git a/dist/controller/TopologyController.js.map b/dist/controller/TopologyController.js.map
new file mode 100644
index 0000000..3aba245
--- /dev/null
+++ b/dist/controller/TopologyController.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"TopologyController.js","sourceRoot":"","sources":["../../src/controller/TopologyController.ts"],"names":[],"mappings":"AAsBA,MAAM,OAAO,kBAAkB;IAMnB;IACA;IACA;IAPF,KAAK,CAAc;IACV,aAAa,CAAS;IACtB,WAAW,CAAS;IAErC,YACU,MAAc,EACd,KAAmB,EACnB,GAAe,EACvB,OAAkC,EAAE;QAH5B,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAc;QACnB,QAAG,GAAH,GAAG,CAAY;QAGvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,mBAAmB,CAAC;QAC/D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,iBAAiB,CAAC;IAC3D,CAAC;IAED,KAAK;QACH,IAAI,IAAI,CAAC,KAAK;YAAE,OAAO;QACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,GAAgB,CAAC,CAAC,CAAC;QACnG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE;YACzB,MAAM,KAAK,GAAc,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;YACrF,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;IACzB,CAAC;IAEO,GAAG,CAAC,aAAsB,EAAE,OAAa;QAC/C,MAAM,KAAK,GAAc,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC;QAC7F,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEO,GAAG,CAAC,aAAiC,EAAE,OAAe;QAC5D,MAAM,KAAK,GAAc,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC;QAC7G,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEO,aAAa,CAAC,KAAgB;QACpC,IAAI,CAAC;YACH,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC;YACpC,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,cAAc,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;oBAC5B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACb,MAAM;gBACR,CAAC;gBACD,KAAK,SAAS,CAAC,CAAC,CAAC;oBACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;oBAC7C,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACb,MAAM;gBACR,CAAC;gBACD,KAAK,OAAO,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;oBACvD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACb,MAAM;gBACR,CAAC;gBACD,KAAK,OAAO,CAAC,CAAC,CAAC;oBACb,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;oBACvD,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACb,MAAM;gBACR,CAAC;gBACD,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;oBACtC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;oBACnI,MAAM;gBACR,CAAC;gBACD,OAAO,CAAC,CAAC,CAAC;oBACR,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,yBAAyB,IAAI,EAAE,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,EAAE,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C,CAAC;IACH,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/examples/control-bus-demo.d.ts b/dist/examples/control-bus-demo.d.ts
new file mode 100644
index 0000000..aff7457
--- /dev/null
+++ b/dist/examples/control-bus-demo.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=control-bus-demo.d.ts.map
\ No newline at end of file
diff --git a/dist/examples/control-bus-demo.d.ts.map b/dist/examples/control-bus-demo.d.ts.map
new file mode 100644
index 0000000..4b3dd1e
--- /dev/null
+++ b/dist/examples/control-bus-demo.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"control-bus-demo.d.ts","sourceRoot":"","sources":["../../src/examples/control-bus-demo.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/examples/control-bus-demo.js b/dist/examples/control-bus-demo.js
new file mode 100644
index 0000000..43df9e5
--- /dev/null
+++ b/dist/examples/control-bus-demo.js
@@ -0,0 +1,38 @@
+import { Kernel } from '../kernel/Kernel.js';
+import { StateManager } from '../state/StateManager.js';
+import { ControlBus } from '../control/ControlBus.js';
+import { TopologyController } from '../controller/TopologyController.js';
+function sleep(ms) { return new Promise(res => setTimeout(res, ms)); }
+async function main() {
+    const kernel = new Kernel();
+    const state = new StateManager(kernel);
+    const bus = new ControlBus();
+    const controller = new TopologyController(kernel, state, bus, { commandsTopic: 'topology.commands', eventsTopic: 'topology.events' });
+    controller.start();
+    // HMI subscribe to events
+    bus.subscribe('topology.events', (e) => {
+        if (e.kind === 'event') {
+            console.log('[event]', e.type, e.payload ?? '');
+        }
+        else if (e.kind === 'ack') {
+            console.log('[ack]', e.correlationId);
+        }
+        else if (e.kind === 'err') {
+            console.error('[err]', e.payload?.message);
+        }
+    });
+    const cmd = (type, payload) => bus.publish('topology.commands', { kind: 'cmd', type, id: Math.random().toString(16).slice(2), ts: Date.now(), payload });
+    // Declare three nodes with terminals
+    cmd('declare-node', { id: 'timer-1', name: 'Timer', terminals: [{ name: 'output', direction: 'output' }] });
+    cmd('declare-node', { id: 'upper-1', name: 'Upper', terminals: [{ name: 'input', direction: 'input' }, { name: 'output', direction: 'output' }] });
+    cmd('declare-node', { id: 'sink-1', name: 'Sink', terminals: [{ name: 'input', direction: 'input' }] });
+    // Wire: timer.output -> upper.input -> sink.input
+    await sleep(10);
+    cmd('connect', { from: 'timer-1.output', to: 'upper-1.input' });
+    cmd('connect', { from: 'upper-1.output', to: 'sink-1.input' });
+    // Snapshot
+    await sleep(10);
+    cmd('snapshot');
+}
+main().catch(err => { console.error(err); process.exit(1); });
+//# sourceMappingURL=control-bus-demo.js.map
\ No newline at end of file
diff --git a/dist/examples/control-bus-demo.js.map b/dist/examples/control-bus-demo.js.map
new file mode 100644
index 0000000..7b252aa
--- /dev/null
+++ b/dist/examples/control-bus-demo.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"control-bus-demo.js","sourceRoot":"","sources":["../../src/examples/control-bus-demo.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAC;AAEzE,SAAS,KAAK,CAAC,EAAU,IAAI,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAE9E,KAAK,UAAU,IAAI;IACjB,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;IAC5B,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;IAC7B,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,aAAa,EAAE,mBAAmB,EAAE,WAAW,EAAE,iBAAiB,EAAE,CAAC,CAAC;IACtI,UAAU,CAAC,KAAK,EAAE,CAAC;IAEnB,0BAA0B;IAC1B,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAE,EAAE;QACrC,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACvB,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;aAAM,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC;QACxC,CAAC;aAAM,IAAI,CAAC,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;YAC5B,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,GAAG,GAAG,CAAC,IAAY,EAAE,OAAa,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAEvK,qCAAqC;IACrC,GAAG,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5G,GAAG,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,CAAC;IACnJ,GAAG,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;IAExG,kDAAkD;IAClD,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,CAAC;IAChE,GAAG,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;IAE/D,WAAW;IACX,MAAM,KAAK,CAAC,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,UAAU,CAAC,CAAC;AAClB,CAAC;AAED,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC"}
\ No newline at end of file
diff --git a/dist/kernel/Kernel.d.ts b/dist/kernel/Kernel.d.ts
index 4f0fb91..1449bb8 100644
--- a/dist/kernel/Kernel.d.ts
+++ b/dist/kernel/Kernel.d.ts
@@ -1,6 +1,9 @@
 import type { Pipe, StreamOptions, Capabilities, CapabilityQuery } from '../types/stream';
+import type { PipeAdapter } from '../pipes/PipeAdapter';
 export declare class Kernel {
     private registry;
+    private adapter;
+    constructor(adapter?: PipeAdapter);
     createPipe(options?: StreamOptions): Pipe;
     connect(from: Pipe, to: Pipe): void;
     split(source: Pipe, destinations: Pipe[]): void;
diff --git a/dist/kernel/Kernel.d.ts.map b/dist/kernel/Kernel.d.ts.map
index 2ac9f8c..7f8d0d0 100644
--- a/dist/kernel/Kernel.d.ts.map
+++ b/dist/kernel/Kernel.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"Kernel.d.ts","sourceRoot":"","sources":["../../src/kernel/Kernel.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAE1F,qBAAa,MAAM;IACjB,OAAO,CAAC,QAAQ,CAAiE;IAEjF,UAAU,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,IAAI;IAIzC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,GAAG,IAAI;IAInC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI;IAM/C,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,GAAG,IAAI;IAM/C,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,GAAG,IAAI;IAIpE,MAAM,CAAC,KAAK,EAAE,eAAe,GAAG,IAAI,EAAE;CAevC"}
\ No newline at end of file
+{"version":3,"file":"Kernel.d.ts","sourceRoot":"","sources":["../../src/kernel/Kernel.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAC1F,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAGxD,qBAAa,MAAM;IACjB,OAAO,CAAC,QAAQ,CAAiE;IACjF,OAAO,CAAC,OAAO,CAAc;gBAEjB,OAAO,CAAC,EAAE,WAAW;IAIjC,UAAU,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,IAAI;IAIzC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,GAAG,IAAI;IAInC,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,IAAI;IAM/C,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,GAAG,IAAI;IAM/C,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,IAAI,GAAG,IAAI;IAIpE,MAAM,CAAC,KAAK,EAAE,eAAe,GAAG,IAAI,EAAE;CAevC"}
\ No newline at end of file
diff --git a/dist/kernel/Kernel.js b/dist/kernel/Kernel.js
index 9b0ad66..531b587 100644
--- a/dist/kernel/Kernel.js
+++ b/dist/kernel/Kernel.js
@@ -1,8 +1,12 @@
-import { PassThrough } from 'stream';
+import { InProcPipe } from '../pipes/adapters/InProcPipe';
 export class Kernel {
     registry = new Map();
+    adapter;
+    constructor(adapter) {
+        this.adapter = adapter ?? new InProcPipe();
+    }
     createPipe(options) {
-        return new PassThrough(options);
+        return this.adapter.createDuplex(options);
     }
     connect(from, to) {
         from.pipe(to);
diff --git a/dist/kernel/Kernel.js.map b/dist/kernel/Kernel.js.map
index d527602..1d0f4f2 100644
--- a/dist/kernel/Kernel.js.map
+++ b/dist/kernel/Kernel.js.map
@@ -1 +1 @@
-{"version":3,"file":"Kernel.js","sourceRoot":"","sources":["../../src/kernel/Kernel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAGrC,MAAM,OAAO,MAAM;IACT,QAAQ,GAAG,IAAI,GAAG,EAAsD,CAAC;IAEjF,UAAU,CAAC,OAAuB;QAChC,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,EAAQ;QAC1B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,MAAY,EAAE,YAAoB;QACtC,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,WAAiB;QACtC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,YAA0B,EAAE,IAAU;QAC3D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,KAAsB;QAC3B,MAAM,OAAO,GAAW,EAAE,CAAC;QAC3B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC;YAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC;YAChC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;gBAAE,SAAS;YACrF,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAAE,SAAS;YACzF,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,QAAQ;oBAAE,SAAS;gBAC7B,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,MAAM;oBAAE,SAAS;YACxB,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF"}
\ No newline at end of file
+{"version":3,"file":"Kernel.js","sourceRoot":"","sources":["../../src/kernel/Kernel.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAE1D,MAAM,OAAO,MAAM;IACT,QAAQ,GAAG,IAAI,GAAG,EAAsD,CAAC;IACzE,OAAO,CAAc;IAE7B,YAAY,OAAqB;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,UAAU,EAAE,CAAC;IAC7C,CAAC;IAED,UAAU,CAAC,OAAuB;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,EAAQ;QAC1B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,MAAY,EAAE,YAAoB;QACtC,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,WAAiB;QACtC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;YAC7B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,QAAQ,CAAC,IAAY,EAAE,YAA0B,EAAE,IAAU;QAC3D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,KAAsB;QAC3B,MAAM,OAAO,GAAW,EAAE,CAAC;QAC3B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC;YAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC;YAChC,IAAI,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;gBAAE,SAAS;YACrF,IAAI,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAAE,SAAS;YACzF,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,QAAQ;oBAAE,SAAS;gBAC7B,MAAM,MAAM,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,MAAM;oBAAE,SAAS;YACxB,CAAC;YACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/pipes/PipeAdapter.d.ts b/dist/pipes/PipeAdapter.d.ts
new file mode 100644
index 0000000..ba5fd65
--- /dev/null
+++ b/dist/pipes/PipeAdapter.d.ts
@@ -0,0 +1,5 @@
+import type { Pipe, StreamOptions } from '../types/stream';
+export interface PipeAdapter {
+    createDuplex(options?: StreamOptions): Pipe;
+}
+//# sourceMappingURL=PipeAdapter.d.ts.map
\ No newline at end of file
diff --git a/dist/pipes/PipeAdapter.d.ts.map b/dist/pipes/PipeAdapter.d.ts.map
new file mode 100644
index 0000000..ecdf8bc
--- /dev/null
+++ b/dist/pipes/PipeAdapter.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"PipeAdapter.d.ts","sourceRoot":"","sources":["../../src/pipes/PipeAdapter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAE3D,MAAM,WAAW,WAAW;IAC1B,YAAY,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC;CAC7C"}
\ No newline at end of file
diff --git a/dist/pipes/PipeAdapter.js b/dist/pipes/PipeAdapter.js
new file mode 100644
index 0000000..dd24857
--- /dev/null
+++ b/dist/pipes/PipeAdapter.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=PipeAdapter.js.map
\ No newline at end of file
diff --git a/dist/pipes/PipeAdapter.js.map b/dist/pipes/PipeAdapter.js.map
new file mode 100644
index 0000000..4f5d5e7
--- /dev/null
+++ b/dist/pipes/PipeAdapter.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PipeAdapter.js","sourceRoot":"","sources":["../../src/pipes/PipeAdapter.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/dist/pipes/adapters/InProcPipe.d.ts b/dist/pipes/adapters/InProcPipe.d.ts
new file mode 100644
index 0000000..f06412a
--- /dev/null
+++ b/dist/pipes/adapters/InProcPipe.d.ts
@@ -0,0 +1,6 @@
+import type { Pipe, StreamOptions } from '../../types/stream';
+import type { PipeAdapter } from '../PipeAdapter';
+export declare class InProcPipe implements PipeAdapter {
+    createDuplex(options?: StreamOptions): Pipe;
+}
+//# sourceMappingURL=InProcPipe.d.ts.map
\ No newline at end of file
diff --git a/dist/pipes/adapters/InProcPipe.d.ts.map b/dist/pipes/adapters/InProcPipe.d.ts.map
new file mode 100644
index 0000000..e83a816
--- /dev/null
+++ b/dist/pipes/adapters/InProcPipe.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"InProcPipe.d.ts","sourceRoot":"","sources":["../../../src/pipes/adapters/InProcPipe.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAElD,qBAAa,UAAW,YAAW,WAAW;IAC5C,YAAY,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,IAAI;CAG5C"}
\ No newline at end of file
diff --git a/dist/pipes/adapters/InProcPipe.js b/dist/pipes/adapters/InProcPipe.js
new file mode 100644
index 0000000..0fdcad9
--- /dev/null
+++ b/dist/pipes/adapters/InProcPipe.js
@@ -0,0 +1,7 @@
+import { PassThrough } from 'stream';
+export class InProcPipe {
+    createDuplex(options) {
+        return new PassThrough(options);
+    }
+}
+//# sourceMappingURL=InProcPipe.js.map
\ No newline at end of file
diff --git a/dist/pipes/adapters/InProcPipe.js.map b/dist/pipes/adapters/InProcPipe.js.map
new file mode 100644
index 0000000..a41c04c
--- /dev/null
+++ b/dist/pipes/adapters/InProcPipe.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"InProcPipe.js","sourceRoot":"","sources":["../../../src/pipes/adapters/InProcPipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAIrC,MAAM,OAAO,UAAU;IACrB,YAAY,CAAC,OAAuB;QAClC,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;CACF"}
\ No newline at end of file
diff --git a/dist/pipes/adapters/WorkerPipe.d.ts b/dist/pipes/adapters/WorkerPipe.d.ts
new file mode 100644
index 0000000..3462a17
--- /dev/null
+++ b/dist/pipes/adapters/WorkerPipe.d.ts
@@ -0,0 +1,9 @@
+import { MessagePort } from 'node:worker_threads';
+import type { Pipe, StreamOptions } from '../../types/stream';
+import type { PipeAdapter } from '../PipeAdapter';
+export declare class WorkerPipe implements PipeAdapter {
+    private port;
+    constructor(port: MessagePort);
+    createDuplex(options?: StreamOptions): Pipe;
+}
+//# sourceMappingURL=WorkerPipe.d.ts.map
\ No newline at end of file
diff --git a/dist/pipes/adapters/WorkerPipe.d.ts.map b/dist/pipes/adapters/WorkerPipe.d.ts.map
new file mode 100644
index 0000000..f0f9309
--- /dev/null
+++ b/dist/pipes/adapters/WorkerPipe.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"WorkerPipe.d.ts","sourceRoot":"","sources":["../../../src/pipes/adapters/WorkerPipe.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;AAClD,OAAO,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,MAAM,oBAAoB,CAAC;AAC9D,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAmGlD,qBAAa,UAAW,YAAW,WAAW;IAC5C,OAAO,CAAC,IAAI,CAAc;gBAEd,IAAI,EAAE,WAAW;IAI7B,YAAY,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,IAAI;CAM5C"}
\ No newline at end of file
diff --git a/dist/pipes/adapters/WorkerPipe.js b/dist/pipes/adapters/WorkerPipe.js
new file mode 100644
index 0000000..5ab2b04
--- /dev/null
+++ b/dist/pipes/adapters/WorkerPipe.js
@@ -0,0 +1,89 @@
+import { Duplex } from 'stream';
+class WorkerPipeDuplex extends Duplex {
+    port;
+    paused = false;
+    buffer = [];
+    constructor(options) {
+        const { port, ...streamOptions } = options;
+        super(streamOptions);
+        this.port = port;
+        this.port.onmessage = (event) => {
+            const data = event.data;
+            if (data && data.type === 'pause') {
+                this.paused = true;
+                return;
+            }
+            if (data && data.type === 'resume') {
+                this.paused = false;
+                this.drainBuffer();
+                return;
+            }
+            if (data && data.type === 'end') {
+                this.push(null);
+                return;
+            }
+            if (data && data.type === 'data') {
+                const payload = data.payload;
+                if (!this.push(payload)) {
+                    this.port.postMessage({ type: 'pause' });
+                }
+            }
+            else {
+                if (!this.push(data)) {
+                    this.port.postMessage({ type: 'pause' });
+                }
+            }
+        };
+        this.port.onmessageerror = (event) => {
+            this.destroy(new Error('MessagePort error'));
+        };
+        this.on('finish', () => {
+            this.port.postMessage({ type: 'end' });
+        });
+    }
+    _read(size) {
+        this.port.postMessage({ type: 'resume' });
+    }
+    _write(chunk, encoding, callback) {
+        if (this.paused) {
+            this.buffer.push(chunk);
+            callback();
+        }
+        else {
+            try {
+                this.port.postMessage({ type: 'data', payload: chunk });
+                callback();
+            }
+            catch (error) {
+                callback(error instanceof Error ? error : new Error(String(error)));
+            }
+        }
+    }
+    _final(callback) {
+        this.port.postMessage({ type: 'end' });
+        callback();
+    }
+    _destroy(error, callback) {
+        this.port.close();
+        callback(error);
+    }
+    drainBuffer() {
+        while (this.buffer.length > 0 && !this.paused) {
+            const chunk = this.buffer.shift();
+            this.port.postMessage({ type: 'data', payload: chunk });
+        }
+    }
+}
+export class WorkerPipe {
+    port;
+    constructor(port) {
+        this.port = port;
+    }
+    createDuplex(options) {
+        return new WorkerPipeDuplex({
+            ...options,
+            port: this.port,
+        });
+    }
+}
+//# sourceMappingURL=WorkerPipe.js.map
\ No newline at end of file
diff --git a/dist/pipes/adapters/WorkerPipe.js.map b/dist/pipes/adapters/WorkerPipe.js.map
new file mode 100644
index 0000000..36da05f
--- /dev/null
+++ b/dist/pipes/adapters/WorkerPipe.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"WorkerPipe.js","sourceRoot":"","sources":["../../../src/pipes/adapters/WorkerPipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAShC,MAAM,gBAAiB,SAAQ,MAAM;IAC3B,IAAI,CAAc;IAClB,MAAM,GAAY,KAAK,CAAC;IACxB,MAAM,GAAwB,EAAE,CAAC;IAEzC,YAAY,OAA0B;QACpC,MAAM,EAAE,IAAI,EAAE,GAAG,aAAa,EAAE,GAAG,OAAO,CAAC;QAC3C,KAAK,CAAC,aAAa,CAAC,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,KAAmB,EAAE,EAAE;YAC5C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YAExB,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACnB,OAAO;YACT,CAAC;YAED,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;gBACnC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,OAAO;YACT,CAAC;YAED,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC;gBAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,OAAO;YACT,CAAC;YAED,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;gBACjC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;oBACrB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBAC3C,CAAC;YACH,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,KAAmB,EAAE,EAAE;YACjD,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC/C,CAAC,CAAC;QAEF,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,IAAY;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CACJ,KAAU,EACV,QAAwB,EACxB,QAAwC;QAExC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACxB,QAAQ,EAAE,CAAC;QACb,CAAC;aAAM,CAAC;YACN,IAAI,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxD,QAAQ,EAAE,CAAC;YACb,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,QAAQ,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACtE,CAAC;QACH,CAAC;IACH,CAAC;IAED,MAAM,CAAC,QAAwC;QAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QACvC,QAAQ,EAAE,CAAC;IACb,CAAC;IAED,QAAQ,CACN,KAAmB,EACnB,QAAwC;QAExC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAClB,QAAQ,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAEO,WAAW;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAClC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAC1D,CAAC;IACH,CAAC;CACF;AAED,MAAM,OAAO,UAAU;IACb,IAAI,CAAc;IAE1B,YAAY,IAAiB;QAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAED,YAAY,CAAC,OAAuB;QAClC,OAAO,IAAI,gBAAgB,CAAC;YAC1B,GAAG,OAAO;YACV,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CACF"}
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..6d8f48f
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,1819 @@
+{
+  "name": "mkolbol",
+  "version": "0.2.0-rfc",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "mkolbol",
+      "version": "0.2.0-rfc",
+      "license": "MIT",
+      "dependencies": {
+        "node-pty": "^1.0.0"
+      },
+      "devDependencies": {
+        "@types/node": "^20.12.12",
+        "typescript": "^5.6.2",
+        "vitest": "^1.6.0"
+      }
+    },
+    "node_modules/@esbuild/aix-ppc64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
+      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "aix"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-arm": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
+      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
+      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/android-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
+      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/darwin-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
+      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/darwin-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
+      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/freebsd-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
+      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/freebsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
+      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-arm": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
+      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
+      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-ia32": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
+      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-loong64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
+      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-mips64el": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
+      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
+      "cpu": [
+        "mips64el"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-ppc64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
+      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-riscv64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
+      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-s390x": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
+      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/linux-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
+      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/netbsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
+      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "netbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/openbsd-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
+      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openbsd"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/sunos-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
+      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "sunos"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-arm64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
+      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-ia32": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
+      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@esbuild/win32-x64": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
+      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ],
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@jest/schemas": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
+      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@sinclair/typebox": "^0.27.8"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.5.5",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
+      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@rollup/rollup-android-arm-eabi": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.4.tgz",
+      "integrity": "sha512-BTm2qKNnWIQ5auf4deoetINJm2JzvihvGb9R6K/ETwKLql/Bb3Eg2H1FBp1gUb4YGbydMA3jcmQTR73q7J+GAA==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-android-arm64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.4.tgz",
+      "integrity": "sha512-P9LDQiC5vpgGFgz7GSM6dKPCiqR3XYN1WwJKA4/BUVDjHpYsf3iBEmVz62uyq20NGYbiGPR5cNHI7T1HqxNs2w==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "android"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-arm64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.4.tgz",
+      "integrity": "sha512-QRWSW+bVccAvZF6cbNZBJwAehmvG9NwfWHwMy4GbWi/BQIA/laTIktebT2ipVjNncqE6GLPxOok5hsECgAxGZg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-darwin-x64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.4.tgz",
+      "integrity": "sha512-hZgP05pResAkRJxL1b+7yxCnXPGsXU0fG9Yfd6dUaoGk+FhdPKCJ5L1Sumyxn8kvw8Qi5PvQ8ulenUbRjzeCTw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-arm64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.4.tgz",
+      "integrity": "sha512-xmc30VshuBNUd58Xk4TKAEcRZHaXlV+tCxIXELiE9sQuK3kG8ZFgSPi57UBJt8/ogfhAF5Oz4ZSUBN77weM+mQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-freebsd-x64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.4.tgz",
+      "integrity": "sha512-WdSLpZFjOEqNZGmHflxyifolwAiZmDQzuOzIq9L27ButpCVpD7KzTRtEG1I0wMPFyiyUdOO+4t8GvrnBLQSwpw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "freebsd"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.4.tgz",
+      "integrity": "sha512-xRiOu9Of1FZ4SxVbB0iEDXc4ddIcjCv2aj03dmW8UrZIW7aIQ9jVJdLBIhxBI+MaTnGAKyvMwPwQnoOEvP7FgQ==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.4.tgz",
+      "integrity": "sha512-FbhM2p9TJAmEIEhIgzR4soUcsW49e9veAQCziwbR+XWB2zqJ12b4i/+hel9yLiD8pLncDH4fKIPIbt5238341Q==",
+      "cpu": [
+        "arm"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.4.tgz",
+      "integrity": "sha512-4n4gVwhPHR9q/g8lKCyz0yuaD0MvDf7dV4f9tHt0C73Mp8h38UCtSCSE6R9iBlTbXlmA8CjpsZoujhszefqueg==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-arm64-musl": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.4.tgz",
+      "integrity": "sha512-u0n17nGA0nvi/11gcZKsjkLj1QIpAuPFQbR48Subo7SmZJnGxDpspyw2kbpuoQnyK+9pwf3pAoEXerJs/8Mi9g==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-loong64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.4.tgz",
+      "integrity": "sha512-0G2c2lpYtbTuXo8KEJkDkClE/+/2AFPdPAbmaHoE870foRFs4pBrDehilMcrSScrN/fB/1HTaWO4bqw+ewBzMQ==",
+      "cpu": [
+        "loong64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.4.tgz",
+      "integrity": "sha512-teSACug1GyZHmPDv14VNbvZFX779UqWTsd7KtTM9JIZRDI5NUwYSIS30kzI8m06gOPB//jtpqlhmraQ68b5X2g==",
+      "cpu": [
+        "ppc64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.4.tgz",
+      "integrity": "sha512-/MOEW3aHjjs1p4Pw1Xk4+3egRevx8Ji9N6HUIA1Ifh8Q+cg9dremvFCUbOX2Zebz80BwJIgCBUemjqhU5XI5Eg==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-riscv64-musl": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.4.tgz",
+      "integrity": "sha512-1HHmsRyh845QDpEWzOFtMCph5Ts+9+yllCrREuBR/vg2RogAQGGBRC8lDPrPOMnrdOJ+mt1WLMOC2Kao/UwcvA==",
+      "cpu": [
+        "riscv64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-s390x-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.4.tgz",
+      "integrity": "sha512-seoeZp4L/6D1MUyjWkOMRU6/iLmCU2EjbMTyAG4oIOs1/I82Y5lTeaxW0KBfkUdHAWN7j25bpkt0rjnOgAcQcA==",
+      "cpu": [
+        "s390x"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.4.tgz",
+      "integrity": "sha512-Wi6AXf0k0L7E2gteNsNHUs7UMwCIhsCTs6+tqQ5GPwVRWMaflqGec4Sd8n6+FNFDw9vGcReqk2KzBDhCa1DLYg==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-linux-x64-musl": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.4.tgz",
+      "integrity": "sha512-dtBZYjDmCQ9hW+WgEkaffvRRCKm767wWhxsFW3Lw86VXz/uJRuD438/XvbZT//B96Vs8oTA8Q4A0AfHbrxP9zw==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "linux"
+      ]
+    },
+    "node_modules/@rollup/rollup-openharmony-arm64": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.4.tgz",
+      "integrity": "sha512-1ox+GqgRWqaB1RnyZXL8PD6E5f7YyRUJYnCqKpNzxzP0TkaUh112NDrR9Tt+C8rJ4x5G9Mk8PQR3o7Ku2RKqKA==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "openharmony"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-arm64-msvc": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.4.tgz",
+      "integrity": "sha512-8GKr640PdFNXwzIE0IrkMWUNUomILLkfeHjXBi/nUvFlpZP+FA8BKGKpacjW6OUUHaNI6sUURxR2U2g78FOHWQ==",
+      "cpu": [
+        "arm64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-ia32-msvc": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.4.tgz",
+      "integrity": "sha512-AIy/jdJ7WtJ/F6EcfOb2GjR9UweO0n43jNObQMb6oGxkYTfLcnN7vYYpG+CN3lLxrQkzWnMOoNSHTW54pgbVxw==",
+      "cpu": [
+        "ia32"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-x64-gnu": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.4.tgz",
+      "integrity": "sha512-UF9KfsH9yEam0UjTwAgdK0anlQ7c8/pWPU2yVjyWcF1I1thABt6WXE47cI71pGiZ8wGvxohBoLnxM04L/wj8mQ==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@rollup/rollup-win32-x64-msvc": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.4.tgz",
+      "integrity": "sha512-bf9PtUa0u8IXDVxzRToFQKsNCRz9qLYfR/MpECxl4mRoWYjAeFjgxj1XdZr2M/GNVpT05p+LgQOHopYDlUu6/w==",
+      "cpu": [
+        "x64"
+      ],
+      "dev": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "win32"
+      ]
+    },
+    "node_modules/@sinclair/typebox": {
+      "version": "0.27.8",
+      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
+      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/estree": {
+      "version": "1.0.8",
+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/@types/node": {
+      "version": "20.19.21",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.21.tgz",
+      "integrity": "sha512-CsGG2P3I5y48RPMfprQGfy4JPRZ6csfC3ltBZSRItG3ngggmNY/qs2uZKp4p9VbrpqNNSMzUZNFZKzgOGnd/VA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "undici-types": "~6.21.0"
+      }
+    },
+    "node_modules/@vitest/expect": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-1.6.1.tgz",
+      "integrity": "sha512-jXL+9+ZNIJKruofqXuuTClf44eSpcHlgj3CiuNihUF3Ioujtmc0zIa3UJOW5RjDK1YLBJZnWBlPuqhYycLioog==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/spy": "1.6.1",
+        "@vitest/utils": "1.6.1",
+        "chai": "^4.3.10"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/runner": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-1.6.1.tgz",
+      "integrity": "sha512-3nSnYXkVkf3mXFfE7vVyPmi3Sazhb/2cfZGGs0JRzFsPFvAMBEcrweV1V1GsrstdXeKCTXlJbvnQwGWgEIHmOA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/utils": "1.6.1",
+        "p-limit": "^5.0.0",
+        "pathe": "^1.1.1"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/snapshot": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-1.6.1.tgz",
+      "integrity": "sha512-WvidQuWAzU2p95u8GAKlRMqMyN1yOJkGHnx3M1PL9Raf7AQ1kwLKg04ADlCa3+OXUZE7BceOhVZiuWAbzCKcUQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "magic-string": "^0.30.5",
+        "pathe": "^1.1.1",
+        "pretty-format": "^29.7.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/spy": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-1.6.1.tgz",
+      "integrity": "sha512-MGcMmpGkZebsMZhbQKkAf9CX5zGvjkBTqf8Zx3ApYWXr3wG+QvEu2eXWfnIIWYSJExIp4V9FCKDEeygzkYrXMw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "tinyspy": "^2.2.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/@vitest/utils": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-1.6.1.tgz",
+      "integrity": "sha512-jOrrUvXM4Av9ZWiG1EajNto0u96kWAhJ1LmPmJhXXQx/32MecEKd10pOLYgS2BQx1TgkGhloPU1ArDW2vvaY6g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "diff-sequences": "^29.6.3",
+        "estree-walker": "^3.0.3",
+        "loupe": "^2.3.7",
+        "pretty-format": "^29.7.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.15.0",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
+      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-walk": {
+      "version": "8.3.4",
+      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
+      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "acorn": "^8.11.0"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "5.2.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
+      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/assertion-error": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-1.1.0.tgz",
+      "integrity": "sha512-jgsaNduz+ndvGyFt3uSuWqvy4lCnIJiovtouQN5JZHOKCS2QuhEdbcQHFhVksz2N2U9hXJo8odG7ETyWlEeuDw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/cac": {
+      "version": "6.7.14",
+      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
+      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/chai": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/chai/-/chai-4.5.0.tgz",
+      "integrity": "sha512-RITGBfijLkBddZvnn8jdqoTypxvqbOLYQkGGxXzeFjVHvudaPw0HNFD9x928/eUwYWd2dPCugVqspGALTZZQKw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "assertion-error": "^1.1.0",
+        "check-error": "^1.0.3",
+        "deep-eql": "^4.1.3",
+        "get-func-name": "^2.0.2",
+        "loupe": "^2.3.6",
+        "pathval": "^1.1.1",
+        "type-detect": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/check-error": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/check-error/-/check-error-1.0.3.tgz",
+      "integrity": "sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "get-func-name": "^2.0.2"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/confbox": {
+      "version": "0.1.8",
+      "resolved": "https://registry.npmjs.org/confbox/-/confbox-0.1.8.tgz",
+      "integrity": "sha512-RMtmw0iFkeR4YV+fUOSucriAQNb9g8zFR52MWCtl+cCZOFRNL6zeB395vPzFhEjjn4fMxXudmELnl/KF/WrK6w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.6",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
+      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.3",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
+      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/deep-eql": {
+      "version": "4.1.4",
+      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-4.1.4.tgz",
+      "integrity": "sha512-SUwdGfqdKOwxCPeVYjwSyRpJ7Z+fhpwIAtmCUdZIWZ/YP5R9WAsyuSgpLVDi9bjWoN2LXHNss/dk3urXtdQxGg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "type-detect": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/diff-sequences": {
+      "version": "29.6.3",
+      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
+      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/esbuild": {
+      "version": "0.21.5",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
+      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "bin": {
+        "esbuild": "bin/esbuild"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "optionalDependencies": {
+        "@esbuild/aix-ppc64": "0.21.5",
+        "@esbuild/android-arm": "0.21.5",
+        "@esbuild/android-arm64": "0.21.5",
+        "@esbuild/android-x64": "0.21.5",
+        "@esbuild/darwin-arm64": "0.21.5",
+        "@esbuild/darwin-x64": "0.21.5",
+        "@esbuild/freebsd-arm64": "0.21.5",
+        "@esbuild/freebsd-x64": "0.21.5",
+        "@esbuild/linux-arm": "0.21.5",
+        "@esbuild/linux-arm64": "0.21.5",
+        "@esbuild/linux-ia32": "0.21.5",
+        "@esbuild/linux-loong64": "0.21.5",
+        "@esbuild/linux-mips64el": "0.21.5",
+        "@esbuild/linux-ppc64": "0.21.5",
+        "@esbuild/linux-riscv64": "0.21.5",
+        "@esbuild/linux-s390x": "0.21.5",
+        "@esbuild/linux-x64": "0.21.5",
+        "@esbuild/netbsd-x64": "0.21.5",
+        "@esbuild/openbsd-x64": "0.21.5",
+        "@esbuild/sunos-x64": "0.21.5",
+        "@esbuild/win32-arm64": "0.21.5",
+        "@esbuild/win32-ia32": "0.21.5",
+        "@esbuild/win32-x64": "0.21.5"
+      }
+    },
+    "node_modules/estree-walker": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
+      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "^1.0.0"
+      }
+    },
+    "node_modules/execa": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/execa/-/execa-8.0.1.tgz",
+      "integrity": "sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cross-spawn": "^7.0.3",
+        "get-stream": "^8.0.1",
+        "human-signals": "^5.0.0",
+        "is-stream": "^3.0.0",
+        "merge-stream": "^2.0.0",
+        "npm-run-path": "^5.1.0",
+        "onetime": "^6.0.0",
+        "signal-exit": "^4.1.0",
+        "strip-final-newline": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=16.17"
+      },
+      "funding": {
+        "url": "https://github.com/sindresorhus/execa?sponsor=1"
+      }
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "dev": true,
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/get-func-name": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/get-func-name/-/get-func-name-2.0.2.tgz",
+      "integrity": "sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/get-stream": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-8.0.1.tgz",
+      "integrity": "sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/human-signals": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-5.0.0.tgz",
+      "integrity": "sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "engines": {
+        "node": ">=16.17.0"
+      }
+    },
+    "node_modules/is-stream": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-3.0.0.tgz",
+      "integrity": "sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/js-tokens": {
+      "version": "9.0.1",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
+      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/local-pkg": {
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/local-pkg/-/local-pkg-0.5.1.tgz",
+      "integrity": "sha512-9rrA30MRRP3gBD3HTGnC6cDFpaE1kVDWxWgqWJUN0RvDNAo+Nz/9GxB+nHOH0ifbVFy0hSA1V6vFDvnx54lTEQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "mlly": "^1.7.3",
+        "pkg-types": "^1.2.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antfu"
+      }
+    },
+    "node_modules/loupe": {
+      "version": "2.3.7",
+      "resolved": "https://registry.npmjs.org/loupe/-/loupe-2.3.7.tgz",
+      "integrity": "sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "get-func-name": "^2.0.1"
+      }
+    },
+    "node_modules/magic-string": {
+      "version": "0.30.19",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
+      "integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.5.5"
+      }
+    },
+    "node_modules/merge-stream": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
+      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/mimic-fn": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
+      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/mlly": {
+      "version": "1.8.0",
+      "resolved": "https://registry.npmjs.org/mlly/-/mlly-1.8.0.tgz",
+      "integrity": "sha512-l8D9ODSRWLe2KHJSifWGwBqpTZXIXTeo8mlKjY+E2HAakaTeNpqAyBZ8GSqLzHgw4XmHmC8whvpjJNMbFZN7/g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "acorn": "^8.15.0",
+        "pathe": "^2.0.3",
+        "pkg-types": "^1.3.1",
+        "ufo": "^1.6.1"
+      }
+    },
+    "node_modules/mlly/node_modules/pathe": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
+      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/nan": {
+      "version": "2.23.0",
+      "resolved": "https://registry.npmjs.org/nan/-/nan-2.23.0.tgz",
+      "integrity": "sha512-1UxuyYGdoQHcGg87Lkqm3FzefucTa0NAiOcuRsDmysep3c1LVCRK2krrUDafMWtjSG04htvAmvg96+SDknOmgQ==",
+      "license": "MIT"
+    },
+    "node_modules/nanoid": {
+      "version": "3.3.11",
+      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
+      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "bin": {
+        "nanoid": "bin/nanoid.cjs"
+      },
+      "engines": {
+        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
+      }
+    },
+    "node_modules/node-pty": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/node-pty/-/node-pty-1.0.0.tgz",
+      "integrity": "sha512-wtBMWWS7dFZm/VgqElrTvtfMq4GzJ6+edFI0Y0zyzygUSZMgZdraDUMUhCIvkjhJjme15qWmbyJbtAx4ot4uZA==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "dependencies": {
+        "nan": "^2.17.0"
+      }
+    },
+    "node_modules/npm-run-path": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-5.3.0.tgz",
+      "integrity": "sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "path-key": "^4.0.0"
+      },
+      "engines": {
+        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/npm-run-path/node_modules/path-key": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-4.0.0.tgz",
+      "integrity": "sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/onetime": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/onetime/-/onetime-6.0.0.tgz",
+      "integrity": "sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "mimic-fn": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-5.0.0.tgz",
+      "integrity": "sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "yocto-queue": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/pathe": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/pathe/-/pathe-1.1.2.tgz",
+      "integrity": "sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/pathval": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/pathval/-/pathval-1.1.1.tgz",
+      "integrity": "sha512-Dp6zGqpTdETdR63lehJYPeIOqpiNBNtc7BpWSLrOje7UaIsE5aY92r/AunQA7rsXvet3lrJ3JnZX29UPTKXyKQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
+      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/pkg-types": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/pkg-types/-/pkg-types-1.3.1.tgz",
+      "integrity": "sha512-/Jm5M4RvtBFVkKWRu2BLUTNP8/M2a+UwuAX+ae4770q1qVGtfjG+WTCupoZixokjmHiry8uI+dlY8KXYV5HVVQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "confbox": "^0.1.8",
+        "mlly": "^1.7.4",
+        "pathe": "^2.0.1"
+      }
+    },
+    "node_modules/pkg-types/node_modules/pathe": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
+      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/postcss": {
+      "version": "8.5.6",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/postcss/"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/postcss"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "nanoid": "^3.3.11",
+        "picocolors": "^1.1.1",
+        "source-map-js": "^1.2.1"
+      },
+      "engines": {
+        "node": "^10 || ^12 || >=14"
+      }
+    },
+    "node_modules/pretty-format": {
+      "version": "29.7.0",
+      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
+      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@jest/schemas": "^29.6.3",
+        "ansi-styles": "^5.0.0",
+        "react-is": "^18.0.0"
+      },
+      "engines": {
+        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
+      }
+    },
+    "node_modules/react-is": {
+      "version": "18.3.1",
+      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
+      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/rollup": {
+      "version": "4.52.4",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.4.tgz",
+      "integrity": "sha512-CLEVl+MnPAiKh5pl4dEWSyMTpuflgNQiLGhMv8ezD5W/qP8AKvmYpCOKRRNOh7oRKnauBZ4SyeYkMS+1VSyKwQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/estree": "1.0.8"
+      },
+      "bin": {
+        "rollup": "dist/bin/rollup"
+      },
+      "engines": {
+        "node": ">=18.0.0",
+        "npm": ">=8.0.0"
+      },
+      "optionalDependencies": {
+        "@rollup/rollup-android-arm-eabi": "4.52.4",
+        "@rollup/rollup-android-arm64": "4.52.4",
+        "@rollup/rollup-darwin-arm64": "4.52.4",
+        "@rollup/rollup-darwin-x64": "4.52.4",
+        "@rollup/rollup-freebsd-arm64": "4.52.4",
+        "@rollup/rollup-freebsd-x64": "4.52.4",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.52.4",
+        "@rollup/rollup-linux-arm-musleabihf": "4.52.4",
+        "@rollup/rollup-linux-arm64-gnu": "4.52.4",
+        "@rollup/rollup-linux-arm64-musl": "4.52.4",
+        "@rollup/rollup-linux-loong64-gnu": "4.52.4",
+        "@rollup/rollup-linux-ppc64-gnu": "4.52.4",
+        "@rollup/rollup-linux-riscv64-gnu": "4.52.4",
+        "@rollup/rollup-linux-riscv64-musl": "4.52.4",
+        "@rollup/rollup-linux-s390x-gnu": "4.52.4",
+        "@rollup/rollup-linux-x64-gnu": "4.52.4",
+        "@rollup/rollup-linux-x64-musl": "4.52.4",
+        "@rollup/rollup-openharmony-arm64": "4.52.4",
+        "@rollup/rollup-win32-arm64-msvc": "4.52.4",
+        "@rollup/rollup-win32-ia32-msvc": "4.52.4",
+        "@rollup/rollup-win32-x64-gnu": "4.52.4",
+        "@rollup/rollup-win32-x64-msvc": "4.52.4",
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/siginfo": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
+      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
+      "dev": true,
+      "license": "ISC"
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "dev": true,
+      "license": "ISC",
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/source-map-js": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
+      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
+      "dev": true,
+      "license": "BSD-3-Clause",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/stackback": {
+      "version": "0.0.2",
+      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
+      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/std-env": {
+      "version": "3.9.0",
+      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
+      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/strip-final-newline": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-3.0.0.tgz",
+      "integrity": "sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/strip-literal": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-2.1.1.tgz",
+      "integrity": "sha512-631UJ6O00eNGfMiWG78ck80dfBab8X6IVFB51jZK5Icd7XAs60Z5y7QdSd/wGIklnWvRbUNloVzhOKKmutxQ6Q==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "js-tokens": "^9.0.1"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/antfu"
+      }
+    },
+    "node_modules/tinybench": {
+      "version": "2.9.0",
+      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
+      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/tinypool": {
+      "version": "0.8.4",
+      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-0.8.4.tgz",
+      "integrity": "sha512-i11VH5gS6IFeLY3gMBQ00/MmLncVP7JLXOw1vlgkytLmJK7QnEr7NXf0LBdxfmNPAeyetukOk0bOYrJrFGjYJQ==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/tinyspy": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-2.2.1.tgz",
+      "integrity": "sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=14.0.0"
+      }
+    },
+    "node_modules/type-detect": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.1.0.tgz",
+      "integrity": "sha512-Acylog8/luQ8L7il+geoSxhEkazvkslg7PSNKOX59mbB9cOveP5aq9h74Y7YU8yDpJwetzQQrfIwtf4Wp4LKcw==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.9.3",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.3.tgz",
+      "integrity": "sha512-jl1vZzPDinLr9eUt3J/t7V6FgNEw9QjvBPdysz9KfQDD41fQrC2Y4vKQdiaUpFT4bXlb1RHhLpp8wtm6M5TgSw==",
+      "dev": true,
+      "license": "Apache-2.0",
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/ufo": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/ufo/-/ufo-1.6.1.tgz",
+      "integrity": "sha512-9a4/uxlTWJ4+a5i0ooc1rU7C7YOw3wT+UGqdeNNHWnOF9qcMBgLRS+4IYUqbczewFx4mLEig6gawh7X6mFlEkA==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/undici-types": {
+      "version": "6.21.0",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
+      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/vite": {
+      "version": "5.4.20",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.20.tgz",
+      "integrity": "sha512-j3lYzGC3P+B5Yfy/pfKNgVEg4+UtcIJcVRt2cDjIOmhLourAqPqf8P7acgxeiSgUB7E3p2P8/3gNIgDLpwzs4g==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "esbuild": "^0.21.3",
+        "postcss": "^8.4.43",
+        "rollup": "^4.20.0"
+      },
+      "bin": {
+        "vite": "bin/vite.js"
+      },
+      "engines": {
+        "node": "^18.0.0 || >=20.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/vitejs/vite?sponsor=1"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.3"
+      },
+      "peerDependencies": {
+        "@types/node": "^18.0.0 || >=20.0.0",
+        "less": "*",
+        "lightningcss": "^1.21.0",
+        "sass": "*",
+        "sass-embedded": "*",
+        "stylus": "*",
+        "sugarss": "*",
+        "terser": "^5.4.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "less": {
+          "optional": true
+        },
+        "lightningcss": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        },
+        "sass-embedded": {
+          "optional": true
+        },
+        "stylus": {
+          "optional": true
+        },
+        "sugarss": {
+          "optional": true
+        },
+        "terser": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/vite-node": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-1.6.1.tgz",
+      "integrity": "sha512-YAXkfvGtuTzwWbDSACdJSg4A4DZiAqckWe90Zapc/sEX3XvHcw1NdurM/6od8J207tSDqNbSsgdCacBgvJKFuA==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "cac": "^6.7.14",
+        "debug": "^4.3.4",
+        "pathe": "^1.1.1",
+        "picocolors": "^1.0.0",
+        "vite": "^5.0.0"
+      },
+      "bin": {
+        "vite-node": "vite-node.mjs"
+      },
+      "engines": {
+        "node": "^18.0.0 || >=20.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      }
+    },
+    "node_modules/vitest": {
+      "version": "1.6.1",
+      "resolved": "https://registry.npmjs.org/vitest/-/vitest-1.6.1.tgz",
+      "integrity": "sha512-Ljb1cnSJSivGN0LqXd/zmDbWEM0RNNg2t1QW/XUhYl/qPqyu7CsqeWtqQXHVaJsecLPuDoak2oJcZN2QoRIOag==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@vitest/expect": "1.6.1",
+        "@vitest/runner": "1.6.1",
+        "@vitest/snapshot": "1.6.1",
+        "@vitest/spy": "1.6.1",
+        "@vitest/utils": "1.6.1",
+        "acorn-walk": "^8.3.2",
+        "chai": "^4.3.10",
+        "debug": "^4.3.4",
+        "execa": "^8.0.1",
+        "local-pkg": "^0.5.0",
+        "magic-string": "^0.30.5",
+        "pathe": "^1.1.1",
+        "picocolors": "^1.0.0",
+        "std-env": "^3.5.0",
+        "strip-literal": "^2.0.0",
+        "tinybench": "^2.5.1",
+        "tinypool": "^0.8.3",
+        "vite": "^5.0.0",
+        "vite-node": "1.6.1",
+        "why-is-node-running": "^2.2.2"
+      },
+      "bin": {
+        "vitest": "vitest.mjs"
+      },
+      "engines": {
+        "node": "^18.0.0 || >=20.0.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/vitest"
+      },
+      "peerDependencies": {
+        "@edge-runtime/vm": "*",
+        "@types/node": "^18.0.0 || >=20.0.0",
+        "@vitest/browser": "1.6.1",
+        "@vitest/ui": "1.6.1",
+        "happy-dom": "*",
+        "jsdom": "*"
+      },
+      "peerDependenciesMeta": {
+        "@edge-runtime/vm": {
+          "optional": true
+        },
+        "@types/node": {
+          "optional": true
+        },
+        "@vitest/browser": {
+          "optional": true
+        },
+        "@vitest/ui": {
+          "optional": true
+        },
+        "happy-dom": {
+          "optional": true
+        },
+        "jsdom": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "license": "ISC",
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/why-is-node-running": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
+      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "siginfo": "^2.0.0",
+        "stackback": "0.0.2"
+      },
+      "bin": {
+        "why-is-node-running": "cli.js"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/yocto-queue": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.2.1.tgz",
+      "integrity": "sha512-AyeEbWOu/TAXdxlV9wmGcR0+yh2j3vYPGOECcIj2S7MkrLyC7ne+oye2BKTItt0ii2PHk4cDy+95+LshzbXnGg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=12.20"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    }
+  }
+}
diff --git a/patches/DIFF_T1501_controlbus-adapter.patch b/patches/DIFF_T1501_controlbus-adapter.patch
new file mode 100644
index 0000000..62f887a
--- /dev/null
+++ b/patches/DIFF_T1501_controlbus-adapter.patch
@@ -0,0 +1,62 @@
+diff --git a/src/control/BusAdapter.ts b/src/control/BusAdapter.ts
+new file mode 100644
+index 0000000..953992c
+--- /dev/null
++++ b/src/control/BusAdapter.ts
+@@ -0,0 +1,5 @@
++import { PassThrough } from 'node:stream';
++
++export interface BusAdapter {
++  topic(name: string): PassThrough;
++}
+diff --git a/src/control/ControlBus.ts b/src/control/ControlBus.ts
+new file mode 100644
+index 0000000..97b4b3c
+--- /dev/null
++++ b/src/control/ControlBus.ts
+@@ -0,0 +1,24 @@
++import { BusAdapter } from './BusAdapter.js';
++import { InProcBusAdapter } from './adapters/InProcBusAdapter.js';
++
++export type ControlMessage = Record<string, any>;
++
++export class ControlBus {
++  private adapter: BusAdapter;
++
++  constructor(adapter?: BusAdapter) {
++    this.adapter = adapter ?? new InProcBusAdapter();
++  }
++
++  publish(topic: string, msg: ControlMessage): void {
++    this.adapter.topic(topic).write(msg);
++  }
++
++  subscribe(topic: string, handler: (msg: ControlMessage) => void): () => void {
++    const t = this.adapter.topic(topic);
++    const onData = (m: any) => handler(m as ControlMessage);
++    t.on('data', onData);
++    return () => t.off('data', onData);
++  }
++}
++
+diff --git a/src/control/adapters/InProcBusAdapter.ts b/src/control/adapters/InProcBusAdapter.ts
+new file mode 100644
+index 0000000..5139b31
+--- /dev/null
++++ b/src/control/adapters/InProcBusAdapter.ts
+@@ -0,0 +1,15 @@
++import { PassThrough } from 'node:stream';
++import { BusAdapter } from '../BusAdapter.js';
++
++export class InProcBusAdapter implements BusAdapter {
++  private topics = new Map<string, PassThrough>();
++
++  topic(name: string): PassThrough {
++    let t = this.topics.get(name);
++    if (!t) {
++      t = new PassThrough({ objectMode: true });
++      this.topics.set(name, t);
++    }
++    return t;
++  }
++}
diff --git a/patches/DIFF_T1502_pipe-adapter.patch b/patches/DIFF_T1502_pipe-adapter.patch
new file mode 100644
index 0000000..04b640f
--- /dev/null
+++ b/patches/DIFF_T1502_pipe-adapter.patch
@@ -0,0 +1,50 @@
+diff --git a/src/kernel/Kernel.ts b/src/kernel/Kernel.ts
+index 64bab3b..d22bcfc 100644
+--- a/src/kernel/Kernel.ts
++++ b/src/kernel/Kernel.ts
+@@ -1,11 +1,17 @@
+-import { PassThrough } from 'stream';
+ import type { Pipe, StreamOptions, Capabilities, CapabilityQuery } from '../types/stream';
++import type { PipeAdapter } from '../pipes/PipeAdapter';
++import { InProcPipe } from '../pipes/adapters/InProcPipe';
+ 
+ export class Kernel {
+   private registry = new Map<string, { capabilities: Capabilities; pipe: Pipe }>();
++  private adapter: PipeAdapter;
++
++  constructor(adapter?: PipeAdapter) {
++    this.adapter = adapter ?? new InProcPipe();
++  }
+ 
+   createPipe(options?: StreamOptions): Pipe {
+-    return new PassThrough(options);
++    return this.adapter.createDuplex(options);
+   }
+ 
+   connect(from: Pipe, to: Pipe): void {
+diff --git a/src/pipes/PipeAdapter.ts b/src/pipes/PipeAdapter.ts
+new file mode 100644
+index 0000000..5edba39
+--- /dev/null
++++ b/src/pipes/PipeAdapter.ts
+@@ -0,0 +1,5 @@
++import type { Pipe, StreamOptions } from '../types/stream';
++
++export interface PipeAdapter {
++  createDuplex(options?: StreamOptions): Pipe;
++}
+diff --git a/src/pipes/adapters/InProcPipe.ts b/src/pipes/adapters/InProcPipe.ts
+new file mode 100644
+index 0000000..a545c00
+--- /dev/null
++++ b/src/pipes/adapters/InProcPipe.ts
+@@ -0,0 +1,9 @@
++import { PassThrough } from 'stream';
++import type { Pipe, StreamOptions } from '../../types/stream';
++import type { PipeAdapter } from '../PipeAdapter';
++
++export class InProcPipe implements PipeAdapter {
++  createDuplex(options?: StreamOptions): Pipe {
++    return new PassThrough(options);
++  }
++}
diff --git a/src/control/BusAdapter.ts b/src/control/BusAdapter.ts
new file mode 100644
index 0000000..953992c
--- /dev/null
+++ b/src/control/BusAdapter.ts
@@ -0,0 +1,5 @@
+import { PassThrough } from 'node:stream';
+
+export interface BusAdapter {
+  topic(name: string): PassThrough;
+}
diff --git a/src/control/ControlBus.ts b/src/control/ControlBus.ts
new file mode 100644
index 0000000..97b4b3c
--- /dev/null
+++ b/src/control/ControlBus.ts
@@ -0,0 +1,24 @@
+import { BusAdapter } from './BusAdapter.js';
+import { InProcBusAdapter } from './adapters/InProcBusAdapter.js';
+
+export type ControlMessage = Record<string, any>;
+
+export class ControlBus {
+  private adapter: BusAdapter;
+
+  constructor(adapter?: BusAdapter) {
+    this.adapter = adapter ?? new InProcBusAdapter();
+  }
+
+  publish(topic: string, msg: ControlMessage): void {
+    this.adapter.topic(topic).write(msg);
+  }
+
+  subscribe(topic: string, handler: (msg: ControlMessage) => void): () => void {
+    const t = this.adapter.topic(topic);
+    const onData = (m: any) => handler(m as ControlMessage);
+    t.on('data', onData);
+    return () => t.off('data', onData);
+  }
+}
+
diff --git a/src/control/adapters/InProcBusAdapter.ts b/src/control/adapters/InProcBusAdapter.ts
new file mode 100644
index 0000000..5139b31
--- /dev/null
+++ b/src/control/adapters/InProcBusAdapter.ts
@@ -0,0 +1,15 @@
+import { PassThrough } from 'node:stream';
+import { BusAdapter } from '../BusAdapter.js';
+
+export class InProcBusAdapter implements BusAdapter {
+  private topics = new Map<string, PassThrough>();
+
+  topic(name: string): PassThrough {
+    let t = this.topics.get(name);
+    if (!t) {
+      t = new PassThrough({ objectMode: true });
+      this.topics.set(name, t);
+    }
+    return t;
+  }
+}
diff --git a/src/control/adapters/WorkerBusAdapter.ts b/src/control/adapters/WorkerBusAdapter.ts
new file mode 100644
index 0000000..6ab4a11
--- /dev/null
+++ b/src/control/adapters/WorkerBusAdapter.ts
@@ -0,0 +1,78 @@
+import { PassThrough } from 'node:stream';
+import { MessagePort } from 'node:worker_threads';
+import { BusAdapter } from '../BusAdapter.js';
+
+interface PortMessage {
+  type: 'publish' | 'subscribe' | 'unsubscribe';
+  topic: string;
+  data?: any;
+}
+
+export class WorkerBusAdapter implements BusAdapter {
+  private port: MessagePort;
+  private topics = new Map<string, PassThrough>();
+  private subscriptions = new Set<string>();
+
+  constructor(port: MessagePort) {
+    this.port = port;
+    this.port.on('message', this.handleMessage.bind(this));
+  }
+
+  topic(name: string): PassThrough {
+    let t = this.topics.get(name);
+    if (!t) {
+      t = new PassThrough({ objectMode: true });
+      this.topics.set(name, t);
+      
+      t.on('data', (data: any) => {
+        this.port.postMessage({
+          type: 'publish',
+          topic: name,
+          data
+        } as PortMessage);
+      });
+
+      if (!this.subscriptions.has(name)) {
+        this.subscriptions.add(name);
+        this.port.postMessage({
+          type: 'subscribe',
+          topic: name
+        } as PortMessage);
+      }
+    }
+    return t;
+  }
+
+  private handleMessage(msg: PortMessage): void {
+    
+    if (msg.type === 'publish') {
+      const stream = this.topics.get(msg.topic);
+      if (stream && msg.data !== undefined) {
+        stream.write(msg.data);
+      }
+    }
+  }
+
+  unsubscribe(topic: string): void {
+    if (this.subscriptions.has(topic)) {
+      this.subscriptions.delete(topic);
+      this.port.postMessage({
+        type: 'unsubscribe',
+        topic
+      } as PortMessage);
+    }
+    
+    const stream = this.topics.get(topic);
+    if (stream) {
+      stream.end();
+      this.topics.delete(topic);
+    }
+  }
+
+  close(): void {
+    for (const topic of this.subscriptions) {
+      this.unsubscribe(topic);
+    }
+    this.port.close();
+  }
+}
diff --git a/src/controller/TopologyController.ts b/src/controller/TopologyController.ts
new file mode 100644
index 0000000..5b54a75
--- /dev/null
+++ b/src/controller/TopologyController.ts
@@ -0,0 +1,100 @@
+import { Kernel } from '../kernel/Kernel.js';
+import { StateManager } from '../state/StateManager.js';
+import { ControlBus } from '../control/ControlBus.js';
+
+type FrameKind = 'cmd' | 'event' | 'ack' | 'err';
+
+interface FrameBase {
+  kind: FrameKind;
+  type: string;
+  id?: string;
+  ts?: number;
+  correlationId?: string;
+  src?: string;
+  dst?: string;
+  payload?: any;
+}
+
+export interface TopologyControllerOptions {
+  commandsTopic?: string;
+  eventsTopic?: string;
+}
+
+export class TopologyController {
+  private unsub?: () => void;
+  private readonly commandsTopic: string;
+  private readonly eventsTopic: string;
+
+  constructor(
+    private kernel: Kernel,
+    private state: StateManager,
+    private bus: ControlBus,
+    opts: TopologyControllerOptions = {}
+  ) {
+    this.commandsTopic = opts.commandsTopic ?? 'topology.commands';
+    this.eventsTopic = opts.eventsTopic ?? 'topology.events';
+  }
+
+  start(): void {
+    if (this.unsub) return;
+    this.unsub = this.bus.subscribe(this.commandsTopic, (msg) => this.handleCommand(msg as FrameBase));
+    this.state.subscribe((e) => {
+      const frame: FrameBase = { kind: 'event', type: e.type, ts: Date.now(), payload: e };
+      this.bus.publish(this.eventsTopic, frame);
+    });
+  }
+
+  stop(): void {
+    if (this.unsub) this.unsub();
+    this.unsub = undefined;
+  }
+
+  private ack(correlationId?: string, payload?: any) {
+    const frame: FrameBase = { kind: 'ack', type: 'ok', ts: Date.now(), correlationId, payload };
+    this.bus.publish(this.eventsTopic, frame);
+  }
+
+  private err(correlationId: string | undefined, message: string) {
+    const frame: FrameBase = { kind: 'err', type: 'error', ts: Date.now(), correlationId, payload: { message } };
+    this.bus.publish(this.eventsTopic, frame);
+  }
+
+  private handleCommand(frame: FrameBase) {
+    try {
+      const { type, payload, id } = frame;
+      switch (type) {
+        case 'declare-node': {
+          this.state.addNode(payload);
+          this.ack(id);
+          break;
+        }
+        case 'connect': {
+          this.state.connect(payload.from, payload.to);
+          this.ack(id);
+          break;
+        }
+        case 'split': {
+          this.state.split(payload.source, payload.destinations);
+          this.ack(id);
+          break;
+        }
+        case 'merge': {
+          this.state.merge(payload.sources, payload.destination);
+          this.ack(id);
+          break;
+        }
+        case 'snapshot': {
+          const topo = this.state.getTopology();
+          this.bus.publish(this.eventsTopic, { kind: 'event', type: 'topology.snapshot', ts: Date.now(), correlationId: id, payload: topo });
+          break;
+        }
+        default: {
+          this.err(id, `Unknown command type: ${type}`);
+        }
+      }
+    } catch (e: any) {
+      this.err(frame.id, e?.message ?? String(e));
+    }
+  }
+}
+
diff --git a/src/examples/control-bus-demo.ts b/src/examples/control-bus-demo.ts
new file mode 100644
index 0000000..fa09ad9
--- /dev/null
+++ b/src/examples/control-bus-demo.ts
@@ -0,0 +1,44 @@
+import { Kernel } from '../kernel/Kernel.js';
+import { StateManager } from '../state/StateManager.js';
+import { ControlBus } from '../control/ControlBus.js';
+import { TopologyController } from '../controller/TopologyController.js';
+
+function sleep(ms: number) { return new Promise(res => setTimeout(res, ms)); }
+
+async function main() {
+  const kernel = new Kernel();
+  const state = new StateManager(kernel);
+  const bus = new ControlBus();
+  const controller = new TopologyController(kernel, state, bus, { commandsTopic: 'topology.commands', eventsTopic: 'topology.events' });
+  controller.start();
+
+  // HMI subscribe to events
+  bus.subscribe('topology.events', (e) => {
+    if (e.kind === 'event') {
+      console.log('[event]', e.type, e.payload ?? '');
+    } else if (e.kind === 'ack') {
+      console.log('[ack]', e.correlationId);
+    } else if (e.kind === 'err') {
+      console.error('[err]', e.payload?.message);
+    }
+  });
+
+  const cmd = (type: string, payload?: any) => bus.publish('topology.commands', { kind: 'cmd', type, id: Math.random().toString(16).slice(2), ts: Date.now(), payload });
+
+  // Declare three nodes with terminals
+  cmd('declare-node', { id: 'timer-1', name: 'Timer', terminals: [{ name: 'output', direction: 'output' }] });
+  cmd('declare-node', { id: 'upper-1', name: 'Upper', terminals: [{ name: 'input', direction: 'input' }, { name: 'output', direction: 'output' }] });
+  cmd('declare-node', { id: 'sink-1', name: 'Sink', terminals: [{ name: 'input', direction: 'input' }] });
+
+  // Wire: timer.output -> upper.input -> sink.input
+  await sleep(10);
+  cmd('connect', { from: 'timer-1.output', to: 'upper-1.input' });
+  cmd('connect', { from: 'upper-1.output', to: 'sink-1.input' });
+
+  // Snapshot
+  await sleep(10);
+  cmd('snapshot');
+}
+
+main().catch(err => { console.error(err); process.exit(1); });
+
diff --git a/src/kernel/Kernel.ts b/src/kernel/Kernel.ts
index 64bab3b..d22bcfc 100644
--- a/src/kernel/Kernel.ts
+++ b/src/kernel/Kernel.ts
@@ -1,11 +1,17 @@
-import { PassThrough } from 'stream';
 import type { Pipe, StreamOptions, Capabilities, CapabilityQuery } from '../types/stream';
+import type { PipeAdapter } from '../pipes/PipeAdapter';
+import { InProcPipe } from '../pipes/adapters/InProcPipe';
 
 export class Kernel {
   private registry = new Map<string, { capabilities: Capabilities; pipe: Pipe }>();
+  private adapter: PipeAdapter;
+
+  constructor(adapter?: PipeAdapter) {
+    this.adapter = adapter ?? new InProcPipe();
+  }
 
   createPipe(options?: StreamOptions): Pipe {
-    return new PassThrough(options);
+    return this.adapter.createDuplex(options);
   }
 
   connect(from: Pipe, to: Pipe): void {
diff --git a/src/pipes/PipeAdapter.ts b/src/pipes/PipeAdapter.ts
new file mode 100644
index 0000000..5edba39
--- /dev/null
+++ b/src/pipes/PipeAdapter.ts
@@ -0,0 +1,5 @@
+import type { Pipe, StreamOptions } from '../types/stream';
+
+export interface PipeAdapter {
+  createDuplex(options?: StreamOptions): Pipe;
+}
diff --git a/src/pipes/adapters/InProcPipe.ts b/src/pipes/adapters/InProcPipe.ts
new file mode 100644
index 0000000..a545c00
--- /dev/null
+++ b/src/pipes/adapters/InProcPipe.ts
@@ -0,0 +1,9 @@
+import { PassThrough } from 'stream';
+import type { Pipe, StreamOptions } from '../../types/stream';
+import type { PipeAdapter } from '../PipeAdapter';
+
+export class InProcPipe implements PipeAdapter {
+  createDuplex(options?: StreamOptions): Pipe {
+    return new PassThrough(options);
+  }
+}
diff --git a/src/pipes/adapters/WorkerPipe.ts b/src/pipes/adapters/WorkerPipe.ts
new file mode 100644
index 0000000..f989018
--- /dev/null
+++ b/src/pipes/adapters/WorkerPipe.ts
@@ -0,0 +1,116 @@
+import { Duplex } from 'stream';
+import { MessagePort } from 'node:worker_threads';
+import type { Pipe, StreamOptions } from '../../types/stream';
+import type { PipeAdapter } from '../PipeAdapter';
+
+interface WorkerPipeOptions extends StreamOptions {
+  port: MessagePort;
+}
+
+class WorkerPipeDuplex extends Duplex {
+  private port: MessagePort;
+  private paused: boolean = false;
+  private buffer: Array<Buffer | any> = [];
+
+  constructor(options: WorkerPipeOptions) {
+    const { port, ...streamOptions } = options;
+    super(streamOptions);
+    this.port = port;
+
+    this.port.onmessage = (event: MessageEvent) => {
+      const data = event.data;
+      
+      if (data && data.type === 'pause') {
+        this.paused = true;
+        return;
+      }
+      
+      if (data && data.type === 'resume') {
+        this.paused = false;
+        this.drainBuffer();
+        return;
+      }
+
+      if (data && data.type === 'end') {
+        this.push(null);
+        return;
+      }
+
+      if (data && data.type === 'data') {
+        const payload = data.payload;
+        if (!this.push(payload)) {
+          this.port.postMessage({ type: 'pause' });
+        }
+      } else {
+        if (!this.push(data)) {
+          this.port.postMessage({ type: 'pause' });
+        }
+      }
+    };
+
+    this.port.onmessageerror = (event: MessageEvent) => {
+      this.destroy(new Error('MessagePort error'));
+    };
+
+    this.on('finish', () => {
+      this.port.postMessage({ type: 'end' });
+    });
+  }
+
+  _read(size: number): void {
+    this.port.postMessage({ type: 'resume' });
+  }
+
+  _write(
+    chunk: any,
+    encoding: BufferEncoding,
+    callback: (error?: Error | null) => void
+  ): void {
+    if (this.paused) {
+      this.buffer.push(chunk);
+      callback();
+    } else {
+      try {
+        this.port.postMessage({ type: 'data', payload: chunk });
+        callback();
+      } catch (error) {
+        callback(error instanceof Error ? error : new Error(String(error)));
+      }
+    }
+  }
+
+  _final(callback: (error?: Error | null) => void): void {
+    this.port.postMessage({ type: 'end' });
+    callback();
+  }
+
+  _destroy(
+    error: Error | null,
+    callback: (error?: Error | null) => void
+  ): void {
+    this.port.close();
+    callback(error);
+  }
+
+  private drainBuffer(): void {
+    while (this.buffer.length > 0 && !this.paused) {
+      const chunk = this.buffer.shift();
+      this.port.postMessage({ type: 'data', payload: chunk });
+    }
+  }
+}
+
+export class WorkerPipe implements PipeAdapter {
+  private port: MessagePort;
+
+  constructor(port: MessagePort) {
+    this.port = port;
+  }
+
+  createDuplex(options?: StreamOptions): Pipe {
+    return new WorkerPipeDuplex({
+      ...options,
+      port: this.port,
+    });
+  }
+}
