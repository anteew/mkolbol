{
  "template": "sprint-template",
  "version": 2,
  "conventions": {
    "one_active_sprint_per_file": true,
    "files": {
      "core": {
        "sprint_file": "ampcode.json",
        "log_file": "ampcode.log"
      },
      "devex": {
        "sprint_file": "devex.json",
        "log_file": "devex.log"
      }
    },
    "archives": {
      "dir": "archives/",
      "examples": [
        "archives/ampcode-md-archive-<UTC>.md",
        "archives/devex-md-archive-<UTC>.md",
        "archives/ampcode.log.<UTC>"
      ]
    }
  },
  "workflow_hooks": {
    "eslint_dryrun": true,
    "prettier_staged": true
  },
  "sprint_block_schema": {
    "ampcode": "v1",
    "waves": [
      {
        "id": "<WAVE_ID>",
        "parallel": true,
        "depends_on": ["<WAVE_ID>"],
        "tasks": ["<TASK_ID>"]
      }
    ],
    "branch": "<BRANCH_NAME>",
    "tasks": [
      {
        "id": "<TASK_ID>",
        "agent": "devex",
        "title": "<Short Title>",
        "why": "<Rationale>",
        "allowedFiles": ["<paths...>"],
        "verify": ["<commands...>"],
        "deliverables": ["patches/DIFF_<ID>_<slug>.patch"]
      }
    ],
    "branch_instructions": [
      "IMPORTANT: Work only on <BRANCH_NAME>.",
      "Follow allowedFiles strictly; keep changes minimal.",
      "Use verify commands before pushing."
    ],
    "sprint_logging": {
      "core": {
        "log_file": "ampcode.log",
        "guidance": [
          "After each task append 1–3 lines: [Nxxxx] what changed.",
          "Include file pointers (path:line) when useful.",
          "Do not write to devex.log for core sprints."
        ]
      },
      "devex": {
        "log_file": "devex.log",
        "guidance": [
          "After each task append 1–3 lines: [Dxxxx] what changed.",
          "Include file pointers (path:line) when useful.",
          "Do not write to ampcode.log for DevEx sprints."
        ]
      }
    },
    "instructions": {
      "overview": "<One-liner of the sprint intent>",
      "expectations": [
        "Use JSONL logs and follow schema",
        "Modify only allowedFiles",
        "Run verify commands; deliver patches"
      ],
      "logging": {
        "log_file": "<ampcode.log|devex.log>",
        "schema": "agent_template/log_templates/<core|devex>_sprint_log.schema.json",
        "example": "agent_template/log_templates/<core|devex>_sprint_log.example.jsonl"
      },
      "hooks": {
        "eslint_dryrun": {
          "summary": "Fail‑fast ESLint fix dry‑run runs first; override with SKIP_ESLINT_DRYRUN=1 to bypass once.",
          "example": "agent_template/examples/precommit-eslint-dryrun.md"
        }
      },
      "deliverables_global": ["patches/*.patch", "tests updated and passing", "docs updated"],
      "knowledge": ["<Architect notes / context>", "<Links or hints>"]
    }
  },
  "worker_workflow": [
    "Read sprint block and Branch Instructions.",
    "Run: export MK_LOCAL_NODE=1; npm run build; npm run test:ci.",
    "Apply changes only under allowedFiles.",
    "Log concise updates to the correct log file per sprint.",
    "Create deliverable patches under patches/ with DIFF_* naming."
  ],
  "quality_bar": {
    "tests": "All modified areas covered; CI passing locally.",
    "docs": "Update affected docs and examples when behavior changes.",
    "perf": "Avoid regressions on hot paths; note any deltas."
  },
  "reports": {
    "artifacts": ["reports/summary.jsonl", "reports/<suite>/<case>.jsonl"],
    "digests": "docs/digests/*.md (optional)"
  },
  "instantiation": {
    "create_new_sprint_file": true,
    "core": {
      "target_filename": "ampcode.json",
      "description": "Single active core sprint file. Archive prior file into archives/."
    },
    "devex": {
      "target_filename": "devex.json",
      "description": "Single active DevEx sprint file. Archive prior file into archives/."
    },
    "archive_policy": {
      "dir": "archives/",
      "examples": ["archives/ampcode-<UTC>.json", "archives/devex-<UTC>.json"],
      "note": "Always archive previous sprint before creating a new one."
    }
  },
  "agent_guardrails": [
    "Modify only files listed in tasks[*].allowedFiles.",
    "Do not edit CI/workflows/package settings unless explicitly allowed.",
    "Do not rename or move files outside allowedFiles.",
    "Do not push directly to main; the architect handles merges.",
    "Produce unified patches under patches/ and keep diffs minimal.",
    "Node 24.x only for local runs; avoid platform-specific assumptions."
  ],
  "validation": {
    "required_fields": ["ampcode", "waves", "tasks", "branch"],
    "waves_rules": {
      "id": "string",
      "parallel": "boolean",
      "tasks": "string[]"
    },
    "task_rules": {
      "id": "string",
      "agent": "enum(susan|devex)",
      "title": "string",
      "allowedFiles": "string[]",
      "verify": "string[]",
      "deliverables": "string[]"
    }
  },
  "example": {
    "EXAMPLE_ONLY": true,
    "ampcode": "v1",
    "branch": "example-feature-branch",
    "waves": [
      {
        "id": "W1",
        "parallel": false,
        "tasks": ["X1001"]
      }
    ],
    "tasks": [
      {
        "id": "X1001",
        "agent": "devex",
        "title": "CLI help polish",
        "why": "Tighten UX and keep docs in sync.",
        "allowedFiles": ["scripts/mkctl.ts", "docs/devex/mkctl-cookbook.md"],
        "verify": ["npm run build", "npm run test:ci"],
        "deliverables": ["patches/DIFF_X1001_cli-help.patch"]
      }
    ],
    "branch_instructions": [
      "IMPORTANT: Work only on example-feature-branch.",
      "Write logs to devex.log.",
      "Submit patches under patches/."
    ]
  },
  "$schema": "./schema/agent_template.schema.json"
}
